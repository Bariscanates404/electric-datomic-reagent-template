["^ ","~:output",["^ ","~:js","goog.provide('cljs.math');\n/**\n * Constant for Euler's number e, the base for natural logarithms.\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E\n */\ncljs.math.E = Math.E;\n/**\n * Constant for pi, the ratio of the circumference of a circle to its diameter.\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI\n */\ncljs.math.PI = Math.PI;\n/**\n * Constant used to convert an angular value in degrees to the equivalent in radians\n */\ncljs.math.DEGREES_TO_RADIANS = 0.017453292519943295;\n/**\n * Constant used to convert an angular value in radians to the equivalent in degrees\n */\ncljs.math.RADIANS_TO_DEGREES = 57.29577951308232;\ncljs.math.TWO_TO_THE_52 = (4503599627370496);\ncljs.math.SIGNIFICAND_WIDTH32 = (21);\ncljs.math.EXP_BIAS = (1023);\ncljs.math.EXP_BITMASK32 = (2146435072);\ncljs.math.EXP_MAX = (1023);\ncljs.math.EXP_MIN = (-1022);\n/**\n * Tests the platform for endianness. Returns true when little-endian, false otherwise.\n */\ncljs.math.get_little_endian = (function cljs$math$get_little_endian(){\nvar a = (new ArrayBuffer((4)));\nvar i = (new Uint32Array(a));\nvar b = (new Uint8Array(a));\n(i[(0)] = (857870592));\n\nreturn ((b[(0)]) === (0));\n});\nif((typeof cljs !== 'undefined') && (typeof cljs.math !== 'undefined') && (typeof cljs.math.little_endian_QMARK_ !== 'undefined')){\n} else {\ncljs.math.little_endian_QMARK_ = cljs.math.get_little_endian();\n}\n/**\n * offset of hi integers in 64-bit values\n */\ncljs.math.HI = ((cljs.math.little_endian_QMARK_)?(1):(0));\n/**\n * offset of hi integers in 64-bit values\n */\ncljs.math.LO = ((1) - cljs.math.HI);\ncljs.math.INT32_MASK = (4294967295);\ncljs.math.INT32_NON_SIGN_BIT = (2147483648);\ncljs.math.INT32_NON_SIGN_BITS = (2147483647);\n/**\n * unsigned less-than comparator for 32-bit values\n */\ncljs.math.u_LT_ = (function cljs$math$u_LT_(a,b){\nvar ab = (a >>> (28));\nvar bb = (b >>> (28));\nreturn (((ab < bb)) || ((((ab === bb)) && (((a & (268435455)) < (b & (268435455)))))));\n});\n/**\n * Returns the sine of an angle.\n *   If a is ##NaN, ##-Inf, ##Inf => ##NaN\n *   If a is zero => zero with the same sign as a\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\n */\ncljs.math.sin = (function cljs$math$sin(a){\nreturn Math.sin(a);\n});\n/**\n * Returns the cosine of an angle.\n *   If a is ##NaN, ##-Inf, ##Inf => ##NaN\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\n */\ncljs.math.cos = (function cljs$math$cos(a){\nreturn Math.cos(a);\n});\n/**\n * Returns the tangent of an angle.\n *   If a is ##NaN, ##-Inf, ##Inf => ##NaN\n *   If a is zero => zero with the same sign as a\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\n */\ncljs.math.tan = (function cljs$math$tan(a){\nreturn Math.tan(a);\n});\n/**\n * Returns the arc sine of an angle, in the range -pi/2 to pi/2.\n *   If a is ##NaN or |a|>1 => ##NaN\n *   If a is zero => zero with the same sign as a\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\n */\ncljs.math.asin = (function cljs$math$asin(a){\nreturn Math.asin(a);\n});\n/**\n * Returns the arc cosine of a, in the range 0.0 to pi.\n *   If a is ##NaN or |a|>1 => ##NaN\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\n */\ncljs.math.acos = (function cljs$math$acos(a){\nreturn Math.acos(a);\n});\n/**\n * Returns the arc tangent of a, in the range of -pi/2 to pi/2.\n *   If a is ##NaN => ##NaN\n *   If a is zero => zero with the same sign as a\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\n */\ncljs.math.atan = (function cljs$math$atan(a){\nreturn Math.atan(a);\n});\n/**\n * Converts an angle in degrees to an approximate equivalent angle in radians.\n *   See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toRadians-double-\n */\ncljs.math.to_radians = (function cljs$math$to_radians(deg){\nreturn (deg * 0.017453292519943295);\n});\n/**\n * Converts an angle in radians to an approximate equivalent angle in degrees.\n *   See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toDegrees-double-\n */\ncljs.math.to_degrees = (function cljs$math$to_degrees(r){\nreturn (r * 57.29577951308232);\n});\n/**\n * Returns Euler's number e raised to the power of a.\n *   If a is ##NaN => ##NaN\n *   If a is ##Inf => ##Inf\n *   If a is ##-Inf => +0.0\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\n */\ncljs.math.exp = (function cljs$math$exp(a){\nreturn Math.exp(a);\n});\n/**\n * Returns the natural logarithm (base e) of a.\n *   If a is ##NaN or negative => ##NaN\n *   If a is ##Inf => ##Inf\n *   If a is zero => ##-Inf\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log\n */\ncljs.math.log = (function cljs$math$log(a){\nreturn Math.log(a);\n});\n/**\n * Returns the logarithm (base 10) of a.\n *   If a is ##NaN or negative => ##NaN\n *   If a is ##Inf => ##Inf\n *   If a is zero => ##-Inf\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10\n */\ncljs.math.log10 = (function cljs$math$log10(a){\nreturn Math.log10(a);\n});\n/**\n * Returns the positive square root of a.\n *   If a is ##NaN or negative => ##NaN\n *   If a is ##Inf => ##Inf\n *   If a is zero => a\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\n */\ncljs.math.sqrt = (function cljs$math$sqrt(a){\nreturn Math.sqrt(a);\n});\n/**\n * Returns the cube root of a.\n *   If a is ##NaN => ##NaN\n *   If a is ##Inf or ##-Inf => a\n *   If a is zero => zero with sign matching a\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt\n */\ncljs.math.cbrt = (function cljs$math$cbrt(a){\nreturn Math.cbrt(a);\n});\n/**\n * Internal function to convert doubles to absolute values.\n *   This duplicates the C implementations in Java, in case there is are corner-case differences.\n */\ncljs.math.fabs = (function cljs$math$fabs(x){\nvar a = (new ArrayBuffer((8)));\nvar d = (new Float64Array(a));\nvar i = (new Uint32Array(a));\nvar hi = ((cljs.math.little_endian_QMARK_)?(1):(0));\n(d[(0)] = x);\n\n(i[hi] = ((i[hi]) & (2147483647)));\n\nreturn (d[(0)]);\n});\ncljs.math.Zero = (function (){var a = (new ArrayBuffer((16)));\nvar d = (new Float64Array(a));\nvar b = (new Uint8Array(a));\n(d[(0)] = 0.0);\n\n(d[(1)] = 0.0);\n\n(b[((cljs.math.little_endian_QMARK_)?(15):(8))] = (-128));\n\nreturn d;\n})();\ncljs.math.xpos = (0);\ncljs.math.ypos = (1);\ncljs.math.HI_x = (((2) * (0)) + cljs.math.HI);\ncljs.math.LO_x = (((2) * (0)) + cljs.math.LO);\ncljs.math.HI_y = (((2) * (1)) + cljs.math.HI);\ncljs.math.LO_y = (((2) * (1)) + cljs.math.LO);\n/**\n * internal function for ilogb(x)\n */\ncljs.math.ilogb = (function cljs$math$ilogb(hx,lx){\nif((hx < (1048576))){\nvar hx_zero_QMARK_ = (hx === (0));\nvar start_ix = ((hx_zero_QMARK_)?(-1043):(-1022));\nvar start_i = ((hx_zero_QMARK_)?lx:(hx << (11)));\nvar ix = start_ix;\nvar i = start_i;\nwhile(true){\nif((!((i > (0))))){\nreturn ix;\n} else {\nvar G__36281 = (ix - (1));\nvar G__36282 = (i << (1));\nix = G__36281;\ni = G__36282;\ncontinue;\n}\nbreak;\n}\n} else {\nreturn ((hx >> (20)) - (1023));\n}\n});\n/**\n * internal function to setup and align integer words\n */\ncljs.math.setup_hl = (function cljs$math$setup_hl(i,h,l){\nif((i >= (-1022))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((1048576) | ((1048575) & h)),l], null);\n} else {\nvar n = ((-1022) - i);\nif((n <= (31))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((h << n) | (l >>> ((32) - n))),(l << n)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(l << (n - (32))),(0)], null);\n}\n}\n});\n/**\n * Return x mod y in exact arithmetic. Method: shift and subtract.\n *   Reimplements __ieee754_fmod from the JDK.\n *   Ported from: https://github.com/openjdk/jdk/blob/master/src/java.base/share/native/libfdlibm/e_fmod.c\n *   bit-shift-left and bit-shift-right convert numbers to signed 32-bit\n *   Fortunately the values that are shifted are expected to be 32 bit signed.\n */\ncljs.math.IEEE_fmod = (function cljs$math$IEEE_fmod(x,y){\nif((((y === (0))) || (((isNaN(y)) || ((!(isFinite(x)))))))){\nreturn NaN;\n} else {\nvar a = (new ArrayBuffer((16)));\nvar d = (new Float64Array(a));\nvar i = (new Uint32Array(a));\nvar _ = (d[(0)] = x);\nvar ___$1 = (d[(1)] = y);\nvar hx = (i[cljs.math.HI_x]);\nvar lx = (i[cljs.math.LO_x]);\nvar hy = (i[cljs.math.HI_y]);\nvar ly = (i[cljs.math.LO_y]);\nvar sx = (hx & (2147483648));\nvar hx__$1 = (hx & (2147483647));\nvar hy__$1 = (hy & (2147483647));\nvar hx_LT__EQ_hy = (hx__$1 <= hy__$1);\nif(((hx_LT__EQ_hy) && ((((hx__$1 < hy__$1)) || ((lx < ly)))))){\nreturn x;\n} else {\nif(((hx_LT__EQ_hy) && ((lx === ly)))){\nreturn (cljs.math.Zero[(sx >>> (31))]);\n} else {\ntry{var ix = cljs.math.ilogb(hx__$1,lx);\nvar iy = cljs.math.ilogb(hy__$1,ly);\nvar vec__35890 = cljs.math.setup_hl(ix,hx__$1,lx);\nvar hx__$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35890,(0),null);\nvar lx__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35890,(1),null);\nvar vec__35893 = cljs.math.setup_hl(iy,hy__$1,ly);\nvar hy__$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35893,(0),null);\nvar ly__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35893,(1),null);\nvar vec__35896 = (function (){var n = (ix - iy);\nvar hx__$3 = hx__$2;\nvar lx__$2 = lx__$1;\nwhile(true){\nif((n === (0))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [hx__$3,lx__$2], null);\n} else {\nvar hz = ((cljs.math.u_LT_(lx__$2,ly__$1))?((hx__$3 - hy__$2) - (1)):(hx__$3 - hy__$2));\nvar lz = (lx__$2 - ly__$1);\nvar vec__35915 = (((hz < (0)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((hx__$3 + hx__$3) + (lx__$2 >>> (31))),(lx__$2 + lx__$2)], null):((((hz | lz) === (0)))?(function(){throw cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Signed zero\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"zero\",\"zero\",-858964576),true], null))})():new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((hz + hz) + (lz >>> (31))),(lz + lz)], null)));\nvar hx__$4 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35915,(0),null);\nvar lx__$3 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35915,(1),null);\nvar G__36304 = (n - (1));\nvar G__36305 = ((4294967295) & hx__$4);\nvar G__36306 = ((4294967295) & lx__$3);\nn = G__36304;\nhx__$3 = G__36305;\nlx__$2 = G__36306;\ncontinue;\n}\nbreak;\n}\n})();\nvar hx__$3 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35896,(0),null);\nvar lx__$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35896,(1),null);\nvar hz = ((cljs.math.u_LT_(lx__$2,ly__$1))?((hx__$3 - hy__$2) - (1)):(hx__$3 - hy__$2));\nvar lz = (lx__$2 - ly__$1);\nvar vec__35899 = (((hz >= (0)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [hz,lz], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [hx__$3,lx__$2], null));\nvar hx__$4 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35899,(0),null);\nvar lx__$3 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35899,(1),null);\nvar ___$2 = ((((hx__$4 | lx__$3) === (0)))?(function(){throw cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Signed zero\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"zero\",\"zero\",-858964576),true], null))})():null);\nvar vec__35902 = (function (){var hx__$5 = hx__$4;\nvar lx__$4 = lx__$3;\nvar iy__$1 = iy;\nwhile(true){\nif((!((hx__$5 < (1048576))))){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [hx__$5,lx__$4,iy__$1], null);\n} else {\nvar G__36310 = ((hx__$5 + hx__$5) + (lx__$4 >>> (31)));\nvar G__36311 = (lx__$4 + lx__$4);\nvar G__36312 = (iy__$1 - (1));\nhx__$5 = G__36310;\nlx__$4 = G__36311;\niy__$1 = G__36312;\ncontinue;\n}\nbreak;\n}\n})();\nvar hx__$5 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35902,(0),null);\nvar lx__$4 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35902,(1),null);\nvar iy__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35902,(2),null);\nif((iy__$1 >= (-1022))){\nvar hx__$6 = ((hx__$5 - (1048576)) | ((iy__$1 + (1023)) << (20)));\n(i[cljs.math.HI_x] = (hx__$6 | sx));\n\n(i[cljs.math.LO_x] = lx__$4);\n\nreturn (d[(0)]);\n} else {\nvar n = ((-1022) - iy__$1);\nvar vec__35929 = (((n <= (20)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(hx__$5 >> n),((lx__$4 >>> n) | (hx__$5 << ((32) - n)))], null):(((n <= (31)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sx,((hx__$5 << ((32) - n)) | (lx__$4 >>> n))], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sx,(hx__$5 >> (n - (32)))], null)\n));\nvar hx__$6 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35929,(0),null);\nvar lx__$5 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35929,(1),null);\n(i[cljs.math.HI_x] = (hx__$6 | sx));\n\n(i[cljs.math.LO_x] = lx__$5);\n\nreturn ((d[(0)]) * 1.0);\n}\n}catch (e35887){var ___$2 = e35887;\nreturn (cljs.math.Zero[(sx >>> (31))]);\n}\n}\n}\n}\n});\n/**\n * Returns the remainder per IEEE 754 such that\n *  remainder = dividend - divisor * n\n * where n is the integer closest to the exact value of dividend / divisor.\n * If two integers are equally close, then n is the even one.\n * If the remainder is zero, sign will match dividend.\n * If dividend or divisor is ##NaN, or dividend is ##Inf or ##-Inf, or divisor is zero => ##NaN\n * If dividend is finite and divisor is infinite => dividend\n * \n * Method: based on fmod return x-[x/p]chopped*p exactlp.\n * Ported from: https://github.com/openjdk/jdk/blob/master/src/java.base/share/native/libfdlibm/e_remainder.c\n * See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#IEEEremainder-double-double-\n */\ncljs.math.IEEE_remainder = (function cljs$math$IEEE_remainder(dividend,divisor){\nif((divisor === (0))){\nreturn NaN;\n} else {\nif(isNaN(divisor)){\nreturn NaN;\n} else {\nif(isNaN(dividend)){\nreturn NaN;\n} else {\nif((!(isFinite(dividend)))){\nreturn NaN;\n} else {\nif((!(isFinite(divisor)))){\nreturn dividend;\n} else {\nvar a = (new ArrayBuffer((16)));\nvar d = (new Float64Array(a));\nvar i = (new Uint32Array(a));\n(d[(0)] = dividend);\n\n(d[(1)] = divisor);\n\nvar hx = (i[cljs.math.HI]);\nvar lx = (i[cljs.math.LO]);\nvar hp = (i[(cljs.math.HI + (2))]);\nvar lp = (i[(cljs.math.LO + (2))]);\nvar sx = (hx & (2147483648));\nvar hp__$1 = (hp & (2147483647));\nvar hx__$1 = (hx & (2147483647));\nvar dividend__$1 = (((hp__$1 <= (2145386495)))?cljs.math.IEEE_fmod(dividend,(divisor + divisor)):dividend);\nif((((hx__$1 - hp__$1) | (lx - lp)) === (0))){\nreturn (0.0 * dividend__$1);\n} else {\nvar dividend__$2 = Math.abs(dividend__$1);\nvar divisor__$1 = Math.abs(divisor);\nvar dividend__$3 = (((hp__$1 < (2097152)))?((((dividend__$2 + dividend__$2) > divisor__$1))?(function (){var dividend__$3 = (dividend__$2 - divisor__$1);\nif(((dividend__$3 + dividend__$3) >= divisor__$1)){\nreturn (dividend__$3 - divisor__$1);\n} else {\nreturn dividend__$3;\n}\n})():dividend__$2):(function (){var divisor_half = (0.5 * divisor__$1);\nif((dividend__$2 > divisor_half)){\nvar dividend__$3 = (dividend__$2 - divisor__$1);\nif((dividend__$3 >= divisor_half)){\nreturn (dividend__$3 - divisor__$1);\n} else {\nreturn dividend__$3;\n}\n} else {\nreturn dividend__$2;\n}\n})());\n(d[(0)] = dividend__$3);\n\nvar hx__$2 = ((i[cljs.math.HI]) ^ sx);\n(i[cljs.math.HI] = hx__$2);\n\nreturn (d[(0)]);\n}\n\n}\n}\n}\n}\n}\n});\n/**\n * Returns the smallest double greater than or equal to a, and equal to a\n *   mathematical integer.\n *   If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\n *   Note that if a is `nil` then an exception will be thrown. This matches Clojure, rather than js/Math.ceil\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\n */\ncljs.math.ceil = (function cljs$math$ceil(a){\nif((!((a == null)))){\nreturn Math.ceil(a);\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Unexpected Null passed to ceil\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),\"ceil\"], null));\n}\n});\n/**\n * Returns the largest double less than or equal to a, and equal to a\n *   mathematical integer.\n *   If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\n *   If a is less than zero but greater than -1.0 => -0.0\n *   Note that if a is `nil` then an exception will be thrown. This matches Clojure, rather than js/Math.floor\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\n */\ncljs.math.floor = (function cljs$math$floor(a){\nif((!((a == null)))){\nreturn Math.floor(a);\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Unexpected Null passed to floor\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),\"floor\"], null));\n}\n});\n/**\n * Returns a double with the magnitude of the first argument and the sign of\n *   the second.\n *   See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#copySign-double-double-\n */\ncljs.math.copy_sign = (function cljs$math$copy_sign(magnitude,sign){\nvar a = (new ArrayBuffer((16)));\nvar d = (new Float64Array(a));\nvar b = (new Uint8Array(a));\nvar sbyte = ((cljs.math.little_endian_QMARK_)?(7):(0));\n(d[(0)] = magnitude);\n\n(d[(1)] = sign);\n\nvar sign_sbyte = ((128) & (b[((8) + sbyte)]));\nvar mag_sbyte = ((127) & (b[sbyte]));\n(b[sbyte] = (sign_sbyte | mag_sbyte));\n\nreturn (d[(0)]);\n});\n/**\n * Returns the double closest to a and equal to a mathematical integer.\n *   If two values are equally close, return the even one.\n *   If a is ##NaN or ##Inf or ##-Inf or zero => a\n *   See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#rint-double-\n */\ncljs.math.rint = (function cljs$math$rint(a){\nvar sign = cljs.math.copy_sign(1.0,a);\nvar a__$1 = Math.abs(a);\nvar a__$2 = (((a__$1 < (4503599627370496)))?(((4503599627370496) + a__$1) - (4503599627370496)):a__$1);\nreturn (sign * a__$2);\n});\n/**\n * Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta).\n *   Computes the phase theta by computing an arc tangent of y/x in the range of -pi to pi.\n *   For more details on special cases, see:\n *   https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\n */\ncljs.math.atan2 = (function cljs$math$atan2(y,x){\nreturn Math.atan2(y,x);\n});\n/**\n * Returns the value of a raised to the power of b.\n *   For more details on special cases, see:\n *   https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\n */\ncljs.math.pow = (function cljs$math$pow(a,b){\nreturn Math.pow(a,b);\n});\n/**\n * Returns the closest long to a. If equally close to two values, return the one\n *   closer to ##Inf.\n *   If a is ##NaN => 0\n *   If a is ##-Inf => js/Number.MIN_SAFE_INTEGER\n *   If a is ##Inf => js/Number.MAX_SAFE_INTEGER\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n */\ncljs.math.round = (function cljs$math$round(a){\nif(isNaN(a)){\nreturn (0);\n} else {\nif(isFinite(a)){\nreturn Math.round(a);\n} else {\nif((Infinity === a)){\nreturn Number.MAX_SAFE_INTEGER;\n} else {\nreturn Number.MIN_SAFE_INTEGER;\n\n}\n}\n}\n});\n/**\n * Returns a positive double between 0.0 and 1.0, chosen pseudorandomly with\n *   approximately random distribution. Not cryptographically secure. The seed is chosen internally\n *   and cannot be selected.\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n */\ncljs.math.random = (function cljs$math$random(){\nreturn Math.random();\n});\n/**\n * Returns the sum of x and y, throws an exception on overflow. \n */\ncljs.math.add_exact = (function cljs$math$add_exact(x,y){\nvar r = (x + y);\nif((((r > Number.MAX_SAFE_INTEGER)) || ((r < Number.MIN_SAFE_INTEGER)))){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Integer overflow\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),\"add-exact\"], null));\n} else {\nreturn r;\n}\n});\n/**\n * Returns the difference of x and y, throws ArithmeticException on overflow. \n */\ncljs.math.subtract_exact = (function cljs$math$subtract_exact(x,y){\nvar r = (x - y);\nif((((r > Number.MAX_SAFE_INTEGER)) || ((r < Number.MIN_SAFE_INTEGER)))){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Integer overflow\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),\"subtract-exact\"], null));\n} else {\nreturn r;\n}\n});\n/**\n * Returns the product of x and y, throws ArithmeticException on overflow. \n */\ncljs.math.multiply_exact = (function cljs$math$multiply_exact(x,y){\nvar r = (x * y);\nif((((r > Number.MAX_SAFE_INTEGER)) || ((r < Number.MIN_SAFE_INTEGER)))){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Integer overflow\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),\"multiply-exact\"], null));\n} else {\nreturn r;\n}\n});\n/**\n * Returns a incremented by 1, throws ArithmeticException on overflow.\n */\ncljs.math.increment_exact = (function cljs$math$increment_exact(a){\nif((((a >= Number.MAX_SAFE_INTEGER)) || ((a < Number.MIN_SAFE_INTEGER)))){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Integer overflow\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),\"increment-exact\"], null));\n} else {\nreturn (a + (1));\n}\n});\n/**\n * Returns a decremented by 1, throws ArithmeticException on overflow. \n */\ncljs.math.decrement_exact = (function cljs$math$decrement_exact(a){\nif((((a <= Number.MIN_SAFE_INTEGER)) || ((a > Number.MAX_SAFE_INTEGER)))){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Integer overflow\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),\"decrement-exact\"], null));\n} else {\nreturn (a - (1));\n}\n});\n/**\n * Returns the negation of a, throws ArithmeticException on overflow. \n */\ncljs.math.negate_exact = (function cljs$math$negate_exact(a){\nif((((a > Number.MAX_SAFE_INTEGER)) || ((a < Number.MIN_SAFE_INTEGER)))){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Integer overflow\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),\"negate-exact\"], null));\n} else {\nreturn (- a);\n}\n});\ncljs.math.xor = (function cljs$math$xor(a,b){\nreturn ((((a) && ((!(b))))) || ((((!(a))) && (b))));\n});\n/**\n * Integer division that rounds to negative infinity (as opposed to zero).\n *   See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorDiv-long-long-\n */\ncljs.math.floor_div = (function cljs$math$floor_div(x,y){\nif((!(((Number.isSafeInteger(x)) && (Number.isSafeInteger(y)))))){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"floor-div called with non-safe-integer arguments\",new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"x-int?\",\"x-int?\",792269440),Number.isSafeInteger(x),new cljs.core.Keyword(null,\"y-int?\",\"y-int?\",2045680479),Number.isSafeInteger(y)], null));\n} else {\nvar r = cljs.core.long$((x / y));\nif(((cljs.math.xor((x < (0)),(y < (0)))) && ((!(((r * y) === x)))))){\nreturn (r - (1));\n} else {\nreturn r;\n}\n}\n});\n/**\n * Integer modulus x - (floorDiv(x, y) * y). Sign matches y and is in the\n *   range -|y| < r < |y|.\n *   See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorMod-long-long-\n */\ncljs.math.floor_mod = (function cljs$math$floor_mod(x,y){\nif((!(((Number.isSafeInteger(x)) && (Number.isSafeInteger(y)))))){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"floor-mod called with non-safe-integer arguments\",new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"x-int?\",\"x-int?\",792269440),Number.isSafeInteger(x),new cljs.core.Keyword(null,\"y-int?\",\"y-int?\",2045680479),Number.isSafeInteger(y)], null));\n} else {\nvar r = cljs.core.long$((x / y));\nif(((cljs.math.xor((x < (0)),(y < (0)))) && ((!(((r * y) === x)))))){\nreturn ((x - (y * r)) - (- y));\n} else {\nreturn (x - (y * r));\n}\n}\n});\n/**\n * Returns the exponent of d.\n *   If d is ##NaN, ##Inf, ##-Inf => max_Float64_exponent + 1\n *   If d is zero or subnormal => min_Float64_exponent - 1\n *   See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#getExponent-double-\n */\ncljs.math.get_exponent = (function cljs$math$get_exponent(d){\nif(((isNaN(d)) || ((!(isFinite(d)))))){\nreturn (cljs.math.EXP_MAX + (1));\n} else {\nif((d === (0))){\nreturn ((-1022) - (1));\n} else {\nvar a = (new ArrayBuffer((8)));\nvar f = (new Float64Array(a));\nvar i = (new Uint32Array(a));\nvar hi = ((cljs.math.little_endian_QMARK_)?(1):(0));\n(f[(0)] = d);\n\nreturn ((((i[hi]) & (2146435072)) >> ((21) - (1))) - (1023));\n\n}\n}\n});\n/**\n * Converts a pair of 32 bit integers into an IEEE-754 64 bit floating point number.\n *   h is the high 32 bits, l is the low 32 bits.\n */\ncljs.math.hi_lo__GT_double = (function cljs$math$hi_lo__GT_double(h,l){\nvar a = (new ArrayBuffer((8)));\nvar f = (new Float64Array(a));\nvar i = (new Uint32Array(a));\n(i[cljs.math.LO] = l);\n\n(i[cljs.math.HI] = h);\n\nreturn (f[(0)]);\n});\n/**\n * returns a floating point power of two in the normal range\n */\ncljs.math.power_of_two = (function cljs$math$power_of_two(n){\nif((((n >= (-1022))) && ((n <= cljs.math.EXP_MAX)))){\n} else {\nthrow (new Error(\"Assert failed: (and (>= n EXP-MIN) (<= n EXP-MAX))\"));\n}\n\nreturn cljs.math.hi_lo__GT_double((((n + (1023)) << ((21) - (1))) & (2146435072)),(0));\n});\n/**\n * Returns the size of an ulp (unit in last place) for d.\n *   If d is ##NaN => ##NaN\n *   If d is ##Inf or ##-Inf => ##Inf\n *   If d is zero => Number/MIN_VALUE\n *   If d is +/- Number/MAX_VALUE => 2^971\n *   See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#ulp-double-\n */\ncljs.math.ulp = (function cljs$math$ulp(d){\nif(isNaN(d)){\nreturn d;\n} else {\nif(isFinite(d)){\nvar e = cljs.math.get_exponent(d);\nvar G__36152 = e;\nswitch (G__36152) {\ncase (1024):\nreturn Math.abs(d);\n\nbreak;\ncase (-1023):\nreturn Number.MIN_VALUE;\n\nbreak;\ndefault:\nvar e__$1 = (e - ((31) + (21)));\nif((e__$1 >= (-1022))){\nreturn cljs.math.power_of_two(e__$1);\n} else {\nvar shift = (e__$1 - (((-1022) - (31)) - (21)));\nif((shift < (32))){\nreturn cljs.math.hi_lo__GT_double((0),((1) << shift));\n} else {\nreturn cljs.math.hi_lo__GT_double(((1) << (shift - (32))),(0));\n}\n}\n\n}\n} else {\nreturn Infinity;\n\n}\n}\n});\n/**\n * Returns the signum function of d - zero for zero, 1.0 if >0, -1.0 if <0.\n *   If d is ##NaN => ##NaN\n *   If d is ##Inf or ##-Inf => sign of d\n *   See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#signum-double-\n */\ncljs.math.signum = (function cljs$math$signum(d){\nif((((d === (0))) || (isNaN(d)))){\nreturn d;\n} else {\nreturn cljs.math.copy_sign(1.0,d);\n}\n});\n/**\n * Returns the hyperbolic sine of x, (e^x - e^-x)/2.\n *   If x is ##NaN => ##NaN\n *   If x is ##Inf or ##-Inf or zero => x\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh\n */\ncljs.math.sinh = (function cljs$math$sinh(x){\nreturn Math.sinh(x);\n});\n/**\n * Returns the hyperbolic cosine of x, (e^x + e^-x)/2.\n *   If x is ##NaN => ##NaN\n *   If x is ##Inf or ##-Inf => ##Inf\n *   If x is zero => 1.0\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh\n */\ncljs.math.cosh = (function cljs$math$cosh(x){\nreturn Math.cosh(x);\n});\n/**\n * Returns the hyperbolic tangent of x, sinh(x)/cosh(x).\n *   If x is ##NaN => ##NaN\n *   If x is zero => zero, with same sign\n *   If x is ##Inf => +1.0\n *   If x is ##-Inf => -1.0\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh\n */\ncljs.math.tanh = (function cljs$math$tanh(x){\nreturn Math.tanh(x);\n});\n/**\n * Returns sqrt(x^2 + y^2) without intermediate underflow or overflow.\n *   If x or y is ##Inf or ##-Inf => ##Inf\n *   If x or y is ##NaN and neither is ##Inf or ##-Inf => ##NaN\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot\n */\ncljs.math.hypot = (function cljs$math$hypot(x,y){\nreturn Math.hypot(x,y);\n});\n/**\n * Returns e^x - 1. Near 0, expm1(x)+1 is more accurate to e^x than exp(x).\n *   If x is ##NaN => ##NaN\n *   If x is ##Inf => #Inf\n *   If x is ##-Inf => -1.0\n *   If x is zero => x\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1\n */\ncljs.math.expm1 = (function cljs$math$expm1(x){\nreturn Math.expm1(x);\n});\n/**\n * Returns ln(1+x). For small values of x, log1p(x) is more accurate than\n *   log(1.0+x).\n *   If x is ##NaN or ##-Inf or < -1 => ##NaN\n *   If x is -1 => ##-Inf\n *   If x is ##Inf => ##Inf\n *   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p\n */\ncljs.math.log1p = (function cljs$math$log1p(x){\nreturn Math.log1p(x);\n});\n/**\n * Takes the high and low words for 2 different 64 bit integers, and adds them.\n *   This handles overflow from the low-order words into the high order words.\n */\ncljs.math.add64 = (function cljs$math$add64(hx,lx,hy,ly){\nvar sx = ((lx & (2147483648)) >>> (31));\nvar sy = ((ly & (2147483648)) >>> (31));\nvar lr = (((2147483647) & lx) + ((2147483647) & ly));\nvar c31 = ((lr & (2147483648)) >>> (31));\nvar b31 = ((sx + sy) + c31);\nvar lr__$1 = ((lr & (2147483647)) | (b31 << (31)));\nvar c32 = (b31 >> (1));\nvar hr = ((4294967295) & ((hx + hy) + c32));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [hr,lr__$1], null);\n});\n/**\n * Returns the adjacent floating point number to start in the direction of\n *   the second argument. If the arguments are equal, the second is returned.\n *   If either arg is #NaN => #NaN\n *   If both arguments are signed zeros => direction\n *   If start is +-Number/MIN_VALUE and direction would cause a smaller magnitude\n *  => zero with sign matching start\n *   If start is ##Inf or ##-Inf and direction would cause a smaller magnitude\n *  => Number/MAX_VALUE with same sign as start\n *   If start is equal to +=Number/MAX_VALUE and direction would cause a larger magnitude\n *  => ##Inf or ##-Inf with sign matching start\n *   See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextAfter-double-double-\n */\ncljs.math.next_after = (function cljs$math$next_after(start,direction){\nvar a = (new ArrayBuffer((8)));\nvar f = (new Float64Array(a));\nvar i = (new Uint32Array(a));\nif((start > direction)){\nif((!((start === (0))))){\nvar _ = (f[(0)] = start);\nvar ht = (i[cljs.math.HI]);\nvar lt = (i[cljs.math.LO]);\nvar vec__36184 = ((((ht & (2147483648)) === (0)))?cljs.math.add64(ht,lt,(4294967295),(4294967295)):cljs.math.add64(ht,lt,(0),(1)));\nvar hr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36184,(0),null);\nvar lr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36184,(1),null);\n(i[cljs.math.HI] = hr);\n\n(i[cljs.math.LO] = lr);\n\nreturn (f[(0)]);\n} else {\nreturn (- Number.MIN_VALUE);\n}\n} else {\nif((start < direction)){\nvar _ = (f[(0)] = (start + 0.0));\nvar ht = (i[cljs.math.HI]);\nvar lt = (i[cljs.math.LO]);\nvar vec__36192 = ((((ht & (2147483648)) === (0)))?cljs.math.add64(ht,lt,(0),(1)):cljs.math.add64(ht,lt,(4294967295),(4294967295)));\nvar hr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36192,(0),null);\nvar lr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36192,(1),null);\n(i[cljs.math.HI] = hr);\n\n(i[cljs.math.LO] = lr);\n\nreturn (f[(0)]);\n} else {\nif((start === direction)){\nreturn direction;\n} else {\nreturn (start + direction);\n\n}\n}\n}\n});\n/**\n * Returns the adjacent double of d in the direction of ##Inf.\n *   If d is ##NaN => ##NaN\n *   If d is ##Inf => ##Inf\n *   If d is zero => Number/MIN_VALUE\n *   See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextUp-double-\n */\ncljs.math.next_up = (function cljs$math$next_up(d){\nif((d < Number.POSITIVE_INFINITY)){\nvar a = (new ArrayBuffer((8)));\nvar f = (new Float64Array(a));\nvar i = (new Uint32Array(a));\nvar _ = (f[(0)] = (d + 0.0));\nvar ht = (i[cljs.math.HI]);\nvar lt = (i[cljs.math.LO]);\nvar vec__36197 = ((((ht & (2147483648)) === (0)))?cljs.math.add64(ht,lt,(0),(1)):cljs.math.add64(ht,lt,(4294967295),(4294967295)));\nvar hr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36197,(0),null);\nvar lr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36197,(1),null);\n(i[cljs.math.HI] = hr);\n\n(i[cljs.math.LO] = lr);\n\nreturn (f[(0)]);\n} else {\nreturn d;\n}\n});\n/**\n * Returns the adjacent double of d in the direction of ##-Inf.\n *   If d is ##NaN => ##NaN\n *   If d is ##Inf => Number/MAX_VALUE\n *   If d is zero => -Number/MIN_VALUE\n *   See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-\n */\ncljs.math.next_down = (function cljs$math$next_down(d){\nif(((isNaN(d)) || ((-Infinity === d)))){\nreturn d;\n} else {\nif((d === (0))){\nreturn (- Number.MIN_VALUE);\n} else {\nvar a = (new ArrayBuffer((8)));\nvar f = (new Float64Array(a));\nvar i = (new Uint32Array(a));\nvar _ = (f[(0)] = d);\nvar ht = (i[cljs.math.HI]);\nvar lt = (i[cljs.math.LO]);\nvar vec__36230 = (((d > (0)))?cljs.math.add64(ht,lt,(4294967295),(4294967295)):cljs.math.add64(ht,lt,(0),(1)));\nvar hr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36230,(0),null);\nvar lr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36230,(1),null);\n(i[cljs.math.HI] = hr);\n\n(i[cljs.math.LO] = lr);\n\nreturn (f[(0)]);\n\n}\n}\n});\ncljs.math.MAX_SCALE = ((((cljs.math.EXP_MAX + (- (-1022))) + (21)) + (32)) + (1));\ncljs.math.two_to_the_double_scale_up = cljs.math.power_of_two((512));\ncljs.math.two_to_the_double_scale_down = cljs.math.power_of_two((-512));\n/**\n * Returns d * 2^scaleFactor, scaling by a factor of 2. If the exponent\n *   is between min_Float64_exponent and max_Float64_exponent.\n *   scaleFactor is an integer\n *   If d is ##NaN => ##NaN\n *   If d is ##Inf or ##-Inf => ##Inf or ##-Inf respectively\n *   If d is zero => zero of same sign as d\n *   See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-\n */\ncljs.math.scalb = (function cljs$math$scalb(d,scaleFactor){\nvar vec__36241 = (((scaleFactor < (0)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [Math.max(scaleFactor,(- cljs.math.MAX_SCALE)),(-512),cljs.math.two_to_the_double_scale_down], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [Math.min(scaleFactor,cljs.math.MAX_SCALE),(512),cljs.math.two_to_the_double_scale_up], null));\nvar scale_factor = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36241,(0),null);\nvar scale_increment = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36241,(1),null);\nvar exp_delta = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36241,(2),null);\nvar t = ((scale_factor >> (8)) >>> (23));\nvar exp_adjust = (((scale_factor + t) & (511)) - t);\nvar d__$1 = (d * cljs.math.power_of_two(exp_adjust));\nvar scale_factor__$1 = (scale_factor - exp_adjust);\nwhile(true){\nif((scale_factor__$1 === (0))){\nreturn d__$1;\n} else {\nvar G__36409 = (d__$1 * exp_delta);\nvar G__36410 = (scale_factor__$1 - scale_increment);\nd__$1 = G__36409;\nscale_factor__$1 = G__36410;\ncontinue;\n}\nbreak;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","cljs/math.cljs","~:line",3,"~:column",5,"~:end-line",3,"~:end-column",14,"~:doc","ClojureScript wrapper functions for math operations","~:author","Paula Gearon"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.math","~$cljs.math","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","^E","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","^G","^G","~$goog","^Q"],"~:seen",["^J",[]],"~:uses",null,"~:require-macros",["^ ","^G","^G"],"~:form",["~#list",["~$ns","^E"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^Q","^G"]],"^N","^E","~:resource-id",["~:shadow.build.classpath/resource","cljs/math.cljs"],"~:compiled-at",1693916273692,"^L",["^ ","^G","^G","^Q","^Q"],"~:resource-name","cljs/math.cljs","~:warnings",[],"~:source","(ns ^{:doc \"ClojureScript wrapper functions for math operations\"\n      :author \"Paula Gearon\" }\n    cljs.math)\n\n(def\n  ^{:doc \"Constant for Euler's number e, the base for natural logarithms.\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E\"\n    :added \"1.11.10\"\n    :tag number\n    :const true} E Math/E)\n\n(def\n  ^{:doc \"Constant for pi, the ratio of the circumference of a circle to its diameter.\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI\"\n    :added \"1.11.10\"\n    :tag number\n    :const true} PI Math/PI)\n\n(def\n  ^{:doc \"Constant used to convert an angular value in degrees to the equivalent in radians\"\n    :private true\n    :added \"1.11.10\"\n    :const true} DEGREES-TO-RADIANS 0.017453292519943295)\n\n(def\n  ^{:doc \"Constant used to convert an angular value in radians to the equivalent in degrees\"\n    :private true\n    :added \"1.11.10\"\n    :const true} RADIANS-TO-DEGREES 57.29577951308232)\n\n(def ^{:private true :const true} TWO-TO-THE-52 0x10000000000000)\n\n(def ^{:private true :const true} SIGNIFICAND-WIDTH32 21)\n\n(def ^{:private true :const true} EXP-BIAS 1023)\n\n(def ^{:private true :const true} EXP-BITMASK32 0x7FF00000)\n\n(def ^{:private true :const true} EXP-MAX EXP-BIAS)\n\n(def ^{:private true :const true} EXP-MIN -1022)\n\n;; js/Number.MIN_VALUE has a bit representation of 0x0000000000000001\n\n;; js/Number.MAX_VALUE has a bit representation of 0x7FEFFFFFFFFFFFFF\n\n(defn- get-little-endian\n  \"Tests the platform for endianness. Returns true when little-endian, false otherwise.\"\n  []\n  (let [a (js/ArrayBuffer. 4)\n        i (js/Uint32Array. a)\n        b (js/Uint8Array. a)]\n    (aset i 0 0x33221100)\n    (zero? (aget b 0))))\n\n(defonce ^:private little-endian? (get-little-endian))\n\n;; the HI and LO labels are terse to reflect the C macros they represent\n(def ^{:private true :doc \"offset of hi integers in 64-bit values\"} HI (if little-endian? 1 0))\n\n(def ^{:private true :doc \"offset of hi integers in 64-bit values\"} LO (- 1 HI))\n\n(def ^{:private true :const true} INT32-MASK 0xFFFFFFFF)\n\n(def ^{:private true :const true} INT32-NON-SIGN-BIT 0x80000000)\n\n(def ^{:private true :const true} INT32-NON-SIGN-BITS 0x7FFFFFFF)\n\n(defn u<\n  {:doc \"unsigned less-than comparator for 32-bit values\"\n   :private true}\n  [a b]\n  ;; compare the top nybble\n  (let [ab (unsigned-bit-shift-right a 28)\n        bb (unsigned-bit-shift-right b 28)]\n    (or (< ab bb)  ;; if the top nybble of a is less then the whole value is less\n        (and (== ab bb)  ;; if the top nybble is equal then compare the remaining bits of both\n             (< (bit-and a 0x0fffffff) (bit-and b 0x0fffffff))))))\n\n(defn ^number sin\n  {:doc \"Returns the sine of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\"\n   :added \"1.11.10\"}\n  [a] (Math/sin a))\n\n(defn ^number cos\n  {:doc \"Returns the cosine of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\"\n   :added \"1.11.10\"}\n  [a] (Math/cos a))\n\n(defn ^number tan\n  {:doc \"Returns the tangent of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\"\n   :added \"1.11.10\"}\n  [a] (Math/tan a))\n\n(defn ^number asin\n  {:doc \"Returns the arc sine of an angle, in the range -pi/2 to pi/2.\n  If a is ##NaN or |a|>1 => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\"\n   :added \"1.11.10\"}\n  [a] (Math/asin a))\n\n(defn ^number acos\n  {:doc \"Returns the arc cosine of a, in the range 0.0 to pi.\n  If a is ##NaN or |a|>1 => ##NaN\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\"\n   :added \"1.11.10\"}\n  [a] (Math/acos a))\n\n(defn ^number atan\n  {:doc \"Returns the arc tangent of a, in the range of -pi/2 to pi/2.\n  If a is ##NaN => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\"\n   :added \"1.11.10\"}\n  [a] (Math/atan a))\n\n(defn ^number to-radians\n  {:doc \"Converts an angle in degrees to an approximate equivalent angle in radians.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toRadians-double-\"\n   :added \"1.11.10\"}\n  [deg]\n  (* deg DEGREES-TO-RADIANS))\n\n(defn ^number to-degrees\n  {:doc \"Converts an angle in radians to an approximate equivalent angle in degrees.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toDegrees-double-\"\n   :added \"1.11.10\"}\n  [r]\n  (* r RADIANS-TO-DEGREES))\n\n(defn ^number exp\n  {:doc \"Returns Euler's number e raised to the power of a.\n  If a is ##NaN => ##NaN\n  If a is ##Inf => ##Inf\n  If a is ##-Inf => +0.0\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\"\n   :added \"1.11.10\"}\n  [a] (Math/exp a))\n\n(defn ^number log\n  {:doc \"Returns the natural logarithm (base e) of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => ##-Inf\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log\"\n   :added \"1.11.10\"}\n  [a] (Math/log a))\n\n(defn ^number log10\n  {:doc \"Returns the logarithm (base 10) of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => ##-Inf\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10\"\n   :added \"1.11.10\"}\n  [a] (Math/log10 a))\n\n(defn ^number sqrt\n  {:doc \"Returns the positive square root of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\"\n   :added \"1.11.10\"}\n  [a] (Math/sqrt a))\n\n(defn ^number cbrt\n  {:doc \"Returns the cube root of a.\n  If a is ##NaN => ##NaN\n  If a is ##Inf or ##-Inf => a\n  If a is zero => zero with sign matching a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt\"\n   :added \"1.11.10\"}\n  [a] (Math/cbrt a))\n\n(defn ^number fabs\n  {:doc \"Internal function to convert doubles to absolute values.\n  This duplicates the C implementations in Java, in case there is are corner-case differences.\"\n   :private true\n   :added \"1.11.10\"}\n  [x]\n  ;; create a buffer large enough for a double\n  (let [a (js/ArrayBuffer. 8)\n        ;; represent the buffer as a double array\n        d (js/Float64Array. a)\n        ;; represent the buffer as 32 bit ints\n        i (js/Uint32Array. a)\n        hi (if little-endian? 1 0)]\n    ;; insert the double value into the buffer\n    (aset d 0 x)\n    ;; update the sign bit\n    (aset i hi (bit-and (aget i hi) INT32-NON-SIGN-BITS))\n    ;; return the new double\n    (aget d 0)))\n\n(def ^{:private true} Zero\n  ;; a buffer that can hold a pair of 64 bit doubles\n  (let [a (js/ArrayBuffer. 16)\n        ;; represent the buffer as a 2 double array\n        d (js/Float64Array. a)\n        ;; represent the buffer as an array of bytes\n        b (js/Uint8Array. a)]\n    ;; initialize both doubles to 0.0\n    (aset d 0 0.0)\n    (aset d 1 0.0)\n    ;; update the sign bit on the second double\n    (aset b (if little-endian? 15 8) -0x80)\n    ;; save the array of 2 doubles [0.0, -0.0]\n    d))\n\n(def ^{:private true :const true} xpos 0)\n(def ^{:private true :const true} ypos 1)\n(def ^{:private true} HI-x (+ (* 2 xpos) HI))\n(def ^{:private true} LO-x (+ (* 2 xpos) LO))\n(def ^{:private true} HI-y (+ (* 2 ypos) HI))\n(def ^{:private true} LO-y (+ (* 2 ypos) LO))\n\n(defn ^number ilogb\n  {:doc \"internal function for ilogb(x)\"\n   :private true}\n  [hx lx]\n  (if (< hx 0x00100000) ;; subnormal\n    (let [hx-zero? (zero? hx)\n          start-ix (if hx-zero? -1043 -1022)\n          start-i (if hx-zero? lx (bit-shift-left hx 11))]\n      (loop [ix start-ix i start-i]\n        (if-not (> i 0)\n          ix\n          (recur (dec ix) (bit-shift-left i 1)))))\n    (- (bit-shift-right hx 20) 1023)))\n\n(defn ^number setup-hl\n  {:doc \"internal function to setup and align integer words\"\n   :private true}\n  [i h l]\n  (if (>= i -1022)\n    [(bit-or 0x00100000 (bit-and 0x000fffff h)) l]\n    (let [n (- -1022 i)]\n      (if (<= n 31)\n        [(bit-or (bit-shift-left h n) (unsigned-bit-shift-right l (- 32 n))) (bit-shift-left l n)]\n        [(bit-shift-left l (- n 32)) 0]))))\n\n(defn ^number IEEE-fmod\n  {:doc \"Return x mod y in exact arithmetic. Method: shift and subtract.\n  Reimplements __ieee754_fmod from the JDK.\n  Ported from: https://github.com/openjdk/jdk/blob/master/src/java.base/share/native/libfdlibm/e_fmod.c\n  bit-shift-left and bit-shift-right convert numbers to signed 32-bit\n  Fortunately the values that are shifted are expected to be 32 bit signed.\"\n  :private true}\n  [x y]\n  ;; return exception values\n  (if (or (zero? y) ^boolean (js/isNaN y) (not ^boolean (js/isFinite x)))\n    ##NaN\n\n    ;; create a buffer large enough for 2 doubles\n    (let [a (js/ArrayBuffer. 16)\n          ;; represent the buffer as a double array\n          d (js/Float64Array. a)\n          ;; represent the buffer as 32 bit ints\n          i (js/Uint32Array. a)\n          ;; set the doubles to x and y\n          _ (aset d xpos x)\n          _ (aset d ypos y)\n          hx (aget i HI-x)\n          lx (aget i LO-x)\n          hy (aget i HI-y)\n          ly (aget i LO-y)\n          sx (bit-and hx INT32-NON-SIGN-BIT) ;; capture the sign of x\n          hx (bit-and hx INT32-NON-SIGN-BITS) ;; set x to |x|\n          hy (bit-and hy INT32-NON-SIGN-BITS) ;; set y to |y|\n          hx<=hy (<= hx hy)]\n      (cond\n        ;; additional exception values\n        (and hx<=hy (or (< hx hy) (< lx ly))) x ;; |x|<|y| return x\n        (and hx<=hy (== lx ly)) (aget Zero (unsigned-bit-shift-right sx 31)) ;; |x|=|y| return x*0\n\n        :default\n        ;; determine ix = ilogb(x), iy = ilogb(y)\n        (try\n          (let [ix (ilogb hx lx)\n                iy (ilogb hy ly)\n                ;; set up {hx,lx}, {hy,ly} and align y to x\n                [hx lx] (setup-hl ix hx lx)\n                [hy ly] (setup-hl iy hy ly)\n                ;; fix point fmod\n                [hx lx] (loop [n (- ix iy) hx hx lx lx]\n                          (if (zero? n)\n                            [hx lx]\n                            (let [hz (if (u< lx ly) (- hx hy 1) (- hx hy))\n                                  lz (- lx ly)\n                                  [hx lx] (if (< hz 0)\n                                            [(+ hx hx (unsigned-bit-shift-right lx 31)) (+ lx lx)]\n                                            (if (zero? (bit-or hz lz))\n                                              (throw (ex-info \"Signed zero\" {:zero true}))\n                                              [(+ hz hz (unsigned-bit-shift-right lz 31)) (+ lz lz)]))]\n                              (recur (dec n) (bit-and INT32-MASK hx) (bit-and INT32-MASK lx)))))\n                hz (if (u< lx ly) (- hx hy 1) (- hx hy))\n                lz (- lx ly)\n                [hx lx] (if (>= hz 0) [hz lz] [hx lx])\n\n                _ (when (zero? (bit-or hx lx))\n                    (throw (ex-info \"Signed zero\" {:zero true})))\n                ;; convert back to floating value and restore the sign\n                [hx lx iy] (loop [hx hx lx lx iy iy]\n                             (if-not (< hx 0x00100000)\n                               [hx lx iy]\n                               (recur (+ hx hx (unsigned-bit-shift-right lx 31)) (+ lx lx) (dec iy))))]\n            ;; use these high and low ints to update the double and return it\n            (if (>= iy -1022)\n              (let [hx (bit-or (- hx 0x00100000) (bit-shift-left (+ iy 1023) 20))]\n                (aset i HI-x (bit-or hx sx))\n                (aset i LO-x lx)\n                (aget d xpos))\n              (let [n (- -1022 iy)\n                    [hx lx] (cond\n                              (<= n 20) [(bit-shift-right hx n)\n                                         (bit-or (unsigned-bit-shift-right lx n) (bit-shift-left hx (- 32 n)))]\n                              (<= n 31) [sx\n                                         (bit-or (bit-shift-left hx (- 32 n)) (unsigned-bit-shift-right lx n))]\n                              :default [sx (bit-shift-right hx (- n 32))])]\n                (aset i HI-x (bit-or hx sx))\n                (aset i LO-x lx)\n                (* (aget d xpos) 1.0))))\n          (catch :default _ (aget Zero (unsigned-bit-shift-right sx 31))))))))\n\n(defn ^number IEEE-remainder\n  {:doc \"Returns the remainder per IEEE 754 such that\n    remainder = dividend - divisor * n\n   where n is the integer closest to the exact value of dividend / divisor.\n   If two integers are equally close, then n is the even one.\n   If the remainder is zero, sign will match dividend.\n   If dividend or divisor is ##NaN, or dividend is ##Inf or ##-Inf, or divisor is zero => ##NaN\n   If dividend is finite and divisor is infinite => dividend\n\n   Method: based on fmod return x-[x/p]chopped*p exactlp.\n   Ported from: https://github.com/openjdk/jdk/blob/master/src/java.base/share/native/libfdlibm/e_remainder.c\n   See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#IEEEremainder-double-double-\"\n    :added \"1.11.10\"}\n  [dividend divisor]\n  ;; check for exception values\n  (cond\n    (zero? divisor) ##NaN\n    ^boolean (js/isNaN divisor) ##NaN\n    ;; check if dividend is ##Inf ##-Inf or ##NaN\n    ^boolean (js/isNaN dividend) ##NaN\n    (not ^boolean (js/isFinite dividend)) ##NaN\n    ;; dividend is finish, check if divisor is infinite\n    (not ^boolean (js/isFinite divisor)) dividend\n\n    :default\n    ;; create a buffer large enough for 2 doubles\n    (let [a (js/ArrayBuffer. 16)\n          ;; represent the buffer as a double array\n          d (js/Float64Array. a)\n          ;; represent the buffer as 32 bit ints\n          i (js/Uint32Array. a)]\n      (aset d 0 dividend)\n      (aset d 1 divisor)\n      ;; x gets the dividend high and low ints\n      (let [hx (aget i HI)\n            lx (aget i LO)\n            ;; p gets the divisor high and low ints\n            hp (aget i (+ HI 2))\n            lp (aget i (+ LO 2))\n            ;; sx is the sign bit\n            sx (bit-and hx INT32-NON-SIGN-BIT)\n            ;; strip the sign bit from hp and hx\n            hp (bit-and hp INT32-NON-SIGN-BITS)\n            hx (bit-and hx INT32-NON-SIGN-BITS)\n\n            ;;make x < 2p\n            dividend (if (<= hp 0x7FDFFFFF) (IEEE-fmod dividend (+ divisor divisor)) dividend)]\n        (if (zero? (bit-or (- hx hp) (- lx lp)))\n          (* 0.0 dividend)\n          ;; convert dividend and divisor to absolute values. \n          (let [dividend (Math/abs dividend)\n                divisor (Math/abs divisor)\n                ;; reduce dividend within range of the divisor\n                dividend (if (< hp 0x00200000)\n                           ;; smaller divisor compare 2*dividend to the divisor\n                           (if (> (+ dividend dividend) divisor)\n                             (let [dividend (- dividend divisor)] ;; reduce the dividend\n                               (if (>= (+ dividend dividend) divisor) ;; 2*dividend still larger\n                                 (- dividend divisor) ;; reduce again\n                                 dividend))\n                             dividend)\n                           ;; compare dividend to half the divisor\n                           (let [divisor-half (* 0.5 divisor)]\n                             (if (> dividend divisor-half)\n                               (let [dividend (- dividend divisor)] ;; reduce the dividend\n                                 (if (>= dividend divisor-half) ;; still larger than half divisor\n                                   (- dividend divisor) ;; reduce again\n                                   dividend))\n                               dividend)))]\n            ;; update the buffer with the new dividend value\n            (aset d 0 dividend)\n            ;; calculate a new hi int for the dividend using the saved sign bit\n            (let [hx (bit-xor (aget i HI) sx)]\n              ;; set the dividend with this new sign bit\n              (aset i HI hx)\n              ;; retrieve the updated dividend\n              (aget d 0))))))))\n\n(defn ^number ceil\n  {:doc \"Returns the smallest double greater than or equal to a, and equal to a\n  mathematical integer.\n  If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\n  Note that if a is `nil` then an exception will be thrown. This matches Clojure, rather than js/Math.ceil\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\"\n   :added \"1.11.10\"}\n  [a]\n  (if (some? a)\n    (Math/ceil a)\n    (throw (ex-info \"Unexpected Null passed to ceil\" {:fn \"ceil\"}))))\n\n(defn ^number floor\n  {:doc \"Returns the largest double less than or equal to a, and equal to a\n  mathematical integer.\n  If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\n  If a is less than zero but greater than -1.0 => -0.0\n  Note that if a is `nil` then an exception will be thrown. This matches Clojure, rather than js/Math.floor\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\"\n   :added \"1.11.10\"}\n  [a]\n  (if (some? a)\n    (Math/floor a)\n    (throw (ex-info \"Unexpected Null passed to floor\" {:fn \"floor\"}))))\n\n(defn ^number copy-sign\n  {:doc \"Returns a double with the magnitude of the first argument and the sign of\n  the second.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#copySign-double-double-\"\n   :added \"1.11.10\"}\n  [magnitude sign]\n  ;; create a buffer large enough for 2 doubles\n  (let [a (js/ArrayBuffer. 16)\n        ;; represent the buffer as a double array\n        d (js/Float64Array. a)\n        ;; represent the buffer as bytes\n        b (js/Uint8Array. a)\n        ;; find the offset of the byte that holds the sign bit\n        sbyte (if little-endian? 7 0)]\n    ;; the first double holds the magnitude, the second holds the sign value\n    (aset d 0 magnitude)\n    (aset d 1 sign)\n    ;; read the sign bit from the sign value\n    (let [sign-sbyte (bit-and 0x80 (aget b (+ 8 sbyte)))\n          ;; read all the bits that aren't the sign bit in the same byte of the magnitude\n          mag-sbyte (bit-and 0x7F (aget b sbyte))]\n      ;; combine the sign bit from the sign value and the non-sign-bits from the magnitude value\n      ;; write it back into the byte in the magnitude\n      (aset b sbyte (bit-or sign-sbyte mag-sbyte))\n      ;; retrieve the full magnitude value with the updated byte\n      (aget d 0))))\n\n(defn ^number rint\n  {:doc \"Returns the double closest to a and equal to a mathematical integer.\n  If two values are equally close, return the even one.\n  If a is ##NaN or ##Inf or ##-Inf or zero => a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#rint-double-\"\n   :added \"1.11.10\"}\n  [a]\n  (let [sign (copy-sign 1.0, a)\n        a (Math/abs a)\n        a (if (< a TWO-TO-THE-52)\n            (- (+ TWO-TO-THE-52 a) TWO-TO-THE-52) a)]\n    (* sign a)))\n\n(defn ^number atan2\n  {:doc \"Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta).\n  Computes the phase theta by computing an arc tangent of y/x in the range of -pi to pi.\n  For more details on special cases, see:\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\"\n   :added \"1.11.10\"}\n  [y x] (Math/atan2 y x))\n\n(defn ^number pow\n  {:doc \"Returns the value of a raised to the power of b.\n  For more details on special cases, see:\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\"\n   :added \"1.11.10\"}\n  [a b] (Math/pow a b))\n\n(defn ^number round\n  {:doc \"Returns the closest long to a. If equally close to two values, return the one\n  closer to ##Inf.\n  If a is ##NaN => 0\n  If a is ##-Inf => js/Number.MIN_SAFE_INTEGER\n  If a is ##Inf => js/Number.MAX_SAFE_INTEGER\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\"\n   :added \"1.11.10\"}\n  [a]\n  (cond\n    ^boolean (js/isNaN a) 0\n    ^boolean (js/isFinite a) (Math/round a)\n    (== ##Inf a) js/Number.MAX_SAFE_INTEGER\n    :default js/Number.MIN_SAFE_INTEGER))\n\n(defn ^number random\n  {:doc \"Returns a positive double between 0.0 and 1.0, chosen pseudorandomly with\n  approximately random distribution. Not cryptographically secure. The seed is chosen internally\n  and cannot be selected.\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\"\n   :added \"1.11.10\"}\n  [] (Math/random))\n\n(defn ^number add-exact\n  {:doc \"Returns the sum of x and y, throws an exception on overflow. \"\n   :added \"1.11.10\"}\n  [x y]\n  (let [r (clojure.core/+ x y)]\n    (if (or (> r js/Number.MAX_SAFE_INTEGER) (< r js/Number.MIN_SAFE_INTEGER))\n      (throw (ex-info \"Integer overflow\" {:fn \"add-exact\"}))\n      r)))\n\n(defn ^number subtract-exact\n  {:doc \"Returns the difference of x and y, throws ArithmeticException on overflow. \"\n   :added \"1.11.10\"}\n  [x y]\n  (let [r (- x y)]\n    (if (or (> r js/Number.MAX_SAFE_INTEGER) (< r js/Number.MIN_SAFE_INTEGER))\n      (throw (ex-info \"Integer overflow\" {:fn \"subtract-exact\"}))\n      r)))\n\n(defn ^number multiply-exact\n  {:doc \"Returns the product of x and y, throws ArithmeticException on overflow. \"\n   :added \"1.11.10\"}\n  [x y]\n  (let [r (* x y)]\n    (if (or (> r js/Number.MAX_SAFE_INTEGER) (< r js/Number.MIN_SAFE_INTEGER))\n      (throw (ex-info \"Integer overflow\" {:fn \"multiply-exact\"}))\n      r)))\n\n(defn ^number increment-exact\n  {:doc \"Returns a incremented by 1, throws ArithmeticException on overflow.\"\n   :added \"1.11.10\"}\n  [a]\n  (if (or (>= a js/Number.MAX_SAFE_INTEGER) (< a js/Number.MIN_SAFE_INTEGER))\n    (throw (ex-info \"Integer overflow\" {:fn \"increment-exact\"}))\n    (inc a)))\n\n(defn ^number decrement-exact\n  {:doc \"Returns a decremented by 1, throws ArithmeticException on overflow. \"\n   :added \"1.11.10\"}\n  [a]\n  (if (or (<= a js/Number.MIN_SAFE_INTEGER) (> a js/Number.MAX_SAFE_INTEGER))\n    (throw (ex-info \"Integer overflow\" {:fn \"decrement-exact\"}))\n    (dec a)))\n\n(defn ^number negate-exact\n  {:doc \"Returns the negation of a, throws ArithmeticException on overflow. \"\n   :added \"1.11.10\"}\n  [a]\n  (if (or (> a js/Number.MAX_SAFE_INTEGER) (< a js/Number.MIN_SAFE_INTEGER))\n    (throw (ex-info \"Integer overflow\" {:fn \"negate-exact\"}))\n    (- a)))\n\n(defn- xor\n  [^boolean a ^boolean b]\n  (or (and a (not b)) (and (not a) b)))\n\n(defn ^number floor-div\n  {:doc \"Integer division that rounds to negative infinity (as opposed to zero).\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorDiv-long-long-\"\n   :added \"1.11.10\"}\n  [x y]\n  (if-not (and ^boolean (js/Number.isSafeInteger x) ^boolean (js/Number.isSafeInteger y))\n    (throw (ex-info \"floor-div called with non-safe-integer arguments\"\n                    {:x-int? (js/Number.isSafeInteger x) :y-int? (js/Number.isSafeInteger y)}))\n    (let [r (long (/ x y))]\n      (if (and (xor (< x 0) (< y 0)) (not (== (* r y) x)))\n        (dec r)\n        r))))\n\n(defn ^number floor-mod\n  {:doc \"Integer modulus x - (floorDiv(x, y) * y). Sign matches y and is in the\n  range -|y| < r < |y|.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorMod-long-long-\"\n   :added \"1.11.10\"}\n  [x y]\n  (if-not (and ^boolean (js/Number.isSafeInteger x) ^boolean (js/Number.isSafeInteger y))\n    (throw (ex-info \"floor-mod called with non-safe-integer arguments\"\n                    {:x-int? (js/Number.isSafeInteger x) :y-int? (js/Number.isSafeInteger y)}))\n    ;; this avoids using floor-div to keep within the safe integer range\n    (let [r (long (/ x y))]\n      (if (and (xor (< x 0) (< y 0)) (not (== (* r y) x)))\n        (- x (* y r) (- y))\n        (- x (* y r))))))\n\n(defn ^number get-exponent\n  {:doc \"Returns the exponent of d.\n  If d is ##NaN, ##Inf, ##-Inf => max_Float64_exponent + 1\n  If d is zero or subnormal => min_Float64_exponent - 1\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#getExponent-double-\"\n   :added \"1.11.10\"}\n  [d]\n  (cond\n    (or ^boolean (js/isNaN d) (not ^boolean (js/isFinite d))) (inc EXP-MAX)\n    (zero? d) (dec EXP-MIN)\n    :default (let [a (js/ArrayBuffer. 8)\n                   f (js/Float64Array. a)\n                   i (js/Uint32Array. a)\n                   hi (if little-endian? 1 0)]\n               (aset f 0 d)\n               (- (bit-shift-right (bit-and (aget i hi) EXP-BITMASK32) (dec SIGNIFICAND-WIDTH32)) EXP-BIAS))))\n\n(defn ^number hi-lo->double\n  {:doc \"Converts a pair of 32 bit integers into an IEEE-754 64 bit floating point number.\n  h is the high 32 bits, l is the low 32 bits.\"\n   :private true}\n  [h l]\n  (let [a (js/ArrayBuffer. 8)\n        f (js/Float64Array. a)\n        i (js/Uint32Array. a)]\n    (aset i LO l)\n    (aset i HI h)\n    (aget f 0)))\n\n(defn ^number power-of-two\n  {:doc \"returns a floating point power of two in the normal range\"\n   :private true}\n  [n]\n  (assert (and (>= n EXP-MIN) (<= n EXP-MAX)))\n  (hi-lo->double\n   (bit-and (bit-shift-left (+ n EXP-BIAS) (dec SIGNIFICAND-WIDTH32)) EXP-BITMASK32) 0))\n\n(defn ^number ulp\n  {:doc \"Returns the size of an ulp (unit in last place) for d.\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => ##Inf\n  If d is zero => Number/MIN_VALUE\n  If d is +/- Number/MAX_VALUE => 2^971\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#ulp-double-\"\n   :added \"1.11.10\"}\n  [d]\n  (cond\n    ^boolean (js/isNaN d) d\n    ^boolean (js/isFinite d)\n    (let [e (get-exponent d)]\n      (case e\n        1024 (Math/abs d)  ;; EXP-MAX + 1\n        -1023 js/Number.MIN_VALUE  ;; EXP-MIN - 1\n        (let [e (- e (+ 31 SIGNIFICAND-WIDTH32))]  ;; SIGNIFICAND_WIDTH64 -1\n          (if (>= e EXP-MIN)\n            (power-of-two e)\n            (let [shift (- e (- EXP-MIN 31 SIGNIFICAND-WIDTH32))]\n              (if (< shift 32)\n                (hi-lo->double 0 (bit-shift-left 1 shift))\n                (hi-lo->double (bit-shift-left 1 (- shift 32)) 0)))))))\n    :default ##Inf))\n\n(defn ^number signum\n  {:doc \"Returns the signum function of d - zero for zero, 1.0 if >0, -1.0 if <0.\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => sign of d\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#signum-double-\"\n   :added \"1.11.10\"}\n  [d]\n  (if (or (zero? d) ^boolean (js/isNaN d))\n    d\n    (copy-sign 1.0 d)))\n\n(defn ^number sinh\n  {:doc \"Returns the hyperbolic sine of x, (e^x - e^-x)/2.\n  If x is ##NaN => ##NaN\n  If x is ##Inf or ##-Inf or zero => x\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh\"\n   :added \"1.11.10\"}\n  [x] (Math/sinh x))\n\n(defn ^number cosh\n  {:doc \"Returns the hyperbolic cosine of x, (e^x + e^-x)/2.\n  If x is ##NaN => ##NaN\n  If x is ##Inf or ##-Inf => ##Inf\n  If x is zero => 1.0\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh\"\n   :added \"1.11.10\"}\n  [x] (Math/cosh x))\n\n(defn ^number tanh\n  {:doc \"Returns the hyperbolic tangent of x, sinh(x)/cosh(x).\n  If x is ##NaN => ##NaN\n  If x is zero => zero, with same sign\n  If x is ##Inf => +1.0\n  If x is ##-Inf => -1.0\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh\"\n   :added \"1.11.10\"}\n  [x] (Math/tanh x))\n\n(defn ^number hypot\n  {:doc \"Returns sqrt(x^2 + y^2) without intermediate underflow or overflow.\n  If x or y is ##Inf or ##-Inf => ##Inf\n  If x or y is ##NaN and neither is ##Inf or ##-Inf => ##NaN\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot\"\n   :added \"1.11.10\"}\n  [x y] (Math/hypot x y))\n\n(defn ^number expm1\n  {:doc \"Returns e^x - 1. Near 0, expm1(x)+1 is more accurate to e^x than exp(x).\n  If x is ##NaN => ##NaN\n  If x is ##Inf => #Inf\n  If x is ##-Inf => -1.0\n  If x is zero => x\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1\"\n   :added \"1.11.10\"}\n  [x] (Math/expm1 x))\n\n(defn ^number log1p\n  {:doc \"Returns ln(1+x). For small values of x, log1p(x) is more accurate than\n  log(1.0+x).\n  If x is ##NaN or ##-Inf or < -1 => ##NaN\n  If x is -1 => ##-Inf\n  If x is ##Inf => ##Inf\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p\"\n   :added \"1.11.10\"}\n  [x] (Math/log1p x))\n\n(defn ^number add64\n  {:doc \"Takes the high and low words for 2 different 64 bit integers, and adds them.\n  This handles overflow from the low-order words into the high order words.\"\n   :private true}\n  [hx lx hy ly]\n  (let [sx (unsigned-bit-shift-right (bit-and lx INT32-NON-SIGN-BIT) 31)\n        sy (unsigned-bit-shift-right (bit-and ly INT32-NON-SIGN-BIT) 31)\n        lr (+ (bit-and INT32-NON-SIGN-BITS lx) (bit-and INT32-NON-SIGN-BITS ly))\n        c31 (unsigned-bit-shift-right (bit-and lr INT32-NON-SIGN-BIT) 31)\n        b31 (+ sx sy c31)\n        lr (bit-or (bit-and lr INT32-NON-SIGN-BITS) (bit-shift-left b31 31))\n        c32 (bit-shift-right b31 1)\n        hr (bit-and INT32-MASK (+ hx hy c32))]\n    [hr lr]))\n\n(defn ^number next-after\n  {:doc \"Returns the adjacent floating point number to start in the direction of\n  the second argument. If the arguments are equal, the second is returned.\n  If either arg is #NaN => #NaN\n  If both arguments are signed zeros => direction\n  If start is +-Number/MIN_VALUE and direction would cause a smaller magnitude\n    => zero with sign matching start\n  If start is ##Inf or ##-Inf and direction would cause a smaller magnitude\n    => Number/MAX_VALUE with same sign as start\n  If start is equal to +=Number/MAX_VALUE and direction would cause a larger magnitude\n    => ##Inf or ##-Inf with sign matching start\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextAfter-double-double-\"\n   :added \"1.11.10\"}\n  [start direction]\n  ; Branch to descending case first as it is more costly than ascending\n  ; case due to start != 0.0f conditional.\n  (let [a (js/ArrayBuffer. 8)\n        f (js/Float64Array. a)\n        i (js/Uint32Array. a)]\n    (cond\n      (> start direction) (if-not (zero? start)\n                            (let [_ (aset f 0 start)\n                                  ht (aget i HI)\n                                  lt (aget i LO)\n                                  ;; ht&lt != 0 since start != 0.0\n                                  ;; So long as the top bit is not set, then whole number is > 0\n                                  [hr lr] (if (zero? (bit-and ht INT32-NON-SIGN-BIT))\n                                            (add64 ht lt 0xFFFFFFFF 0xFFFFFFFF)\n                                            (add64 ht lt 0 1))]\n                              (aset i HI hr)\n                              (aset i LO lr)\n                              (aget f 0))\n                            ;; start == 0.0 && direction < 0.0\n                            (- js/Number.MIN_VALUE))\n      ;; Add +0.0 to get rid of a -0.0 (+0.0 + -0.0 => +0.0)\n      ;; then bitwise convert start to integer\n      (< start direction) (let [_ (aset f 0 (+ start 0.0))\n                                ht (aget i HI)\n                                lt (aget i LO)\n                                [hr lr] (if (zero? (bit-and ht INT32-NON-SIGN-BIT))\n                                          (add64 ht lt 0 1)\n                                          (add64 ht lt 0xFFFFFFFF 0xFFFFFFFF))]\n                            (aset i HI hr)\n                            (aset i LO lr)\n                            (aget f 0))\n      (== start direction) direction\n      :default (+ start direction))))  ;; isNaN(start) || isNaN(direction)\n\n(defn ^number next-up\n  {:doc \"Returns the adjacent double of d in the direction of ##Inf.\n  If d is ##NaN => ##NaN\n  If d is ##Inf => ##Inf\n  If d is zero => Number/MIN_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextUp-double-\"\n   :added \"1.11.10\"}\n  [d]\n  ;; Use a single conditional and handle the likely cases first\n  (if (< d js/Number.POSITIVE_INFINITY)\n    (let [a (js/ArrayBuffer. 8)\n          f (js/Float64Array. a)\n          i (js/Uint32Array. a)\n          ;; Add +0.0 to get rid of a -0.0 (+0.0 + -0.0 => +0.0)\n          _ (aset f 0 (+ d 0.0))\n          ht (aget i HI)\n          lt (aget i LO)\n          [hr lr] (if (zero? (bit-and ht INT32-NON-SIGN-BIT))\n                    (add64 ht lt 0 1)\n                    (add64 ht lt 0xFFFFFFFF 0xFFFFFFFF))]\n      (aset i HI hr)\n      (aset i LO lr)\n      (aget f 0))\n    ;; d is NaN or +Infinity\n    d))\n\n(defn ^number next-down\n  {:doc \"Returns the adjacent double of d in the direction of ##-Inf.\n  If d is ##NaN => ##NaN\n  If d is ##Inf => Number/MAX_VALUE\n  If d is zero => -Number/MIN_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-\"\n   :added \"1.11.10\"}\n  [d]\n  (cond\n    (or ^boolean (js/isNaN d) (== ##-Inf d)) d\n    (zero? d) (- js/Number.MIN_VALUE)\n    :default\n    (let [a (js/ArrayBuffer. 8)\n          f (js/Float64Array. a)\n          i (js/Uint32Array. a)\n          _ (aset f 0 d)\n          ht (aget i HI)\n          lt (aget i LO)\n          [hr lr] (if (> d 0)\n                    (add64 ht lt 0xFFFFFFFF 0xFFFFFFFF)\n                    (add64 ht lt 0 1))]\n      (aset i HI hr)\n      (aset i LO lr)\n      (aget f 0))))\n\n(def ^:private MAX_SCALE (+ EXP-MAX (- EXP-MIN) SIGNIFICAND-WIDTH32 32 1))\n\n(def ^:private two-to-the-double-scale-up (power-of-two 512))\n\n(def ^:private two-to-the-double-scale-down (power-of-two -512))\n\n(defn ^number scalb\n  {:doc \"Returns d * 2^scaleFactor, scaling by a factor of 2. If the exponent\n  is between min_Float64_exponent and max_Float64_exponent.\n  scaleFactor is an integer\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => ##Inf or ##-Inf respectively\n  If d is zero => zero of same sign as d\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-\"\n   :added \"1.11.10\"}\n  [d scaleFactor]\n  (let [[scale-factor\n         scale-increment\n         exp-delta] (if (< scaleFactor 0)\n                      [(Math/max scaleFactor (- MAX_SCALE)) -512 two-to-the-double-scale-down]\n                      [(Math/min scaleFactor MAX_SCALE) 512 two-to-the-double-scale-up])\n        ;; Calculate (scaleFactor % +/-512), 512 = 2^9\n        ;; technique from \"Hacker's Delight\" section 10-2\n        t (unsigned-bit-shift-right (bit-shift-right scale-factor 8) 23)\n        exp-adjust (- (bit-and (+ scale-factor t) 511) t)]\n    (loop [d (* d (power-of-two exp-adjust)) scale-factor (- scale-factor exp-adjust)]\n      (if (zero? scale-factor)\n        d\n        (recur (* d exp-delta) (- scale-factor scale-increment))))))\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["cljs.math/E","Math/E","cljs.math/PI","Math/PI","cljs.math/DEGREES-TO-RADIANS","cljs.math/RADIANS-TO-DEGREES","cljs.math/TWO-TO-THE-52","cljs.math/SIGNIFICAND-WIDTH32","cljs.math/EXP-BIAS","cljs.math/EXP-BITMASK32","cljs.math/EXP-MAX","cljs.math/EXP-MIN","cljs.math/get-little-endian","a","js/ArrayBuffer","i","js/Uint32Array","b","js/Uint8Array","js/cljs","js/cljs.math","js/cljs.math.little-endian?","cljs.math/little-endian?","cljs.math/HI","cljs.math/LO","cljs.math/INT32-MASK","cljs.math/INT32-NON-SIGN-BIT","cljs.math/INT32-NON-SIGN-BITS","cljs.math/u<","ab","bb","cljs.math/sin","Math/sin","cljs.math/cos","Math/cos","cljs.math/tan","Math/tan","cljs.math/asin","Math/asin","cljs.math/acos","Math/acos","cljs.math/atan","Math/atan","cljs.math/to-radians","deg","cljs.math/to-degrees","r","cljs.math/exp","Math/exp","cljs.math/log","Math/log","cljs.math/log10","Math/log10","cljs.math/sqrt","Math/sqrt","cljs.math/cbrt","Math/cbrt","cljs.math/fabs","x","d","js/Float64Array","hi","cljs.math/Zero","cljs.math/xpos","cljs.math/ypos","cljs.math/HI-x","cljs.math/LO-x","cljs.math/HI-y","cljs.math/LO-y","cljs.math/ilogb","hx","lx","hx-zero?","start-ix","start-i","ix","cljs.math/setup-hl","h","l","n","cljs.math/IEEE-fmod","y","js/isNaN","js/isFinite","_","hy","ly","sx","hx<=hy","e35887","vec__35890","cljs.core.nth","vec__35893","vec__35896","vec__35899","vec__35902","iy","vec__35915","hz","lz","cljs.core.ex_info","vec__35929","cljs.math/IEEE-remainder","dividend","divisor","hp","lp","Math/abs","divisor-half","cljs.math/ceil","Math/ceil","cljs.math/floor","Math/floor","cljs.math/copy-sign","magnitude","sign","sbyte","sign-sbyte","mag-sbyte","cljs.math/rint","cljs.math/atan2","Math/atan2","cljs.math/pow","Math/pow","cljs.math/round","Math/round","js/Number.MAX_SAFE_INTEGER","js/Number.MIN_SAFE_INTEGER","cljs.math/random","Math/random","cljs.math/add-exact","cljs.math/subtract-exact","cljs.math/multiply-exact","cljs.math/increment-exact","cljs.math/decrement-exact","cljs.math/negate-exact","cljs.math/xor","cljs.math/floor-div","js/Number.isSafeInteger","cljs.core/long","cljs.math/floor-mod","cljs.math/get-exponent","f","cljs.math/hi-lo->double","cljs.math/power-of-two","js/Error","cljs.math/ulp","e","G__36152","js/Number.MIN_VALUE","shift","cljs.math/signum","cljs.math/sinh","Math/sinh","cljs.math/cosh","Math/cosh","cljs.math/tanh","Math/tanh","cljs.math/hypot","Math/hypot","cljs.math/expm1","Math/expm1","cljs.math/log1p","Math/log1p","cljs.math/add64","sy","lr","c31","b31","c32","hr","cljs.math/next-after","start","direction","vec__36184","ht","lt","vec__36192","cljs.math/next-up","js/Number.POSITIVE_INFINITY","vec__36197","cljs.math/next-down","vec__36230","cljs.math/MAX_SCALE","cljs.math/two-to-the-double-scale-up","cljs.math/two-to-the-double-scale-down","cljs.math/scalb","scaleFactor","vec__36241","scale-factor","scale-increment","exp-delta","Math/max","Math/min","t","exp-adjust"]],"~:used-vars",["^J",["~$cljs.math/hi-lo->double","~$cljs.math/floor","~$cljs.math/atan2","~$cljs.math/RADIANS-TO-DEGREES","~$cljs.math/hypot","~$cljs.math/fabs","~$Math/min","~$cljs.math/two-to-the-double-scale-up","~$cljs.math/HI-y","~$cljs.math/INT32-MASK","~$Math/atan","~$cljs.math/sqrt","~$cljs.math/floor-div","~$cljs.math/floor-mod","~$Math/expm1","~$Math/sinh","~$Math/log10","~$Math/max","~$cljs.math/u<","~$js/Float64Array","~$cljs.math/LO-y","~$cljs.math/LO-x","~$cljs.math/setup-hl","~$cljs.math/negate-exact","~$cljs.math/next-after","~$Math/sqrt","~$cljs.math/EXP-BIAS","~$cljs.math/add-exact","~$cljs.math/sinh","~$cljs.math/rint","~$cljs.math/MAX_SCALE","~$Math/PI","~$js/Number.MIN_SAFE_INTEGER","~$cljs.math/to-degrees","~$cljs.math/cbrt","~$js/cljs.math","~$Math/exp","~$cljs.math/two-to-the-double-scale-down","~$js/Number.isSafeInteger","~$js/isFinite","~$cljs.math/ypos","~$cljs.math/log1p","~$cljs.math/INT32-NON-SIGN-BIT","~$cljs.math/ceil","~$cljs.math/decrement-exact","~$Math/acos","~$cljs.math/PI","~$cljs.math/xpos","~$js/Uint8Array","~$Math/floor","~$cljs.math/atan","~$cljs.math/TWO-TO-THE-52","~$Math/hypot","~$cljs.math/multiply-exact","~$cljs.math/to-radians","~$cljs.math/expm1","~$Math/log1p","~$cljs.math/Zero","~$Math/asin","~$cljs.math/EXP-BITMASK32","~$cljs.math/HI","~$js/cljs.math.little-endian?","~$js/cljs","~$Math/ceil","~$cljs.math/acos","~$cljs.math/log10","~$cljs.math/INT32-NON-SIGN-BITS","~$cljs.math/tan","~$js/Number.POSITIVE_INFINITY","~$cljs.math/sin","~$cljs.math/scalb","~$Math/E","~$cljs.core/long","~$cljs.math/EXP-MAX","~$cljs.math/increment-exact","~$cljs.math/random","~$cljs.math/signum","~$Math/abs","~$cljs.math/asin","~$cljs.math/IEEE-fmod","~$Math/cos","~$cljs.math/copy-sign","~$js/isNaN","~$cljs.math/round","~$cljs.math/next-down","~$Math/tan","~$Math/cbrt","~$cljs.math/pow","~$cljs.math/next-up","~$cljs.math/exp","~$Math/sin","~$cljs.math/E","~$cljs.core/nth","~$cljs.math/xor","~$cljs.core/ex-info","~$cljs.math/IEEE-remainder","~$cljs.math/get-exponent","~$cljs.math/subtract-exact","~$cljs.math/cosh","~$Math/random","~$cljs.math/cos","~$cljs.math/SIGNIFICAND-WIDTH32","~$js/Number.MIN_VALUE","~$cljs.math/DEGREES-TO-RADIANS","~$Math/pow","~$cljs.math/ulp","~$js/Number.MAX_SAFE_INTEGER","~$cljs.core/not","~$cljs.math/tanh","~$cljs.math/HI-x","~$js/ArrayBuffer","~$Math/cosh","~$Math/log","~$cljs.math/little-endian?","~$cljs.math/LO","~$js/Uint32Array","~$Math/atan2","~$Math/tanh","~$cljs.math/add64","~$cljs.math/EXP-MIN","~$cljs.math/power-of-two","~$cljs.math/get-little-endian","~$js/Error","~$Math/round","~$cljs.math/ilogb","~$cljs.math/log"]]],"~:cache-keys",["~#cmap",[["^10","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^Q","~$goog.dom.HtmlElement"]]],["^10","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q"]]],["^10","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^10","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^4@"]]],["^10","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","^4A"]]],["^10","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q"]]],["^10","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q"]]],["^10","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q"]]],["^10","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q"]]],["^10","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","^4A"]]],"~:SHADOW-TIMESTAMP",[1677656185000,1677656185000,1674331854000],["^10","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","^4A","~$goog.reflect"]]],["^10","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","^4A","~$goog.fs.blob","^4B","~$goog.html.SafeScript","~$goog.html.trustedtypes","^4D","^4E","^4F","^4G"]]],["^10","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q"]]],["^10","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q"]]],["^10","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","^4F","~$goog.html.SafeUrl","^4G","^4A","^4@"]]],["^10","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","^4A","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4K","~$goog.html.SafeStyle","^4M","^4C","~$goog.html.uncheckedconversions","^4F","^4@"]]],["^10","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","^4F","^4D","^4E","^4K","^4Q","~$goog.html.SafeStyleSheet","^4M","~$goog.dom.TagName","^4C","^4G","^4A","~$goog.labs.userAgent.browser","^4=","^4>","^4@","~$goog.dom.tags","^4L"]]],["^10","cljs/math.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","^G"]]],["^10","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","^4>"]]],["^10","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q"]]],["^10","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^10","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","^4=","^4A","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^10","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q"]]],["^10","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q"]]],["^10","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q"]]],["^10","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",[]]],["^10","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","^4=","^4>"]]],["^10","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","~$goog.dom.safe","^4R","^4F","^4@"]]],["^10","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q"]]],["^10","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","~$goog.labs.userAgent","^4@"]]],["^10","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q"]]],["^10","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q"]]],["^10","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","^4A","^4P","^4K","^4Q","^4S","^4M","^4C","^4F","^4@","^4D"]]],["^10","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q"]]],["^10","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","~$goog.math.Long","~$goog.math.Integer","^4Z","^4>","^4=","~$goog.Uri","~$goog.string.StringBuffer"]]],["^10","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","^4F","^4G","^4L","^4A"]]],["^10","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","^4F","^4Q","^4G","^4>","^4A","^4@"]]],["^10","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","^4I"]]],["^10","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","^4A","^4Z"]]],["^10","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^48",["^ ","^49",null,"^4:",["^J",[]],"^4;",["^Q","^4A","^4G"]]]]],"~:clj-info",["^ ","jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1669480727000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1669480727000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1669480727000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1669480727000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1669480727000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1669480727000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1669480727000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1677656184000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1674331854000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","cljs/math.cljs","^7",3,"^8",5,"^9",3,"^:",14,"^;","ClojureScript wrapper functions for math operations","^<","Paula Gearon"],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"~:shadow/js-access-properties",["^J",["POSITIVE_INFINITY","MIN_SAFE_INTEGER","isSafeInteger","MAX_SAFE_INTEGER","MIN_VALUE"]],"^K","^E","^L",["^ "],"^O",null,"^P",["^ ","^G","^G","^Q","^Q"],"^R",["^J",[]],"~:shadow/js-access-global",["^J",["Float64Array","ArrayBuffer","Number","Uint8Array","isNaN","isFinite","Error","Uint32Array"]],"^S",null,"~:defs",["^ ","~$u<",["^ ","~:protocol-inline",null,"^5",["^ ","^6","cljs/math.cljs","^7",69,"^8",7,"^9",69,"^:",9,"~:arglists",["^V",["~$quote",["^V",[["~$a","~$b"]]]]],"^;","unsigned less-than comparator for 32-bit values","~:private",true],"^64",true,"^K","^1N","^6","cljs/math.cljs","^:",9,"~:method-params",["^V",[["~$a","~$b"]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^8",1,"~:variadic?",false,"^7",69,"~:ret-tag","~$boolean","^9",69,"~:max-fixed-arity",2,"~:fn-var",true,"^62",["^V",["^63",["^V",[["~$a","~$b"]]]]],"^;","unsigned less-than comparator for 32-bit values"],"~$xpos",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",220,"^8",35,"^9",220,"^:",39,"^64",true,"~:const",true],"^64",true,"^K","^2?","^6","cljs/math.cljs","^:",39,"~:const-expr",["^ ","^M","^6>","~:val",0,"~:env",["^ ","~:context","~:expr"],"^U",0,"~:tag","~$number"],"^8",1,"^6>",true,"^7",220,"^9",220,"^6D","^6E"],"~$LO-y",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",225,"^8",23,"^9",225,"^:",27,"^64",true],"^64",true,"^K","^1P","^6","cljs/math.cljs","^:",27,"^8",1,"^7",225,"^9",225,"^6D","^6E"],"~$LO-x",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",223,"^8",23,"^9",223,"^:",27,"^64",true],"^64",true,"^K","^1Q","^6","cljs/math.cljs","^:",27,"^8",1,"^7",223,"^9",223,"^6D","^6E"],"~$next-after",["^ ","^61",null,"^5",["^ ","~:added","1.11.10","^6","cljs/math.cljs","^:",25,"^8",15,"^7",742,"^9",742,"^6D","^6E","^62",["^V",["^63",["^V",[["~$start","~$direction"]]]]],"^;","Returns the adjacent floating point number to start in the direction of\n  the second argument. If the arguments are equal, the second is returned.\n  If either arg is #NaN => #NaN\n  If both arguments are signed zeros => direction\n  If start is +-Number/MIN_VALUE and direction would cause a smaller magnitude\n    => zero with sign matching start\n  If start is ##Inf or ##-Inf and direction would cause a smaller magnitude\n    => Number/MAX_VALUE with same sign as start\n  If start is equal to +=Number/MAX_VALUE and direction would cause a larger magnitude\n    => ##Inf or ##-Inf with sign matching start\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextAfter-double-double-"],"^6I","1.11.10","^K","^1T","^6","cljs/math.cljs","^:",25,"^65",["^V",[["^6J","^6K"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",742,"^69","^6E","^9",742,"^6;",2,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["^6J","^6K"]]]]],"^;","Returns the adjacent floating point number to start in the direction of\n  the second argument. If the arguments are equal, the second is returned.\n  If either arg is #NaN => #NaN\n  If both arguments are signed zeros => direction\n  If start is +-Number/MIN_VALUE and direction would cause a smaller magnitude\n    => zero with sign matching start\n  If start is ##Inf or ##-Inf and direction would cause a smaller magnitude\n    => Number/MAX_VALUE with same sign as start\n  If start is equal to +=Number/MAX_VALUE and direction would cause a larger magnitude\n    => ##Inf or ##-Inf with sign matching start\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextAfter-double-double-"],"~$to-radians",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",25,"^8",15,"^7",126,"^9",126,"^6D","^6E","^62",["^V",["^63",["^V",[["~$deg"]]]]],"^;","Converts an angle in degrees to an approximate equivalent angle in radians.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toRadians-double-"],"^6I","1.11.10","^K","^2F","^6","cljs/math.cljs","^:",25,"^65",["^V",[["^6M"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",126,"^69","^6E","^9",126,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["^6M"]]]]],"^;","Converts an angle in degrees to an approximate equivalent angle in radians.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toRadians-double-"],"~$MAX_SCALE",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",841,"^8",16,"^9",841,"^:",25,"^64",true],"^64",true,"^K","^1Z","^6","cljs/math.cljs","^:",25,"^8",1,"^7",841,"^9",841,"^6D","^6E"],"~$log",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",18,"^8",15,"^7",149,"^9",149,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the natural logarithm (base e) of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => ##-Inf\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log"],"^6I","1.11.10","^K","^45","^6","cljs/math.cljs","^:",18,"^65",["^V",[["~$a"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",149,"^69","^6E","^9",149,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the natural logarithm (base e) of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => ##-Inf\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log"],"~$acos",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",19,"^8",15,"^7",111,"^9",111,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the arc cosine of a, in the range 0.0 to pi.\n  If a is ##NaN or |a|>1 => ##NaN\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos"],"^6I","1.11.10","^K","^2P","^6","cljs/math.cljs","^:",19,"^65",["^V",[["~$a"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",111,"^69","^6E","^9",111,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the arc cosine of a, in the range 0.0 to pi.\n  If a is ##NaN or |a|>1 => ##NaN\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos"],"~$to-degrees",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",25,"^8",15,"^7",133,"^9",133,"^6D","^6E","^62",["^V",["^63",["^V",[["~$r"]]]]],"^;","Converts an angle in radians to an approximate equivalent angle in degrees.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toDegrees-double-"],"^6I","1.11.10","^K","^21","^6","cljs/math.cljs","^:",25,"^65",["^V",[["~$r"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",133,"^69","^6E","^9",133,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$r"]]]]],"^;","Converts an angle in radians to an approximate equivalent angle in degrees.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#toDegrees-double-"],"~$hi-lo->double",["^ ","^61",null,"^5",["^ ","^64",true,"^6","cljs/math.cljs","^:",28,"^8",15,"^7",616,"^9",616,"^6D","^6E","^62",["^V",["^63",["^V",[["~$h","~$l"]]]]],"^;","Converts a pair of 32 bit integers into an IEEE-754 64 bit floating point number.\n  h is the high 32 bits, l is the low 32 bits."],"^64",true,"^K","^1<","^6","cljs/math.cljs","^:",28,"^65",["^V",[["~$h","~$l"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",616,"^69","^6E","^9",616,"^6;",2,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$h","~$l"]]]]],"^;","Converts a pair of 32 bit integers into an IEEE-754 64 bit floating point number.\n  h is the high 32 bits, l is the low 32 bits."],"~$floor",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",20,"^8",15,"^7",425,"^9",425,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the largest double less than or equal to a, and equal to a\n  mathematical integer.\n  If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\n  If a is less than zero but greater than -1.0 => -0.0\n  Note that if a is `nil` then an exception will be thrown. This matches Clojure, rather than js/Math.floor\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor"],"^6I","1.11.10","^K","^1=","^6","cljs/math.cljs","^:",20,"^65",["^V",[["~$a"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",425,"^69","^6E","^9",425,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the largest double less than or equal to a, and equal to a\n  mathematical integer.\n  If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\n  If a is less than zero but greater than -1.0 => -0.0\n  Note that if a is `nil` then an exception will be thrown. This matches Clojure, rather than js/Math.floor\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor"],"~$atan2",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",20,"^8",15,"^7",478,"^9",478,"^6D","^6E","^62",["^V",["^63",["^V",[["~$y","~$x"]]]]],"^;","Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta).\n  Computes the phase theta by computing an arc tangent of y/x in the range of -pi to pi.\n  For more details on special cases, see:\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan"],"^6I","1.11.10","^K","^1>","^6","cljs/math.cljs","^:",20,"^65",["^V",[["~$y","~$x"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",478,"^69","^6E","^9",478,"^6;",2,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$y","~$x"]]]]],"^;","Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta).\n  Computes the phase theta by computing an arc tangent of y/x in the range of -pi to pi.\n  For more details on special cases, see:\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan"],"~$RADIANS-TO-DEGREES",["^ ","^5",["^ ","^64",true,"^6I","1.11.10","^6","cljs/math.cljs","^:",36,"^8",18,"^6>",true,"^7",29,"^9",29,"^;","Constant used to convert an angular value in radians to the equivalent in degrees"],"^64",true,"^6I","1.11.10","^K","^1?","^6","cljs/math.cljs","^:",36,"^6?",["^ ","^M","^6>","^6@",57.29577951308232,"^6A",["^ ","^6B","^6C"],"^U",57.29577951308232,"^6D","^6E"],"^8",1,"^6>",true,"^7",25,"^9",29,"^6D","^6E","^;","Constant used to convert an angular value in radians to the equivalent in degrees"],"~$hypot",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",20,"^8",15,"^7",699,"^9",699,"^6D","^6E","^62",["^V",["^63",["^V",[["~$x","~$y"]]]]],"^;","Returns sqrt(x^2 + y^2) without intermediate underflow or overflow.\n  If x or y is ##Inf or ##-Inf => ##Inf\n  If x or y is ##NaN and neither is ##Inf or ##-Inf => ##NaN\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot"],"^6I","1.11.10","^K","^1@","^6","cljs/math.cljs","^:",20,"^65",["^V",[["~$x","~$y"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",699,"^69","^6E","^9",699,"^6;",2,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$x","~$y"]]]]],"^;","Returns sqrt(x^2 + y^2) without intermediate underflow or overflow.\n  If x or y is ##Inf or ##-Inf => ##Inf\n  If x or y is ##NaN and neither is ##Inf or ##-Inf => ##NaN\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot"],"~$tanh",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",19,"^8",15,"^7",689,"^9",689,"^6D","^6E","^62",["^V",["^63",["^V",[["~$x"]]]]],"^;","Returns the hyperbolic tangent of x, sinh(x)/cosh(x).\n  If x is ##NaN => ##NaN\n  If x is zero => zero, with same sign\n  If x is ##Inf => +1.0\n  If x is ##-Inf => -1.0\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh"],"^6I","1.11.10","^K","^3P","^6","cljs/math.cljs","^:",19,"^65",["^V",[["~$x"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",689,"^69","^6E","^9",689,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$x"]]]]],"^;","Returns the hyperbolic tangent of x, sinh(x)/cosh(x).\n  If x is ##NaN => ##NaN\n  If x is zero => zero, with same sign\n  If x is ##Inf => +1.0\n  If x is ##-Inf => -1.0\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh"],"~$INT32-MASK",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",63,"^8",35,"^9",63,"^:",45,"^64",true,"^6>",true],"^64",true,"^K","^1E","^6","cljs/math.cljs","^:",45,"^6?",["^ ","^M","^6>","^6@",4294967295,"^6A",["^ ","^6B","^6C"],"^U",4294967295,"^6D","^6E"],"^8",1,"^6>",true,"^7",63,"^9",63,"^6D","^6E"],"~$floor-mod",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",24,"^8",15,"^7",584,"^9",584,"^6D","^6E","^62",["^V",["^63",["^V",[["~$x","~$y"]]]]],"^;","Integer modulus x - (floorDiv(x, y) * y). Sign matches y and is in the\n  range -|y| < r < |y|.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorMod-long-long-"],"^6I","1.11.10","^K","^1I","^6","cljs/math.cljs","^:",24,"^65",["^V",[["~$x","~$y"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",584,"^69","^6E","^9",584,"^6;",2,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$x","~$y"]]]]],"^;","Integer modulus x - (floorDiv(x, y) * y). Sign matches y and is in the\n  range -|y| < r < |y|.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorMod-long-long-"],"~$INT32-NON-SIGN-BIT",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",65,"^8",35,"^9",65,"^:",53,"^64",true,"^6>",true],"^64",true,"^K","^2:","^6","cljs/math.cljs","^:",53,"^6?",["^ ","^M","^6>","^6@",2147483648,"^6A",["^ ","^6B","^6C"],"^U",2147483648,"^6D","^6E"],"^8",1,"^6>",true,"^7",65,"^9",65,"^6D","^6E"],"~$ceil",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",19,"^8",15,"^7",413,"^9",413,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the smallest double greater than or equal to a, and equal to a\n  mathematical integer.\n  If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\n  Note that if a is `nil` then an exception will be thrown. This matches Clojure, rather than js/Math.ceil\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil"],"^6I","1.11.10","^K","^2;","^6","cljs/math.cljs","^:",19,"^65",["^V",[["~$a"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",413,"^69","^6E","^9",413,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the smallest double greater than or equal to a, and equal to a\n  mathematical integer.\n  If a is ##NaN or ##Inf or ##-Inf or already equal to an integer => a\n  Note that if a is `nil` then an exception will be thrown. This matches Clojure, rather than js/Math.ceil\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil"],"~$atan",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",19,"^8",15,"^7",118,"^9",118,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the arc tangent of a, in the range of -pi/2 to pi/2.\n  If a is ##NaN => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan"],"^6I","1.11.10","^K","^2B","^6","cljs/math.cljs","^:",19,"^65",["^V",[["~$a"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",118,"^69","^6E","^9",118,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the arc tangent of a, in the range of -pi/2 to pi/2.\n  If a is ##NaN => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan"],"~$TWO-TO-THE-52",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",31,"^8",35,"^9",31,"^:",48,"^64",true,"^6>",true],"^64",true,"^K","^2C","^6","cljs/math.cljs","^:",48,"^6?",["^ ","^M","^6>","^6@",4503599627370496,"^6A",["^ ","^6B","^6C"],"^U",4503599627370496,"^6D","^6E"],"^8",1,"^6>",true,"^7",31,"^9",31,"^6D","^6E"],"~$multiply-exact",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",29,"^8",15,"^7",534,"^9",534,"^6D","^6E","^62",["^V",["^63",["^V",[["~$x","~$y"]]]]],"^;","Returns the product of x and y, throws ArithmeticException on overflow. "],"^6I","1.11.10","^K","^2E","^6","cljs/math.cljs","^:",29,"^65",["^V",[["~$x","~$y"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",534,"^69","^6E","^9",534,"^6;",2,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$x","~$y"]]]]],"^;","Returns the product of x and y, throws ArithmeticException on overflow. "],"~$expm1",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",20,"^8",15,"^7",707,"^9",707,"^6D","^6E","^62",["^V",["^63",["^V",[["~$x"]]]]],"^;","Returns e^x - 1. Near 0, expm1(x)+1 is more accurate to e^x than exp(x).\n  If x is ##NaN => ##NaN\n  If x is ##Inf => #Inf\n  If x is ##-Inf => -1.0\n  If x is zero => x\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1"],"^6I","1.11.10","^K","^2G","^6","cljs/math.cljs","^:",20,"^65",["^V",[["~$x"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",707,"^69","^6E","^9",707,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$x"]]]]],"^;","Returns e^x - 1. Near 0, expm1(x)+1 is more accurate to e^x than exp(x).\n  If x is ##NaN => ##NaN\n  If x is ##Inf => #Inf\n  If x is ##-Inf => -1.0\n  If x is zero => x\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1"],"~$get-exponent",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",27,"^8",15,"^7",599,"^9",599,"^6D","^6E","^62",["^V",["^63",["^V",[["~$d"]]]]],"^;","Returns the exponent of d.\n  If d is ##NaN, ##Inf, ##-Inf => max_Float64_exponent + 1\n  If d is zero or subnormal => min_Float64_exponent - 1\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#getExponent-double-"],"^6I","1.11.10","^K","^3D","^6","cljs/math.cljs","^:",27,"^65",["^V",[["~$d"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",599,"^69","^6E","^9",599,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$d"]]]]],"^;","Returns the exponent of d.\n  If d is ##NaN, ##Inf, ##-Inf => max_Float64_exponent + 1\n  If d is zero or subnormal => min_Float64_exponent - 1\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#getExponent-double-"],"~$Zero",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",205,"^8",23,"^9",205,"^:",27,"^64",true],"^64",true,"^K","^2I","^6","cljs/math.cljs","^:",27,"^8",1,"^7",205,"^9",205,"^6D","~$js"],"~$add-exact",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",24,"^8",15,"^7",516,"^9",516,"^6D","^6E","^62",["^V",["^63",["^V",[["~$x","~$y"]]]]],"^;","Returns the sum of x and y, throws an exception on overflow. "],"^6I","1.11.10","^K","^1W","^6","cljs/math.cljs","^:",24,"^65",["^V",[["~$x","~$y"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",516,"^69","^6E","^9",516,"^6;",2,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$x","~$y"]]]]],"^;","Returns the sum of x and y, throws an exception on overflow. "],"~$EXP-BITMASK32",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",37,"^8",35,"^9",37,"^:",48,"^64",true,"^6>",true],"^64",true,"^K","^2K","^6","cljs/math.cljs","^:",48,"^6?",["^ ","^M","^6>","^6@",2146435072,"^6A",["^ ","^6B","^6C"],"^U",2146435072,"^6D","^6E"],"^8",1,"^6>",true,"^7",37,"^9",37,"^6D","^6E"],"~$HI",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",59,"^8",69,"^9",59,"^:",71,"^64",true,"^;","offset of hi integers in 64-bit values"],"^64",true,"^K","^2L","^6","cljs/math.cljs","^:",71,"^8",1,"^7",59,"^9",59,"^6D","^6E","^;","offset of hi integers in 64-bit values"],"~$cos",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",18,"^8",15,"^7",88,"^9",88,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the cosine of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos"],"^6I","1.11.10","^K","^3H","^6","cljs/math.cljs","^:",18,"^65",["^V",[["~$a"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",88,"^69","^6E","^9",88,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the cosine of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos"],"~$log10",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",20,"^8",15,"^7",158,"^9",158,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the logarithm (base 10) of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => ##-Inf\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10"],"^6I","1.11.10","^K","^2Q","^6","cljs/math.cljs","^:",20,"^65",["^V",[["~$a"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",158,"^69","^6E","^9",158,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the logarithm (base 10) of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => ##-Inf\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10"],"~$tan",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",18,"^8",15,"^7",95,"^9",95,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the tangent of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan"],"^6I","1.11.10","^K","^2S","^6","cljs/math.cljs","^:",18,"^65",["^V",[["~$a"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",95,"^69","^6E","^9",95,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the tangent of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan"],"~$cbrt",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",19,"^8",15,"^7",176,"^9",176,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the cube root of a.\n  If a is ##NaN => ##NaN\n  If a is ##Inf or ##-Inf => a\n  If a is zero => zero with sign matching a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt"],"^6I","1.11.10","^K","^22","^6","cljs/math.cljs","^:",19,"^65",["^V",[["~$a"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",176,"^69","^6E","^9",176,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the cube root of a.\n  If a is ##NaN => ##NaN\n  If a is ##Inf or ##-Inf => a\n  If a is zero => zero with sign matching a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt"],"~$fabs",["^ ","^61",null,"^5",["^ ","^64",true,"^6I","1.11.10","^6","cljs/math.cljs","^:",19,"^8",15,"^7",185,"^9",185,"^6D","^6E","^62",["^V",["^63",["^V",[["~$x"]]]]],"^;","Internal function to convert doubles to absolute values.\n  This duplicates the C implementations in Java, in case there is are corner-case differences."],"^64",true,"^6I","1.11.10","^K","^1A","^6","cljs/math.cljs","^:",19,"^65",["^V",[["~$x"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",185,"^69","^6E","^9",185,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$x"]]]]],"^;","Internal function to convert doubles to absolute values.\n  This duplicates the C implementations in Java, in case there is are corner-case differences."],"~$two-to-the-double-scale-up",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",843,"^8",16,"^9",843,"^:",42,"^64",true],"^64",true,"^K","^1C","^6","cljs/math.cljs","^:",42,"^8",1,"^7",843,"^9",843,"^6D","^6E"],"~$two-to-the-double-scale-down",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",845,"^8",16,"^9",845,"^:",44,"^64",true],"^64",true,"^K","^25","^6","cljs/math.cljs","^:",44,"^8",1,"^7",845,"^9",845,"^6D","^6E"],"~$ypos",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",221,"^8",35,"^9",221,"^:",39,"^64",true,"^6>",true],"^64",true,"^K","^28","^6","cljs/math.cljs","^:",39,"^6?",["^ ","^M","^6>","^6@",1,"^6A",["^ ","^6B","^6C"],"^U",1,"^6D","^6E"],"^8",1,"^6>",true,"^7",221,"^9",221,"^6D","^6E"],"~$sqrt",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",19,"^8",15,"^7",167,"^9",167,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the positive square root of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt"],"^6I","1.11.10","^K","^1G","^6","cljs/math.cljs","^:",19,"^65",["^V",[["~$a"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",167,"^69","^6E","^9",167,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the positive square root of a.\n  If a is ##NaN or negative => ##NaN\n  If a is ##Inf => ##Inf\n  If a is zero => a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt"],"~$IEEE-fmod",["^ ","^61",null,"^5",["^ ","^64",true,"^6","cljs/math.cljs","^:",24,"^8",15,"^7",252,"^9",252,"^6D","^6E","^62",["^V",["^63",["^V",[["~$x","~$y"]]]]],"^;","Return x mod y in exact arithmetic. Method: shift and subtract.\n  Reimplements __ieee754_fmod from the JDK.\n  Ported from: https://github.com/openjdk/jdk/blob/master/src/java.base/share/native/libfdlibm/e_fmod.c\n  bit-shift-left and bit-shift-right convert numbers to signed 32-bit\n  Fortunately the values that are shifted are expected to be 32 bit signed."],"^64",true,"^K","^33","^6","cljs/math.cljs","^:",24,"^65",["^V",[["~$x","~$y"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",252,"^69","^6E","^9",252,"^6;",2,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$x","~$y"]]]]],"^;","Return x mod y in exact arithmetic. Method: shift and subtract.\n  Reimplements __ieee754_fmod from the JDK.\n  Ported from: https://github.com/openjdk/jdk/blob/master/src/java.base/share/native/libfdlibm/e_fmod.c\n  bit-shift-left and bit-shift-right convert numbers to signed 32-bit\n  Fortunately the values that are shifted are expected to be 32 bit signed."],"~$decrement-exact",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",30,"^8",15,"^7",551,"^9",551,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns a decremented by 1, throws ArithmeticException on overflow. "],"^6I","1.11.10","^K","^2<","^6","cljs/math.cljs","^:",30,"^65",["^V",[["~$a"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",551,"^69","^6E","^9",551,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns a decremented by 1, throws ArithmeticException on overflow. "],"~$PI",["^ ","^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",20,"^8",18,"^6>",true,"^7",17,"^9",17,"^6D","^6E","^;","Constant for pi, the ratio of the circumference of a circle to its diameter.\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI"],"^6I","1.11.10","^K","^2>","^6","cljs/math.cljs","^:",20,"^8",1,"^6>",true,"^7",12,"^9",17,"^6D","^6E","^;","Constant for pi, the ratio of the circumference of a circle to its diameter.\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI"],"~$next-down",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",24,"^8",15,"^7",816,"^9",816,"^6D","^6E","^62",["^V",["^63",["^V",[["~$d"]]]]],"^;","Returns the adjacent double of d in the direction of ##-Inf.\n  If d is ##NaN => ##NaN\n  If d is ##Inf => Number/MAX_VALUE\n  If d is zero => -Number/MIN_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-"],"^6I","1.11.10","^K","^38","^6","cljs/math.cljs","^:",24,"^65",["^V",[["~$d"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",816,"^69","^6E","^9",816,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$d"]]]]],"^;","Returns the adjacent double of d in the direction of ##-Inf.\n  If d is ##NaN => ##NaN\n  If d is ##Inf => Number/MAX_VALUE\n  If d is zero => -Number/MIN_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-"],"~$pow",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",18,"^8",15,"^7",486,"^9",486,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a","~$b"]]]]],"^;","Returns the value of a raised to the power of b.\n  For more details on special cases, see:\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow"],"^6I","1.11.10","^K","^3;","^6","cljs/math.cljs","^:",18,"^65",["^V",[["~$a","~$b"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",486,"^69","^6E","^9",486,"^6;",2,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a","~$b"]]]]],"^;","Returns the value of a raised to the power of b.\n  For more details on special cases, see:\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow"],"~$next-up",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",22,"^8",15,"^7",790,"^9",790,"^6D","^6E","^62",["^V",["^63",["^V",[["~$d"]]]]],"^;","Returns the adjacent double of d in the direction of ##Inf.\n  If d is ##NaN => ##NaN\n  If d is ##Inf => ##Inf\n  If d is zero => Number/MIN_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextUp-double-"],"^6I","1.11.10","^K","^3<","^6","cljs/math.cljs","^:",22,"^65",["^V",[["~$d"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",790,"^69","^6E","^9",790,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$d"]]]]],"^;","Returns the adjacent double of d in the direction of ##Inf.\n  If d is ##NaN => ##NaN\n  If d is ##Inf => ##Inf\n  If d is zero => Number/MIN_VALUE\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextUp-double-"],"~$exp",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",18,"^8",15,"^7",140,"^9",140,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns Euler's number e raised to the power of a.\n  If a is ##NaN => ##NaN\n  If a is ##Inf => ##Inf\n  If a is ##-Inf => +0.0\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp"],"^6I","1.11.10","^K","^3=","^6","cljs/math.cljs","^:",18,"^65",["^V",[["~$a"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",140,"^69","^6E","^9",140,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns Euler's number e raised to the power of a.\n  If a is ##NaN => ##NaN\n  If a is ##Inf => ##Inf\n  If a is ##-Inf => +0.0\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp"],"~$power-of-two",["^ ","^61",null,"^5",["^ ","^64",true,"^6","cljs/math.cljs","^:",27,"^8",15,"^7",628,"^9",628,"^6D","^6E","^62",["^V",["^63",["^V",[["~$n"]]]]],"^;","returns a floating point power of two in the normal range"],"^64",true,"^K","^40","^6","cljs/math.cljs","^:",27,"^65",["^V",[["~$n"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",628,"^69","^6E","^9",628,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$n"]]]]],"^;","returns a floating point power of two in the normal range"],"~$subtract-exact",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",29,"^8",15,"^7",525,"^9",525,"^6D","^6E","^62",["^V",["^63",["^V",[["~$x","~$y"]]]]],"^;","Returns the difference of x and y, throws ArithmeticException on overflow. "],"^6I","1.11.10","^K","^3E","^6","cljs/math.cljs","^:",29,"^65",["^V",[["~$x","~$y"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",525,"^69","^6E","^9",525,"^6;",2,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$x","~$y"]]]]],"^;","Returns the difference of x and y, throws ArithmeticException on overflow. "],"~$cosh",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",19,"^8",15,"^7",680,"^9",680,"^6D","^6E","^62",["^V",["^63",["^V",[["~$x"]]]]],"^;","Returns the hyperbolic cosine of x, (e^x + e^-x)/2.\n  If x is ##NaN => ##NaN\n  If x is ##Inf or ##-Inf => ##Inf\n  If x is zero => 1.0\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh"],"^6I","1.11.10","^K","^3F","^6","cljs/math.cljs","^:",19,"^65",["^V",[["~$x"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",680,"^69","^6E","^9",680,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$x"]]]]],"^;","Returns the hyperbolic cosine of x, (e^x + e^-x)/2.\n  If x is ##NaN => ##NaN\n  If x is ##Inf or ##-Inf => ##Inf\n  If x is zero => 1.0\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh"],"~$SIGNIFICAND-WIDTH32",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",33,"^8",35,"^9",33,"^:",54,"^64",true,"^6>",true],"^64",true,"^K","^3I","^6","cljs/math.cljs","^:",54,"^6?",["^ ","^M","^6>","^6@",21,"^6A",["^ ","^6B","^6C"],"^U",21,"^6D","^6E"],"^8",1,"^6>",true,"^7",33,"^9",33,"^6D","^6E"],"~$scalb",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",20,"^8",15,"^7",847,"^9",847,"^6D","^6E","^62",["^V",["^63",["^V",[["~$d","~$scaleFactor"]]]]],"^;","Returns d * 2^scaleFactor, scaling by a factor of 2. If the exponent\n  is between min_Float64_exponent and max_Float64_exponent.\n  scaleFactor is an integer\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => ##Inf or ##-Inf respectively\n  If d is zero => zero of same sign as d\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-"],"^6I","1.11.10","^K","^2V","^6","cljs/math.cljs","^:",20,"^65",["^V",[["~$d","^7O"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",847,"^69","^6E","^9",847,"^6;",2,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$d","^7O"]]]]],"^;","Returns d * 2^scaleFactor, scaling by a factor of 2. If the exponent\n  is between min_Float64_exponent and max_Float64_exponent.\n  scaleFactor is an integer\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => ##Inf or ##-Inf respectively\n  If d is zero => zero of same sign as d\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#nextDown-double-"],"~$EXP-MAX",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",39,"^8",35,"^9",39,"^:",42,"^64",true,"^6>",true],"^64",true,"^K","^2Y","^6","cljs/math.cljs","^:",42,"^8",1,"^6>",true,"^7",39,"^9",39,"^6D","^6E"],"~$log1p",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",20,"^8",15,"^7",717,"^9",717,"^6D","^6E","^62",["^V",["^63",["^V",[["~$x"]]]]],"^;","Returns ln(1+x). For small values of x, log1p(x) is more accurate than\n  log(1.0+x).\n  If x is ##NaN or ##-Inf or < -1 => ##NaN\n  If x is -1 => ##-Inf\n  If x is ##Inf => ##Inf\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p"],"^6I","1.11.10","^K","^29","^6","cljs/math.cljs","^:",20,"^65",["^V",[["~$x"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",717,"^69","^6E","^9",717,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$x"]]]]],"^;","Returns ln(1+x). For small values of x, log1p(x) is more accurate than\n  log(1.0+x).\n  If x is ##NaN or ##-Inf or < -1 => ##NaN\n  If x is -1 => ##-Inf\n  If x is ##Inf => ##Inf\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p"],"~$asin",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",19,"^8",15,"^7",103,"^9",103,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the arc sine of an angle, in the range -pi/2 to pi/2.\n  If a is ##NaN or |a|>1 => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin"],"^6I","1.11.10","^K","^32","^6","cljs/math.cljs","^:",19,"^65",["^V",[["~$a"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",103,"^69","^6E","^9",103,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the arc sine of an angle, in the range -pi/2 to pi/2.\n  If a is ##NaN or |a|>1 => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin"],"~$copy-sign",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",24,"^8",15,"^7",438,"^9",438,"^6D","^6E","^62",["^V",["^63",["^V",[["~$magnitude","~$sign"]]]]],"^;","Returns a double with the magnitude of the first argument and the sign of\n  the second.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#copySign-double-double-"],"^6I","1.11.10","^K","^35","^6","cljs/math.cljs","^:",24,"^65",["^V",[["^7T","^7U"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",438,"^69","^6E","^9",438,"^6;",2,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["^7T","^7U"]]]]],"^;","Returns a double with the magnitude of the first argument and the sign of\n  the second.\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#copySign-double-double-"],"~$little-endian?",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",56,"^8",20,"^9",56,"^:",34,"^64",true],"^64",true,"^K","^3U","^6","cljs/math.cljs","^:",34,"^8",1,"^7",56,"^9",56,"^6D","^6:"],"~$round",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",20,"^8",15,"^7",493,"^9",493,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the closest long to a. If equally close to two values, return the one\n  closer to ##Inf.\n  If a is ##NaN => 0\n  If a is ##-Inf => js/Number.MIN_SAFE_INTEGER\n  If a is ##Inf => js/Number.MAX_SAFE_INTEGER\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round"],"^6I","1.11.10","^K","^37","^6","cljs/math.cljs","^:",20,"^65",["^V",[["~$a"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",493,"^69","^6E","^9",493,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the closest long to a. If equally close to two values, return the one\n  closer to ##Inf.\n  If a is ##NaN => 0\n  If a is ##-Inf => js/Number.MIN_SAFE_INTEGER\n  If a is ##Inf => js/Number.MAX_SAFE_INTEGER\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round"],"~$setup-hl",["^ ","^61",null,"^5",["^ ","^64",true,"^6","cljs/math.cljs","^:",23,"^8",15,"^7",241,"^9",241,"^6D","^6E","^62",["^V",["^63",["^V",[["~$i","~$h","~$l"]]]]],"^;","internal function to setup and align integer words"],"^64",true,"^K","^1R","^6","cljs/math.cljs","^:",23,"^65",["^V",[["~$i","~$h","~$l"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",241,"^69","^6E","^9",241,"^6;",3,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$i","~$h","~$l"]]]]],"^;","internal function to setup and align integer words"],"~$negate-exact",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",27,"^8",15,"^7",559,"^9",559,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the negation of a, throws ArithmeticException on overflow. "],"^6I","1.11.10","^K","^1S","^6","cljs/math.cljs","^:",27,"^65",["^V",[["~$a"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",559,"^69","^6E","^9",559,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the negation of a, throws ArithmeticException on overflow. "],"~$add64",["^ ","^61",null,"^5",["^ ","^64",true,"^6","cljs/math.cljs","^:",20,"^8",15,"^7",727,"^9",727,"^6D","^6E","^62",["^V",["^63",["^V",[["~$hx","~$lx","~$hy","~$ly"]]]]],"^;","Takes the high and low words for 2 different 64 bit integers, and adds them.\n  This handles overflow from the low-order words into the high order words."],"^64",true,"^K","^3Z","^6","cljs/math.cljs","^:",20,"^65",["^V",[["^7[","^80","^81","^82"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",727,"^69","^6E","^9",727,"^6;",4,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["^7[","^80","^81","^82"]]]]],"^;","Takes the high and low words for 2 different 64 bit integers, and adds them.\n  This handles overflow from the low-order words into the high order words."],"~$E",["^ ","^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",19,"^8",18,"^6>",true,"^7",10,"^9",10,"^6D","^6E","^;","Constant for Euler's number e, the base for natural logarithms.\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E"],"^6I","1.11.10","^K","^3?","^6","cljs/math.cljs","^:",19,"^8",1,"^6>",true,"^7",5,"^9",10,"^6D","^6E","^;","Constant for Euler's number e, the base for natural logarithms.\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E"],"~$xor",["^ ","^61",null,"^5",["^ ","^6","cljs/math.cljs","^7",567,"^8",8,"^9",567,"^:",11,"^64",true,"^62",["^V",["^63",["^V",[["~$a","~$b"]]]]]],"^64",true,"^K","^3A","^6","cljs/math.cljs","^:",11,"^65",["^V",[["~$a","~$b"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",567,"^69","^6:","^9",567,"^6;",2,"^6<",true,"^62",["^V",["^63",["^V",[["~$a","~$b"]]]]]],"~$EXP-MIN",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",41,"^8",35,"^9",41,"^:",42,"^64",true,"^6>",true],"^64",true,"^K","^3[","^6","cljs/math.cljs","^:",42,"^6?",["^ ","^M","^6>","^6@",-1022,"^6A",["^ ","^6B","^6C"],"^U",-1022,"^6D","^6E"],"^8",1,"^6>",true,"^7",41,"^9",41,"^6D","^6E"],"~$get-little-endian",["^ ","^61",null,"^5",["^ ","^6","cljs/math.cljs","^7",47,"^8",8,"^9",47,"^:",25,"^64",true,"^62",["^V",["^63",["^V",[[]]]]],"^;","Tests the platform for endianness. Returns true when little-endian, false otherwise."],"^64",true,"^K","^41","^6","cljs/math.cljs","^:",25,"^65",["^V",[[]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",47,"^69","^6:","^9",47,"^6;",0,"^6<",true,"^62",["^V",["^63",["^V",[[]]]]],"^;","Tests the platform for endianness. Returns true when little-endian, false otherwise."],"~$IEEE-remainder",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",29,"^8",15,"^7",335,"^9",335,"^6D","^6E","^62",["^V",["^63",["^V",[["~$dividend","~$divisor"]]]]],"^;","Returns the remainder per IEEE 754 such that\n    remainder = dividend - divisor * n\n   where n is the integer closest to the exact value of dividend / divisor.\n   If two integers are equally close, then n is the even one.\n   If the remainder is zero, sign will match dividend.\n   If dividend or divisor is ##NaN, or dividend is ##Inf or ##-Inf, or divisor is zero => ##NaN\n   If dividend is finite and divisor is infinite => dividend\n\n   Method: based on fmod return x-[x/p]chopped*p exactlp.\n   Ported from: https://github.com/openjdk/jdk/blob/master/src/java.base/share/native/libfdlibm/e_remainder.c\n   See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#IEEEremainder-double-double-"],"^6I","1.11.10","^K","^3C","^6","cljs/math.cljs","^:",29,"^65",["^V",[["^87","^88"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",335,"^69","^6E","^9",335,"^6;",2,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["^87","^88"]]]]],"^;","Returns the remainder per IEEE 754 such that\n    remainder = dividend - divisor * n\n   where n is the integer closest to the exact value of dividend / divisor.\n   If two integers are equally close, then n is the even one.\n   If the remainder is zero, sign will match dividend.\n   If dividend or divisor is ##NaN, or dividend is ##Inf or ##-Inf, or divisor is zero => ##NaN\n   If dividend is finite and divisor is infinite => dividend\n\n   Method: based on fmod return x-[x/p]chopped*p exactlp.\n   Ported from: https://github.com/openjdk/jdk/blob/master/src/java.base/share/native/libfdlibm/e_remainder.c\n   See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#IEEEremainder-double-double-"],"~$EXP-BIAS",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",35,"^8",35,"^9",35,"^:",43,"^64",true,"^6>",true],"^64",true,"^K","^1V","^6","cljs/math.cljs","^:",43,"^6?",["^ ","^M","^6>","^6@",1023,"^6A",["^ ","^6B","^6C"],"^U",1023,"^6D","^6E"],"^8",1,"^6>",true,"^7",35,"^9",35,"^6D","^6E"],"~$sinh",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",19,"^8",15,"^7",672,"^9",672,"^6D","^6E","^62",["^V",["^63",["^V",[["~$x"]]]]],"^;","Returns the hyperbolic sine of x, (e^x - e^-x)/2.\n  If x is ##NaN => ##NaN\n  If x is ##Inf or ##-Inf or zero => x\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh"],"^6I","1.11.10","^K","^1X","^6","cljs/math.cljs","^:",19,"^65",["^V",[["~$x"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",672,"^69","^6E","^9",672,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$x"]]]]],"^;","Returns the hyperbolic sine of x, (e^x - e^-x)/2.\n  If x is ##NaN => ##NaN\n  If x is ##Inf or ##-Inf or zero => x\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh"],"~$rint",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",19,"^8",15,"^7",465,"^9",465,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the double closest to a and equal to a mathematical integer.\n  If two values are equally close, return the even one.\n  If a is ##NaN or ##Inf or ##-Inf or zero => a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#rint-double-"],"^6I","1.11.10","^K","^1Y","^6","cljs/math.cljs","^:",19,"^65",["^V",[["~$a"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",465,"^69","^6E","^9",465,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the double closest to a and equal to a mathematical integer.\n  If two values are equally close, return the even one.\n  If a is ##NaN or ##Inf or ##-Inf or zero => a\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#rint-double-"],"~$ilogb",["^ ","^61",null,"^5",["^ ","^64",true,"^6","cljs/math.cljs","^:",20,"^8",15,"^7",227,"^9",227,"^6D","^6E","^62",["^V",["^63",["^V",[["^7[","^80"]]]]],"^;","internal function for ilogb(x)"],"^64",true,"^K","^44","^6","cljs/math.cljs","^:",20,"^65",["^V",[["^7[","^80"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",227,"^69","^6E","^9",227,"^6;",2,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["^7[","^80"]]]]],"^;","internal function for ilogb(x)"],"~$INT32-NON-SIGN-BITS",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",67,"^8",35,"^9",67,"^:",54,"^64",true,"^6>",true],"^64",true,"^K","^2R","^6","cljs/math.cljs","^:",54,"^6?",["^ ","^M","^6>","^6@",2147483647,"^6A",["^ ","^6B","^6C"],"^U",2147483647,"^6D","^6E"],"^8",1,"^6>",true,"^7",67,"^9",67,"^6D","^6E"],"~$DEGREES-TO-RADIANS",["^ ","^5",["^ ","^64",true,"^6I","1.11.10","^6","cljs/math.cljs","^:",36,"^8",18,"^6>",true,"^7",23,"^9",23,"^;","Constant used to convert an angular value in degrees to the equivalent in radians"],"^64",true,"^6I","1.11.10","^K","^3K","^6","cljs/math.cljs","^:",36,"^6?",["^ ","^M","^6>","^6@",0.017453292519943295,"^6A",["^ ","^6B","^6C"],"^U",0.017453292519943295,"^6D","^6E"],"^8",1,"^6>",true,"^7",19,"^9",23,"^6D","^6E","^;","Constant used to convert an angular value in degrees to the equivalent in radians"],"~$ulp",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",18,"^8",15,"^7",636,"^9",636,"^6D","^6E","^62",["^V",["^63",["^V",[["~$d"]]]]],"^;","Returns the size of an ulp (unit in last place) for d.\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => ##Inf\n  If d is zero => Number/MIN_VALUE\n  If d is +/- Number/MAX_VALUE => 2^971\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#ulp-double-"],"^6I","1.11.10","^K","^3M","^6","cljs/math.cljs","^:",18,"^65",["^V",[["~$d"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",636,"^69","^6E","^9",636,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$d"]]]]],"^;","Returns the size of an ulp (unit in last place) for d.\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => ##Inf\n  If d is zero => Number/MIN_VALUE\n  If d is +/- Number/MAX_VALUE => 2^971\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#ulp-double-"],"~$sin",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",18,"^8",15,"^7",80,"^9",80,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the sine of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin"],"^6I","1.11.10","^K","^2U","^6","cljs/math.cljs","^:",18,"^65",["^V",[["~$a"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",80,"^69","^6E","^9",80,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns the sine of an angle.\n  If a is ##NaN, ##-Inf, ##Inf => ##NaN\n  If a is zero => zero with the same sign as a\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin"],"~$HI-x",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",222,"^8",23,"^9",222,"^:",27,"^64",true],"^64",true,"^K","^3Q","^6","cljs/math.cljs","^:",27,"^8",1,"^7",222,"^9",222,"^6D","^6E"],"~$HI-y",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",224,"^8",23,"^9",224,"^:",27,"^64",true],"^64",true,"^K","^1D","^6","cljs/math.cljs","^:",27,"^8",1,"^7",224,"^9",224,"^6D","^6E"],"~$increment-exact",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",30,"^8",15,"^7",543,"^9",543,"^6D","^6E","^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns a incremented by 1, throws ArithmeticException on overflow."],"^6I","1.11.10","^K","^2Z","^6","cljs/math.cljs","^:",30,"^65",["^V",[["~$a"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",543,"^69","^6E","^9",543,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$a"]]]]],"^;","Returns a incremented by 1, throws ArithmeticException on overflow."],"~$random",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",21,"^8",15,"^7",508,"^9",508,"^6D","^6E","^62",["^V",["^63",["^V",[[]]]]],"^;","Returns a positive double between 0.0 and 1.0, chosen pseudorandomly with\n  approximately random distribution. Not cryptographically secure. The seed is chosen internally\n  and cannot be selected.\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random"],"^6I","1.11.10","^K","^2[","^6","cljs/math.cljs","^:",21,"^65",["^V",[[]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",508,"^69","^6E","^9",508,"^6;",0,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[[]]]]],"^;","Returns a positive double between 0.0 and 1.0, chosen pseudorandomly with\n  approximately random distribution. Not cryptographically secure. The seed is chosen internally\n  and cannot be selected.\n  See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random"],"~$floor-div",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",24,"^8",15,"^7",571,"^9",571,"^6D","^6E","^62",["^V",["^63",["^V",[["~$x","~$y"]]]]],"^;","Integer division that rounds to negative infinity (as opposed to zero).\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorDiv-long-long-"],"^6I","1.11.10","^K","^1H","^6","cljs/math.cljs","^:",24,"^65",["^V",[["~$x","~$y"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",571,"^69","^6E","^9",571,"^6;",2,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$x","~$y"]]]]],"^;","Integer division that rounds to negative infinity (as opposed to zero).\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#floorDiv-long-long-"],"~$signum",["^ ","^61",null,"^5",["^ ","^6I","1.11.10","^6","cljs/math.cljs","^:",21,"^8",15,"^7",661,"^9",661,"^6D","^6E","^62",["^V",["^63",["^V",[["~$d"]]]]],"^;","Returns the signum function of d - zero for zero, 1.0 if >0, -1.0 if <0.\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => sign of d\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#signum-double-"],"^6I","1.11.10","^K","^30","^6","cljs/math.cljs","^:",21,"^65",["^V",[["~$d"]]],"^66",null,"^67",["^V",[null,null]],"^8",1,"^68",false,"^7",661,"^69","^6E","^9",661,"^6;",1,"^6D","^6E","^6<",true,"^62",["^V",["^63",["^V",[["~$d"]]]]],"^;","Returns the signum function of d - zero for zero, 1.0 if >0, -1.0 if <0.\n  If d is ##NaN => ##NaN\n  If d is ##Inf or ##-Inf => sign of d\n  See: https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#signum-double-"],"~$LO",["^ ","^5",["^ ","^6","cljs/math.cljs","^7",61,"^8",69,"^9",61,"^:",71,"^64",true,"^;","offset of hi integers in 64-bit values"],"^64",true,"^K","^3V","^6","cljs/math.cljs","^:",71,"^8",1,"^7",61,"^9",61,"^6D","^6E","^;","offset of hi integers in 64-bit values"]],"^T",["^ ","^G","^G"],"~:cljs.analyzer/constants",["^ ","^R",["^J",["~:zero","~:x-int?","~:fn","~:default","~:y-int?"]],"~:order",["^8L","^8I","^8K","^8J","^8M"]],"^X",["^ "],"^Y",["^ "],"^Z",["^Q","^G"]],"^N","^E","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^47",[["^8Q","~:static-fns"],true,["^8Q","~:shadow-tweaks"],null,["^8Q","~:source-map-inline"],null,["^8Q","~:elide-asserts"],false,["^8Q","~:optimize-constants"],null,["^8Q","^13"],null,["^8Q","~:external-config"],null,["^8Q","~:tooling-config"],null,["^8Q","~:emit-constants"],null,["^8Q","~:load-tests"],null,["^8Q","~:form-size-threshold"],null,["^8Q","~:global-goog-object&array"],null,["^8Q","~:data-readers"],null,["^8Q","~:infer-externs"],"~:auto",["^8Q","^15"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^8Q","~:fn-invoke-direct"],null,["^8Q","~:source-map"],"/dev/null"]]]