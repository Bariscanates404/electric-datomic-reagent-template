["^ ","~:output",["^ ","~:js","goog.provide('missionary.impl.Ambiguous');\n\n\n\n\n\n\n/**\n* @constructor\n * @implements {cljs.core.IFn}\n * @implements {cljs.core.IDeref}\n*/\nmissionary.impl.Ambiguous.Process = (function (notifier,terminator,head,tail,child){\nthis.notifier = notifier;\nthis.terminator = terminator;\nthis.head = head;\nthis.tail = tail;\nthis.child = child;\nthis.cljs$lang$protocol_mask$partition0$ = 32769;\nthis.cljs$lang$protocol_mask$partition1$ = 0;\n});\n(missionary.impl.Ambiguous.Process.prototype.call = (function (unused__14959__auto__){\nvar self__ = this;\nvar self__ = this;\nvar G__29385 = (arguments.length - (1));\nswitch (G__29385) {\ncase (0):\nreturn self__.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1((arguments.length - (1)))].join('')));\n\n}\n}));\n\n(missionary.impl.Ambiguous.Process.prototype.apply = (function (self__,args29383){\nvar self__ = this;\nvar self____$1 = this;\nreturn self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args29383)));\n}));\n\n(missionary.impl.Ambiguous.Process.prototype.cljs$core$IFn$_invoke$arity$0 = (function (){\nvar self__ = this;\nvar this$ = this;\n(missionary.impl.Ambiguous.kill.cljs$core$IFn$_invoke$arity$1 ? missionary.impl.Ambiguous.kill.cljs$core$IFn$_invoke$arity$1(this$) : missionary.impl.Ambiguous.kill.call(null,this$));\n\nreturn null;\n}));\n\n(missionary.impl.Ambiguous.Process.prototype.cljs$core$IDeref$_deref$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn (missionary.impl.Ambiguous.transfer.cljs$core$IFn$_invoke$arity$1 ? missionary.impl.Ambiguous.transfer.cljs$core$IFn$_invoke$arity$1(this$__$1) : missionary.impl.Ambiguous.transfer.call(null,this$__$1));\n}));\n\n(missionary.impl.Ambiguous.Process.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"notifier\",\"notifier\",1670358652,null),new cljs.core.Symbol(null,\"terminator\",\"terminator\",-1051388676,null),new cljs.core.Symbol(null,\"head\",\"head\",869147608,null),new cljs.core.Symbol(null,\"tail\",\"tail\",494507963,null),new cljs.core.Symbol(null,\"child\",\"child\",-2030468224,null)], null);\n}));\n\n(missionary.impl.Ambiguous.Process.cljs$lang$type = true);\n\n(missionary.impl.Ambiguous.Process.cljs$lang$ctorStr = \"missionary.impl.Ambiguous/Process\");\n\n(missionary.impl.Ambiguous.Process.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\nreturn cljs.core._write(writer__5331__auto__,\"missionary.impl.Ambiguous/Process\");\n}));\n\n/**\n * Positional factory function for missionary.impl.Ambiguous/Process.\n */\nmissionary.impl.Ambiguous.__GT_Process = (function missionary$impl$Ambiguous$__GT_Process(notifier,terminator,head,tail,child){\nreturn (new missionary.impl.Ambiguous.Process(notifier,terminator,head,tail,child));\n});\n\n\n/**\n* @constructor\n * @implements {missionary.impl.Fiber.Fiber}\n*/\nmissionary.impl.Ambiguous.Branch = (function (parent,prev,next,queue,choice,current){\nthis.parent = parent;\nthis.prev = prev;\nthis.next = next;\nthis.queue = queue;\nthis.choice = choice;\nthis.current = current;\n});\n(missionary.impl.Ambiguous.Branch.prototype.missionary$impl$Fiber$Fiber$ = cljs.core.PROTOCOL_SENTINEL);\n\n(missionary.impl.Ambiguous.Branch.prototype.missionary$impl$Fiber$Fiber$check$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nif(cljs.core.truth_(self__.choice.live)){\nreturn null;\n} else {\nthrow (new missionary.Cancelled(\"Process cancelled.\"));\n}\n}));\n\n(missionary.impl.Ambiguous.Branch.prototype.missionary$impl$Fiber$Fiber$park$arity$2 = (function (this$,task){\nvar self__ = this;\nvar this$__$1 = this;\nreturn (missionary.impl.Ambiguous.suspend.cljs$core$IFn$_invoke$arity$3 ? missionary.impl.Ambiguous.suspend.cljs$core$IFn$_invoke$arity$3(this$__$1,null,task) : missionary.impl.Ambiguous.suspend.call(null,this$__$1,null,task));\n}));\n\n(missionary.impl.Ambiguous.Branch.prototype.missionary$impl$Fiber$Fiber$swich$arity$2 = (function (this$,flow){\nvar self__ = this;\nvar this$__$1 = this;\nreturn (missionary.impl.Ambiguous.suspend.cljs$core$IFn$_invoke$arity$3 ? missionary.impl.Ambiguous.suspend.cljs$core$IFn$_invoke$arity$3(this$__$1,(-1),flow) : missionary.impl.Ambiguous.suspend.call(null,this$__$1,(-1),flow));\n}));\n\n(missionary.impl.Ambiguous.Branch.prototype.missionary$impl$Fiber$Fiber$fork$arity$3 = (function (this$,par,flow){\nvar self__ = this;\nvar this$__$1 = this;\nreturn (missionary.impl.Ambiguous.suspend.cljs$core$IFn$_invoke$arity$3 ? missionary.impl.Ambiguous.suspend.cljs$core$IFn$_invoke$arity$3(this$__$1,par,flow) : missionary.impl.Ambiguous.suspend.call(null,this$__$1,par,flow));\n}));\n\n(missionary.impl.Ambiguous.Branch.prototype.missionary$impl$Fiber$Fiber$unpark$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn (missionary.impl.Ambiguous.resume.cljs$core$IFn$_invoke$arity$1 ? missionary.impl.Ambiguous.resume.cljs$core$IFn$_invoke$arity$1(this$__$1) : missionary.impl.Ambiguous.resume.call(null,this$__$1));\n}));\n\n(missionary.impl.Ambiguous.Branch.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"parent\",\"parent\",761652748,null),new cljs.core.Symbol(null,\"prev\",\"prev\",43462301,null),new cljs.core.Symbol(null,\"next\",\"next\",1522830042,null),new cljs.core.Symbol(null,\"queue\",\"queue\",-1198599890,null),new cljs.core.Symbol(null,\"choice\",\"choice\",265360800,null),new cljs.core.Symbol(null,\"current\",\"current\",552492924,null)], null);\n}));\n\n(missionary.impl.Ambiguous.Branch.cljs$lang$type = true);\n\n(missionary.impl.Ambiguous.Branch.cljs$lang$ctorStr = \"missionary.impl.Ambiguous/Branch\");\n\n(missionary.impl.Ambiguous.Branch.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\nreturn cljs.core._write(writer__5331__auto__,\"missionary.impl.Ambiguous/Branch\");\n}));\n\n/**\n * Positional factory function for missionary.impl.Ambiguous/Branch.\n */\nmissionary.impl.Ambiguous.__GT_Branch = (function missionary$impl$Ambiguous$__GT_Branch(parent,prev,next,queue,choice,current){\nreturn (new missionary.impl.Ambiguous.Branch(parent,prev,next,queue,choice,current));\n});\n\n\n/**\n* @constructor\n*/\nmissionary.impl.Ambiguous.Choice = (function (branch,prev,next,coroutine,iterator,parallelism,live,busy,done){\nthis.branch = branch;\nthis.prev = prev;\nthis.next = next;\nthis.coroutine = coroutine;\nthis.iterator = iterator;\nthis.parallelism = parallelism;\nthis.live = live;\nthis.busy = busy;\nthis.done = done;\n});\n\n(missionary.impl.Ambiguous.Choice.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"branch\",\"branch\",1565897602,null),new cljs.core.Symbol(null,\"prev\",\"prev\",43462301,null),new cljs.core.Symbol(null,\"next\",\"next\",1522830042,null),new cljs.core.Symbol(null,\"coroutine\",\"coroutine\",-775901756,null),new cljs.core.Symbol(null,\"iterator\",\"iterator\",-32550441,null),cljs.core.with_meta(new cljs.core.Symbol(null,\"parallelism\",\"parallelism\",709609194,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"number\",\"number\",-1084057331,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"live\",\"live\",30383488,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"boolean\",\"boolean\",-278886877,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"busy\",\"busy\",1312244726,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"boolean\",\"boolean\",-278886877,null)], null)),cljs.core.with_meta(new cljs.core.Symbol(null,\"done\",\"done\",750687339,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),new cljs.core.Symbol(null,\"boolean\",\"boolean\",-278886877,null)], null))], null);\n}));\n\n(missionary.impl.Ambiguous.Choice.cljs$lang$type = true);\n\n(missionary.impl.Ambiguous.Choice.cljs$lang$ctorStr = \"missionary.impl.Ambiguous/Choice\");\n\n(missionary.impl.Ambiguous.Choice.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\nreturn cljs.core._write(writer__5331__auto__,\"missionary.impl.Ambiguous/Choice\");\n}));\n\n/**\n * Positional factory function for missionary.impl.Ambiguous/Choice.\n */\nmissionary.impl.Ambiguous.__GT_Choice = (function missionary$impl$Ambiguous$__GT_Choice(branch,prev,next,coroutine,iterator,parallelism,live,busy,done){\nreturn (new missionary.impl.Ambiguous.Choice(branch,prev,next,coroutine,iterator,parallelism,live,busy,done));\n});\n\n\n/**\n* @constructor\n*/\nmissionary.impl.Ambiguous.Processor = (function (branch,prev,next,child){\nthis.branch = branch;\nthis.prev = prev;\nthis.next = next;\nthis.child = child;\n});\n\n(missionary.impl.Ambiguous.Processor.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"branch\",\"branch\",1565897602,null),new cljs.core.Symbol(null,\"prev\",\"prev\",43462301,null),new cljs.core.Symbol(null,\"next\",\"next\",1522830042,null),new cljs.core.Symbol(null,\"child\",\"child\",-2030468224,null)], null);\n}));\n\n(missionary.impl.Ambiguous.Processor.cljs$lang$type = true);\n\n(missionary.impl.Ambiguous.Processor.cljs$lang$ctorStr = \"missionary.impl.Ambiguous/Processor\");\n\n(missionary.impl.Ambiguous.Processor.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\nreturn cljs.core._write(writer__5331__auto__,\"missionary.impl.Ambiguous/Processor\");\n}));\n\n/**\n * Positional factory function for missionary.impl.Ambiguous/Processor.\n */\nmissionary.impl.Ambiguous.__GT_Processor = (function missionary$impl$Ambiguous$__GT_Processor(branch,prev,next,child){\nreturn (new missionary.impl.Ambiguous.Processor(branch,prev,next,child));\n});\n\nmissionary.impl.Ambiguous.nop = (function missionary$impl$Ambiguous$nop(){\nreturn null;\n});\nmissionary.impl.Ambiguous.boot = (function missionary$impl$Ambiguous$boot(cr,c){\n(c.coroutine = cr);\n\nreturn (missionary.impl.Ambiguous.ready.cljs$core$IFn$_invoke$arity$1 ? missionary.impl.Ambiguous.ready.cljs$core$IFn$_invoke$arity$1(c) : missionary.impl.Ambiguous.ready.call(null,c));\n});\nmissionary.impl.Ambiguous.backtrack = (function missionary$impl$Ambiguous$backtrack(p,b,c){\ntry{(c.iterator = missionary.impl.Ambiguous.nop);\n\n(b.choice = c);\n\n(b.current = cljs.core.deref(p.iterator));\n\nvar fexpr__29499 = p.coroutine;\nreturn (fexpr__29499.cljs$core$IFn$_invoke$arity$2 ? fexpr__29499.cljs$core$IFn$_invoke$arity$2(missionary.impl.Ambiguous.boot,c) : fexpr__29499.call(null,missionary.impl.Ambiguous.boot,c));\n}catch (e29497){var e = e29497;\n(c.done = true);\n\n(b.current = e);\n\nreturn missionary.impl.Ambiguous.boot(p.coroutine,c);\n}});\nmissionary.impl.Ambiguous.choose = (function missionary$impl$Ambiguous$choose(p){\nvar b = p.branch;\nvar n = p.next;\nreturn missionary.impl.Ambiguous.backtrack(p,b,(n.prev = (p.next = missionary.impl.Ambiguous.__GT_Choice(b,p,n,null,null,null,p.live,false,false))));\n});\nmissionary.impl.Ambiguous.branch = (function missionary$impl$Ambiguous$branch(p){\n(p.parallelism = (p.parallelism - (1)));\n\nvar parent = p.branch;\nvar prev = parent.current;\nvar curr = missionary.impl.Ambiguous.__GT_Processor(parent,null,null,null);\nvar b = missionary.impl.Ambiguous.__GT_Branch(curr,null,null,null,null,null);\nvar c = missionary.impl.Ambiguous.__GT_Choice(b,null,null,null,null,null,p.live,false,false);\n(parent.current = curr);\n\nif((prev == null)){\n(curr.next = (curr.prev = curr));\n} else {\nvar next_29790 = prev.next;\n(prev.next = (next_29790.prev = curr));\n\n(curr.prev = prev);\n\n(curr.next = next_29790);\n}\n\n(curr.child = (b.next = (b.prev = b)));\n\nreturn missionary.impl.Ambiguous.backtrack(p,b,(c.next = (c.prev = c)));\n});\nmissionary.impl.Ambiguous.root = (function missionary$impl$Ambiguous$root(b){\nvar node = b.parent;\nwhile(true){\nif((node instanceof missionary.impl.Ambiguous.Processor)){\nvar G__29796 = node.branch.parent;\nnode = G__29796;\ncontinue;\n} else {\nif((node instanceof missionary.impl.Ambiguous.Branch)){\nvar G__29797 = node.parent;\nnode = G__29797;\ncontinue;\n} else {\nreturn node;\n}\n}\nbreak;\n}\n});\nmissionary.impl.Ambiguous.kill = (function missionary$impl$Ambiguous$kill(ps){\nvar temp__5808__auto__ = ps.child;\nif((temp__5808__auto__ == null)){\nreturn null;\n} else {\nvar b = temp__5808__auto__;\nvar G__29526 = b.next;\nreturn (missionary.impl.Ambiguous.walk.cljs$core$IFn$_invoke$arity$1 ? missionary.impl.Ambiguous.walk.cljs$core$IFn$_invoke$arity$1(G__29526) : missionary.impl.Ambiguous.walk.call(null,G__29526));\n}\n});\nmissionary.impl.Ambiguous.cancel = (function missionary$impl$Ambiguous$cancel(c){\nvar b = c.branch;\nvar c__$1 = c;\nwhile(true){\nif(cljs.core.truth_(c__$1.live)){\n(c__$1.live = false);\n\nvar fexpr__29538_29798 = c__$1.iterator;\n(fexpr__29538_29798.cljs$core$IFn$_invoke$arity$0 ? fexpr__29538_29798.cljs$core$IFn$_invoke$arity$0() : fexpr__29538_29798.call(null));\n\nvar temp__5808__auto__ = b.choice;\nif((temp__5808__auto__ == null)){\nreturn null;\n} else {\nvar t = temp__5808__auto__;\nvar c__$2 = (function (){var c__$2 = c__$1;\nwhile(true){\nvar c__$3 = c__$2.next;\nif((c__$3.prev == null)){\nvar G__29799 = c__$3;\nc__$2 = G__29799;\ncontinue;\n} else {\nreturn c__$3;\n}\nbreak;\n}\n})();\nif((c__$2 === t.next)){\nvar curr = b.current;\nif((curr instanceof missionary.impl.Ambiguous.Processor)){\nvar pr = curr;\nwhile(true){\nvar G__29556_29801 = pr.child.next;\n(missionary.impl.Ambiguous.walk.cljs$core$IFn$_invoke$arity$1 ? missionary.impl.Ambiguous.walk.cljs$core$IFn$_invoke$arity$1(G__29556_29801) : missionary.impl.Ambiguous.walk.call(null,G__29556_29801));\n\nvar temp__5808__auto____$1 = b.current;\nif((temp__5808__auto____$1 == null)){\nreturn null;\n} else {\nvar curr__$1 = temp__5808__auto____$1;\nvar pr__$1 = (function (){var pr__$1 = pr;\nwhile(true){\nvar pr__$2 = pr__$1.next;\nif((pr__$2.prev == null)){\nvar G__29803 = pr__$2;\npr__$1 = G__29803;\ncontinue;\n} else {\nreturn pr__$2;\n}\nbreak;\n}\n})();\nif((pr__$1 === curr__$1.next)){\nreturn null;\n} else {\nvar G__29804 = pr__$1;\npr = G__29804;\ncontinue;\n}\n}\nbreak;\n}\n} else {\nif((curr instanceof missionary.impl.Ambiguous.Branch)){\nvar G__29567 = curr.next;\nreturn (missionary.impl.Ambiguous.walk.cljs$core$IFn$_invoke$arity$1 ? missionary.impl.Ambiguous.walk.cljs$core$IFn$_invoke$arity$1(G__29567) : missionary.impl.Ambiguous.walk.call(null,G__29567));\n} else {\nreturn null;\n}\n}\n} else {\nvar G__29808 = c__$2;\nc__$1 = G__29808;\ncontinue;\n}\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});\nmissionary.impl.Ambiguous.walk = (function missionary$impl$Ambiguous$walk(b){\nvar b__$1 = b;\nwhile(true){\nmissionary.impl.Ambiguous.cancel(b__$1.choice.next);\n\nvar node = b__$1.parent;\nvar temp__5808__auto__ = (((node instanceof missionary.impl.Ambiguous.Processor))?node.child:(((node instanceof missionary.impl.Ambiguous.Branch))?node.current:node.child));\nif((temp__5808__auto__ == null)){\nreturn null;\n} else {\nvar t = temp__5808__auto__;\nvar b__$2 = (function (){var b__$2 = b__$1;\nwhile(true){\nvar b__$3 = b__$2.next;\nif((b__$3.prev == null)){\nvar G__29823 = b__$3;\nb__$2 = G__29823;\ncontinue;\n} else {\nreturn b__$3;\n}\nbreak;\n}\n})();\nif((b__$2 === t.next)){\nreturn null;\n} else {\nvar G__29828 = b__$2;\nb__$1 = G__29828;\ncontinue;\n}\n}\nbreak;\n}\n});\nmissionary.impl.Ambiguous.move = (function missionary$impl$Ambiguous$move(x,y){\nvar p_29829 = x.parent;\nvar b_29831 = y;\nwhile(true){\nvar b_29832__$1 = b_29831.next;\n(b_29832__$1.parent = p_29829);\n\nif((b_29832__$1 === y)){\n} else {\nvar G__29834 = b_29832__$1;\nb_29831 = G__29834;\ncontinue;\n}\nbreak;\n}\n\nvar xx = x.next;\nvar yy = y.next;\n(x.next = yy);\n\n(yy.prev = x);\n\n(y.next = xx);\n\nreturn (xx.prev = y);\n});\nmissionary.impl.Ambiguous.discard = (function missionary$impl$Ambiguous$discard(b){\nvar parent = b.parent;\nvar prev = b.prev;\nvar next = b.next;\n(b.prev = null);\n\n(b.choice = null);\n\n(b.current = null);\n\nif((parent instanceof missionary.impl.Ambiguous.Branch)){\nvar br = parent;\nif((b === prev)){\nvar c = br.choice;\n(b.current = null);\n\nif(cljs.core.truth_(c.busy)){\nif(cljs.core.truth_(c.done)){\n(c.busy = false);\n\n(c.done = false);\n\nreturn missionary.impl.Ambiguous.choose(c);\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n} else {\n(prev.next = next);\n\n(next.prev = prev);\n\nif((b === br.current)){\n(br.current = prev);\n} else {\n}\n\nreturn null;\n}\n} else {\nif((parent instanceof missionary.impl.Ambiguous.Processor)){\nvar pr = parent;\nif((b === prev)){\nvar b__$1 = pr.branch;\nvar c = b__$1.choice;\nvar p = pr.prev;\nvar n = pr.next;\n(pr.child = null);\n\n(pr.prev = null);\n\nif((pr === p)){\n(b__$1.current = null);\n} else {\n(p.next = n);\n\n(n.prev = p);\n\n(b__$1.current = p);\n}\n\n(c.parallelism = (c.parallelism + (1)));\n\nif(cljs.core.truth_(c.busy)){\nif(cljs.core.truth_(c.done)){\n(c.busy = false);\n\n(c.done = false);\n\nreturn missionary.impl.Ambiguous.branch(c);\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n} else {\n(prev.next = next);\n\n(next.prev = prev);\n\nif((b === pr.child)){\n(pr.child = prev);\n} else {\n}\n\nreturn null;\n}\n} else {\nvar ps = parent;\nif((b === prev)){\n(ps.child = null);\n\nreturn ps.terminator;\n} else {\n(prev.next = next);\n\n(next.prev = prev);\n\nif((b === ps.child)){\n(ps.child = prev);\n} else {\n}\n\nreturn null;\n}\n}\n}\n});\nmissionary.impl.Ambiguous.ack = (function missionary$impl$Ambiguous$ack(c){\nif(cljs.core.truth_(c.busy)){\nif(cljs.core.truth_(c.done)){\n(c.busy = false);\n\n(c.done = false);\n\nif((c.parallelism < (0))){\nreturn missionary.impl.Ambiguous.choose(c);\n} else {\nreturn missionary.impl.Ambiguous.branch(c);\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\nmissionary.impl.Ambiguous.done = (function missionary$impl$Ambiguous$done(b){\nvar c = b.choice;\nvar p = c.prev;\n(c.prev = null);\n\n(b.queue = null);\n\nif((p === c)){\nreturn missionary.impl.Ambiguous.discard(b);\n} else {\nvar n = c.next;\n(n.prev = p);\n\n(p.next = n);\n\n(b.choice = p);\n\n(b.current = null);\n\nreturn missionary.impl.Ambiguous.ack(p);\n}\n});\nmissionary.impl.Ambiguous.all = (function missionary$impl$Ambiguous$all(n){\nvar n__$1 = n;\nvar cb = null;\nwhile(true){\nif((n__$1 == null)){\nreturn cb;\n} else {\nvar G__29840 = n__$1.queue;\nvar G__29841 = missionary.impl.Ambiguous.done(n__$1);\nn__$1 = G__29840;\ncb = G__29841;\ncontinue;\n}\nbreak;\n}\n});\nmissionary.impl.Ambiguous.transfer = (function missionary$impl$Ambiguous$transfer(ps){\nvar b = ps.head;\nvar q = b.queue;\nvar x = b.current;\nvar temp__5808__auto___29842 = (cljs.core.truth_(b.choice.done)?(function (){\n(ps.notifier = null);\n\nmissionary.impl.Ambiguous.kill(ps);\n\nvar cb = missionary.impl.Ambiguous.done(b);\nvar cb__$1 = (((cb == null))?missionary.impl.Ambiguous.all(q):cb);\nvar cb__$2 = (((cb__$1 == null))?missionary.impl.Ambiguous.all(ps.tail):cb__$1);\n(ps.head = null);\n\n(ps.tail = null);\n\nreturn cb__$2;\n})()\n:(function (){var cb = missionary.impl.Ambiguous.done(b);\nif((q == null)){\nvar temp__5806__auto__ = ps.tail;\nif((temp__5806__auto__ == null)){\n(ps.head = null);\n\nreturn cb;\n} else {\nvar prev = temp__5806__auto__;\n(ps.tail = null);\n\n(ps.head = (function (){var prev__$1 = prev;\nvar next = null;\nwhile(true){\nvar swap = prev__$1.queue;\n(prev__$1.queue = next);\n\nif((swap == null)){\nreturn prev__$1;\n} else {\nvar G__29850 = swap;\nvar G__29851 = prev__$1;\nprev__$1 = G__29850;\nnext = G__29851;\ncontinue;\n}\nbreak;\n}\n})());\n\nreturn ps.notifier;\n}\n} else {\n(ps.head = q);\n\nreturn ps.notifier;\n}\n})());\nif((temp__5808__auto___29842 == null)){\n} else {\nvar cb_29853 = temp__5808__auto___29842;\n(cb_29853.cljs$core$IFn$_invoke$arity$0 ? cb_29853.cljs$core$IFn$_invoke$arity$0() : cb_29853.call(null));\n}\n\nif((ps.notifier == null)){\nthrow x;\n} else {\nreturn x;\n}\n});\nmissionary.impl.Ambiguous.ready = (function missionary$impl$Ambiguous$ready(c){\nif(cljs.core.truth_((c.busy = cljs.core.not(c.busy)))){\nwhile(true){\nvar b = c.branch;\nvar par = c.parallelism;\nvar curr = b.current;\nif((par == null)){\nvar prev = missionary.impl.Fiber.fiber;\nvar x = (function (){try{(missionary.impl.Fiber.fiber = b);\n\nvar fexpr__29717 = c.coroutine;\nreturn (fexpr__29717.cljs$core$IFn$_invoke$arity$0 ? fexpr__29717.cljs$core$IFn$_invoke$arity$0() : fexpr__29717.call(null));\n}catch (e29711){var e = e29711;\n(c.done = true);\n\nreturn e;\n}})();\n(missionary.impl.Fiber.fiber = prev);\n\nif((x === b)){\nif(cljs.core.truth_((c.busy = cljs.core.not(c.busy)))){\ncontinue;\n} else {\nreturn null;\n}\n} else {\nvar ps = missionary.impl.Ambiguous.root(b);\n(b.current = x);\n\nvar temp__5806__auto__ = ps.notifier;\nif((temp__5806__auto__ == null)){\nreturn missionary.impl.Ambiguous.done(b);\n} else {\nvar n = temp__5806__auto__;\nif((ps.head == null)){\n(ps.head = b);\n\nreturn n;\n} else {\n(b.queue = ps.tail);\n\n(ps.tail = b);\n\nreturn null;\n}\n}\n}\n} else {\nif(cljs.core.truth_(c.done)){\nvar p = c.prev;\n(c.prev = null);\n\nif((c === p)){\nif((curr instanceof missionary.impl.Ambiguous.Branch)){\nmissionary.impl.Ambiguous.move(b,curr);\n} else {\nif((curr instanceof missionary.impl.Ambiguous.Processor)){\nvar pr_29865 = curr;\nwhile(true){\nvar pr_29866__$1 = pr_29865.next;\nmissionary.impl.Ambiguous.move(b,pr_29866__$1.child);\n\nif((pr_29866__$1 === b.current)){\n} else {\nvar G__29867 = pr_29866__$1;\npr_29865 = G__29867;\ncontinue;\n}\nbreak;\n}\n} else {\n}\n}\n\nreturn missionary.impl.Ambiguous.discard(b);\n} else {\nvar n = c.next;\n(n.prev = p);\n\n(p.next = n);\n\nif((c === b.choice)){\n(b.choice = p);\n\nif((curr == null)){\nreturn missionary.impl.Ambiguous.ack(p);\n} else {\nif((curr instanceof missionary.impl.Ambiguous.Processor)){\nvar pivot = cljs.core.pr.child;\n(b.current = pivot);\n\n(pivot.parent = b);\n\nvar pr_29869 = curr;\nwhile(true){\nvar pr_29870__$1 = pr_29869.next;\nif((pr_29870__$1 === curr)){\n} else {\nmissionary.impl.Ambiguous.move(pivot,pr_29870__$1.child);\n}\nbreak;\n}\n\n(cljs.core.pr.prev = cljs.core.pr);\n\n(cljs.core.pr.next = cljs.core.pr);\n\nreturn null;\n} else {\nreturn null;\n}\n}\n} else {\nreturn null;\n}\n}\n} else {\nif((par > (0))){\n(c.busy = false);\n\nreturn missionary.impl.Ambiguous.branch(c);\n} else {\nif((par < (0))){\nif((c === b.choice)){\nif((curr == null)){\n(c.busy = false);\n\nreturn missionary.impl.Ambiguous.choose(c);\n} else {\n(c.done = true);\n\nmissionary.impl.Ambiguous.walk(curr.next);\n\nreturn null;\n}\n} else {\n(c.done = true);\n\nmissionary.impl.Ambiguous.cancel(c.next);\n\nreturn null;\n}\n} else {\n(c.done = true);\n\nreturn null;\n}\n}\n}\n}\nbreak;\n}\n} else {\nreturn null;\n}\n});\nmissionary.impl.Ambiguous.suspend = (function missionary$impl$Ambiguous$suspend(b,par,flow){\nvar c = b.choice;\n(c.parallelism = par);\n\n(c.iterator = (function (){var G__29735 = (function() {\nvar G__29878 = null;\nvar G__29878__0 = (function (){\nvar temp__5808__auto__ = missionary.impl.Ambiguous.ready(c);\nif((temp__5808__auto__ == null)){\nreturn null;\n} else {\nvar cb = temp__5808__auto__;\nreturn (cb.cljs$core$IFn$_invoke$arity$0 ? cb.cljs$core$IFn$_invoke$arity$0() : cb.call(null));\n}\n});\nvar G__29878__1 = (function (x){\n(c.branch.current = x);\n\nvar temp__5808__auto__ = missionary.impl.Ambiguous.ready(c);\nif((temp__5808__auto__ == null)){\nreturn null;\n} else {\nvar cb = temp__5808__auto__;\nreturn (cb.cljs$core$IFn$_invoke$arity$0 ? cb.cljs$core$IFn$_invoke$arity$0() : cb.call(null));\n}\n});\nG__29878 = function(x){\nswitch(arguments.length){\ncase 0:\nreturn G__29878__0.call(this);\ncase 1:\nreturn G__29878__1.call(this,x);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__29878.cljs$core$IFn$_invoke$arity$0 = G__29878__0;\nG__29878.cljs$core$IFn$_invoke$arity$1 = G__29878__1;\nreturn G__29878;\n})()\n;\nvar G__29736 = (function() {\nvar G__29887 = null;\nvar G__29887__0 = (function (){\n(c.done = true);\n\nvar temp__5808__auto__ = missionary.impl.Ambiguous.ready(c);\nif((temp__5808__auto__ == null)){\nreturn null;\n} else {\nvar cb = temp__5808__auto__;\nreturn (cb.cljs$core$IFn$_invoke$arity$0 ? cb.cljs$core$IFn$_invoke$arity$0() : cb.call(null));\n}\n});\nvar G__29887__1 = (function (x){\n(c.done = true);\n\n(c.branch.current = x);\n\nvar temp__5808__auto__ = missionary.impl.Ambiguous.ready(c);\nif((temp__5808__auto__ == null)){\nreturn null;\n} else {\nvar cb = temp__5808__auto__;\nreturn (cb.cljs$core$IFn$_invoke$arity$0 ? cb.cljs$core$IFn$_invoke$arity$0() : cb.call(null));\n}\n});\nG__29887 = function(x){\nswitch(arguments.length){\ncase 0:\nreturn G__29887__0.call(this);\ncase 1:\nreturn G__29887__1.call(this,x);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__29887.cljs$core$IFn$_invoke$arity$0 = G__29887__0;\nG__29887.cljs$core$IFn$_invoke$arity$1 = G__29887__1;\nreturn G__29887;\n})()\n;\nreturn (flow.cljs$core$IFn$_invoke$arity$2 ? flow.cljs$core$IFn$_invoke$arity$2(G__29735,G__29736) : flow.call(null,G__29735,G__29736));\n})());\n\nif(cljs.core.truth_(c.live)){\n} else {\nvar fexpr__29744_29889 = c.iterator;\n(fexpr__29744_29889.cljs$core$IFn$_invoke$arity$0 ? fexpr__29744_29889.cljs$core$IFn$_invoke$arity$0() : fexpr__29744_29889.call(null));\n}\n\nreturn b;\n});\nmissionary.impl.Ambiguous.resume = (function missionary$impl$Ambiguous$resume(b){\nvar c = b.choice;\nvar x = b.current;\n(b.current = null);\n\nif(cljs.core.truth_(c.done)){\n(c.done = false);\n\nthrow x;\n} else {\n}\n\nreturn x;\n});\nmissionary.impl.Ambiguous.run = (function missionary$impl$Ambiguous$run(cr,n,t){\nvar ps = missionary.impl.Ambiguous.__GT_Process(n,t,null,null,null);\nvar b = missionary.impl.Ambiguous.__GT_Branch(ps,null,null,null,null,null);\nvar c = missionary.impl.Ambiguous.__GT_Choice(b,null,null,null,missionary.impl.Ambiguous.nop,null,true,false,false);\n(ps.child = (b.next = (b.prev = b)));\n\n(b.choice = (c.next = (c.prev = c)));\n\nvar temp__5808__auto___29893 = missionary.impl.Ambiguous.boot(cr,c);\nif((temp__5808__auto___29893 == null)){\n} else {\nvar cb_29894 = temp__5808__auto___29893;\n(cb_29894.cljs$core$IFn$_invoke$arity$0 ? cb_29894.cljs$core$IFn$_invoke$arity$0() : cb_29894.call(null));\n}\n\nreturn ps;\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","missionary/impl/Ambiguous.cljs","~:line",1,"~:column",14,"~:end-line",1,"~:end-column",39,"~:no-doc",true],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.math","~$cljs.math","~$clojure.core","~$cljs.core"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$missionary.impl.Ambiguous","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",["^ ","~$Cancelled","~$missionary.Cancelled"],"~:requires",["^ ","~$missionary.impl.Fiber","^S","^P","^Q","^F","^F","~$goog","^T"],"~:seen",["^I",["~:require"]],"~:uses",["^ ","~$Fiber","^S","~$fiber","^S"],"~:require-macros",["^ ","^F","^F"],"~:form",["~#list",["~$ns","^K",["^10",["^V",["^S","~:refer",["^X","^Y"]]]],["^10",["~:import","^Q"]]]],"~:flags",["^ ","^V",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^T","^F","^S","^Q"]],"^N","^K","~:resource-id",["~:shadow.build.classpath/resource","missionary/impl/Ambiguous.cljs"],"~:compiled-at",1693922839793,"^L",["^ ","^S","^S","^P","^Q","^F","^F","^T","^T"],"~:resource-name","missionary/impl/Ambiguous.cljs","~:warnings",[],"~:source","(ns ^:no-doc missionary.impl.Ambiguous\n  (:require [missionary.impl.Fiber :refer [Fiber fiber]])\n  (:import missionary.Cancelled))\n\n(declare kill transfer suspend resume ready walk)\n\n(deftype Process [notifier terminator head tail child]\n  IFn\n  (-invoke [this] (kill this) nil)\n  IDeref\n  (-deref [this] (transfer this)))\n\n(deftype Branch [parent prev next queue choice current]\n  Fiber\n  (check [_] (when-not (.-live choice) (throw (Cancelled. \"Process cancelled.\"))))\n  (park [this task] (suspend this nil task))\n  (swich [this flow] (suspend this -1 flow))\n  (fork [this par flow] (suspend this par flow))\n  (unpark [this] (resume this)))\n\n(deftype Choice [branch prev next coroutine iterator ^number parallelism ^boolean live ^boolean busy ^boolean done])\n(deftype Processor [branch prev next child])\n\n(defn nop [])\n\n(defn boot [cr ^Choice c]\n  (set! (.-coroutine c) cr)\n  (ready c))\n\n(defn backtrack [^Choice p ^Branch b ^Choice c]\n  (try (set! (.-iterator c) nop)\n       (set! (.-choice b) c)\n       (set! (.-current b) @(.-iterator p))\n       ((.-coroutine p) boot c)\n       (catch :default e\n         (set! (.-done c) true)\n         (set! (.-current b) e)\n         (boot (.-coroutine p) c))))\n\n(defn choose [^Choice p]\n  (let [b (.-branch p)\n        n (.-next p)]\n    (->> (->Choice b p n nil nil nil (.-live p) false false)\n      (set! (.-next p))\n      (set! (.-prev n))\n      (backtrack p b))))\n\n(defn branch [^Choice p]\n  (set! (.-parallelism p) (dec (.-parallelism p)))\n  (let [parent (.-branch p)\n        prev (.-current parent)\n        curr (->Processor parent nil nil nil)\n        b (->Branch curr nil nil nil nil nil)\n        c (->Choice b nil nil nil nil nil (.-live p) false false)]\n    (set! (.-current parent) curr)\n    (if (nil? prev)\n      (->> curr\n        (set! (.-prev curr))\n        (set! (.-next curr)))\n      (let [next (.-next prev)]\n        (->> curr\n          (set! (.-prev next))\n          (set! (.-next prev)))\n        (set! (.-prev curr) prev)\n        (set! (.-next curr) next)))\n    (->> b\n      (set! (.-prev b))\n      (set! (.-next b))\n      (set! (.-child curr)))\n    (->> c\n      (set! (.-prev c))\n      (set! (.-next c))\n      (backtrack p b))))\n\n(defn root [^Branch b]\n  (loop [node (.-parent b)]\n    (if (instance? Processor node)\n      (recur (.-parent (.-branch ^Processor node)))\n      (if (instance? Branch node)\n        (recur (.-parent ^Branch node))\n        node))))\n\n(defn kill [^Process ps]\n  (when-some [b (.-child ps)]\n    (walk (.-next b))))\n\n(defn cancel [^Choice c]\n  (let [b (.-branch c)]\n    (loop [c c]\n      (when (.-live c)\n        (set! (.-live c) false)\n        ((.-iterator c))\n        (when-some [t (.-choice b)]\n          (let [c (loop [c c]\n                    (let [c (.-next c)]\n                      (if (nil? (.-prev c))\n                        (recur c) c)))]\n            (if (identical? c (.-next t))\n              (let [curr (.-current b)]\n                (if (instance? Processor curr)\n                  (loop [pr ^Processor curr]\n                    (walk (.-next (.-child pr)))\n                    (when-some [curr (.-current b)]\n                      (let [pr (loop [pr pr]\n                                 (let [pr (.-next pr)]\n                                   (if (nil? (.-prev pr))\n                                     (recur pr) pr)))]\n                        (when-not (identical? pr (.-next ^Processor curr))\n                          (recur pr)))))\n                  (when (instance? Branch curr)\n                    (walk (.-next ^Branch curr)))))\n              (recur c))))))))\n\n(defn walk [^Branch b]\n  (loop [b b]\n    (cancel (.-next (.-choice b)))\n    (let [node (.-parent b)]\n      (when-some [t (if (instance? Processor node)\n                      (.-child ^Processor node)\n                      (if (instance? Branch node)\n                        (.-current ^Branch node)\n                        (.-child ^Process node)))]\n        (let [b (loop [b b]\n                  (let [b (.-next b)]\n                    (if (nil? (.-prev b))\n                      (recur b) b)))]\n          (when-not (identical? b (.-next t))\n            (recur b)))))))\n\n(defn move [^Branch x ^Branch y]\n  (let [p (.-parent x)]\n    (loop [b y]\n      (let [b (.-next b)]\n        (set! (.-parent b) p)\n        (when-not (identical? b y)\n          (recur b)))))\n  (let [xx (.-next x)\n        yy (.-next y)]\n    (set! (.-next x) yy)\n    (set! (.-prev yy) x)\n    (set! (.-next y) xx)\n    (set! (.-prev xx) y)))\n\n(defn discard [^Branch b]\n  (let [parent (.-parent b)\n        prev (.-prev b)\n        next (.-next b)]\n    (set! (.-prev b) nil)\n    (set! (.-choice b) nil)\n    (set! (.-current b) nil)\n    (if (instance? Branch parent)\n      (let [br ^Branch parent]\n        (if (identical? b prev)\n          (let [c (.-choice br)]\n            (set! (.-current b) nil)\n            (when (.-busy c)\n              (when (.-done c)\n                (set! (.-busy c) false)\n                (set! (.-done c) false)\n                (choose c))))\n          (do (set! (.-next prev) next)\n              (set! (.-prev next) prev)\n              (when (identical? b (.-current br))\n                (set! (.-current br) prev)) nil)))\n      (if (instance? Processor parent)\n        (let [pr ^Processor parent]\n          (if (identical? b prev)\n            (let [b (.-branch pr)\n                  c (.-choice b)\n                  p (.-prev pr)\n                  n (.-next pr)]\n              (set! (.-child pr) nil)\n              (set! (.-prev pr) nil)\n              (if (identical? pr p)\n                (set! (.-current b) nil)\n                (do (set! (.-next p) n)\n                    (set! (.-prev n) p)\n                    (set! (.-current b) p)))\n              (set! (.-parallelism c) (inc (.-parallelism c)))\n              (when (.-busy c)\n                (when (.-done c)\n                  (set! (.-busy c) false)\n                  (set! (.-done c) false)\n                  (branch c))))\n            (do (set! (.-next prev) next)\n                (set! (.-prev next) prev)\n                (when (identical? b (.-child pr))\n                  (set! (.-child pr) prev)) nil)))\n        (let [ps ^Process parent]\n          (if (identical? b prev)\n            (do (set! (.-child ps) nil)\n                (.-terminator ps))\n            (do (set! (.-next prev) next)\n                (set! (.-prev next) prev)\n                (when (identical? b (.-child ps))\n                  (set! (.-child ps) prev)) nil)))))))\n\n(defn ack [^Choice c]\n  (when (.-busy c)\n    (when (.-done c)\n      (set! (.-busy c) false)\n      (set! (.-done c) false)\n      (if (neg? (.-parallelism c))\n        (choose c) (branch c)))))\n\n(defn done [^Branch b]\n  (let [c (.-choice b)\n        p (.-prev c)]\n    (set! (.-prev c) nil)\n    (set! (.-queue b) nil)\n    (if (identical? p c)\n      (discard b)\n      (let [n (.-next c)]\n        (set! (.-prev n) p)\n        (set! (.-next p) n)\n        (set! (.-choice b) p)\n        (set! (.-current b) nil)\n        (ack p)))))\n\n(defn all [^Branch n]\n  (loop [n n cb nil]\n    (if (nil? n)\n      cb (recur (.-queue n)\n           (done n)))))\n\n(defn transfer [^Process ps]\n  (let [b (.-head ps)\n        q (.-queue b)\n        x (.-current b)]\n    (when-some [cb (if (.-done (.-choice b))\n                     (do (set! (.-notifier ps) nil)\n                         (kill ps)\n                         (let [cb (done b)\n                               cb (if (nil? cb) (all q) cb)\n                               cb (if (nil? cb) (all (.-tail ps)) cb)]\n                           (set! (.-head ps) nil)\n                           (set! (.-tail ps) nil) cb))\n                     (let [cb (done b)]\n                       (if (nil? q)\n                         (if-some [prev (.-tail ps)]\n                           (do (set! (.-tail ps) nil)\n                               (set! (.-head ps)\n                                 (loop [prev prev\n                                        next nil]\n                                   (let [swap (.-queue prev)]\n                                     (set! (.-queue prev) next)\n                                     (if (nil? swap) prev (recur swap prev)))))\n                               (.-notifier ps))\n                           (do (set! (.-head ps) nil) cb))\n                         (do (set! (.-head ps) q) (.-notifier ps)))))]\n      (cb)) (if (nil? (.-notifier ps)) (throw x) x)))\n\n(defn ready [^Choice c]\n  (when (set! (.-busy c) (not (.-busy c)))\n    (loop []\n      (let [b (.-branch c)\n            par (.-parallelism c)\n            curr (.-current b)]\n        (if (nil? par)\n          (let [prev fiber\n                x (try (set! fiber b)\n                       ((.-coroutine c))\n                       (catch :default e\n                         (set! (.-done c) true) e))]\n            (set! fiber prev)\n            (if (identical? x b)\n              (when (set! (.-busy c) (not (.-busy c))) (recur))\n              (let [ps (root b)]\n                (set! (.-current b) x)\n                (if-some [n (.-notifier ps)]\n                  (if (nil? (.-head ps))\n                    (do (set! (.-head ps) b) n)\n                    (do (set! (.-queue b) (.-tail ps))\n                        (set! (.-tail ps) b) nil))\n                  (done b)))))\n          (if (.-done c)\n            (let [p (.-prev c)]\n              (set! (.-prev c) nil)\n              (if (identical? c p)\n                (do (if (instance? Branch curr)\n                      (move b curr)\n                      (when (instance? Processor curr)\n                        (loop [pr ^Processor curr]\n                          (let [pr (.-next pr)]\n                            (move b (.-child pr))\n                            (when-not (identical? pr (.-current b))\n                              (recur pr))))))\n                    (discard b))\n                (let [n (.-next c)]\n                  (set! (.-prev n) p)\n                  (set! (.-next p) n)\n                  (when (identical? c (.-choice b))\n                    (set! (.-choice b) p)\n                    (if (nil? curr)\n                      (ack p)\n                      (when (instance? Processor curr)\n                        (let [pivot (.-child pr)]\n                          (set! (.-current b) pivot)\n                          (set! (.-parent pivot) b)\n                          (loop [pr ^Processor curr]\n                            (let [pr (.-next pr)]\n                              (when-not (identical? pr curr)\n                                (move pivot (.-child pr)))))\n                          (set! (.-prev pr) pr)\n                          (set! (.-next pr) pr) nil)))))))\n            (if (pos? par)\n              (do (set! (.-busy c) false) (branch c))\n              (if (neg? par)\n                (if (identical? c (.-choice b))\n                  (if (nil? curr)\n                    (do (set! (.-busy c) false) (choose c))\n                    (do (set! (.-done c) true) (walk (.-next ^Branch curr)) nil))\n                  (do (set! (.-done c) true) (cancel (.-next c)) nil))\n                (do (set! (.-done c) true) nil)))))))))\n\n(defn suspend [^Branch b par flow]\n  (let [c (.-choice b)]\n    (set! (.-parallelism c) par)\n    (set! (.-iterator c)\n      (flow\n        (fn\n          ([]\n           (when-some [cb (ready c)] (cb)))\n          ([x]\n           (set! (.-current (.-branch c)) x)\n           (when-some [cb (ready c)] (cb))))\n        (fn\n          ([]\n           (set! (.-done c) true)\n           (when-some [cb (ready c)] (cb)))\n          ([x]\n           (set! (.-done c) true)\n           (set! (.-current (.-branch c)) x)\n           (when-some [cb (ready c)] (cb))))))\n    (when-not (.-live c)\n      ((.-iterator c))) b))\n\n(defn resume [^Branch b]\n  (let [c (.-choice b)\n        x (.-current b)]\n    (set! (.-current b) nil)\n    (when (.-done c)\n      (set! (.-done c) false)\n      (throw x)) x))\n\n(defn run [cr n t]\n  (let [ps (->Process n t nil nil nil)\n        b (->Branch ps nil nil nil nil nil)\n        c (->Choice b nil nil nil nop nil true false false)]\n    (->> b\n      (set! (.-prev b))\n      (set! (.-next b))\n      (set! (.-child ps)))\n    (->> c\n      (set! (.-prev c))\n      (set! (.-next c))\n      (set! (.-choice b)))\n    (when-some [cb (boot cr c)] (cb)) ps))","~:reader-features",["^I",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";AAIA,AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,AAEA,AAAA;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,mDAAA,WAAAA,9DAASU;;AAAT,AAAA,IAAAT,SAAA;AAAA,AAAA,IAAAC,WAAA,CAAA,AAAA,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAD;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,oDAAA,WAAAF,OAAAG,tEAASM;;AAAT,AAAA,IAAAT,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAI,iBAAAD;;;AAAA,CAAA,AAAA,4EAAA,5EAASM;;AAAT,AAAA,YAAA,RAEYO;AAFZ,AAEkB,CAACC,+DAAAA,sEAAAA,TAAKD,kDAAAA;;AAFxB;;;AAAA,CAAA,AAAA,8EAAA,9EAASP,yFAIEO;;AAJX,AAAA,gBAAA,ZAIWA;AAJX,AAIiB,QAACE,mEAAAA,8EAAAA,bAASF,0DAAAA;;;AAJ3B,CAAA,6CAAA,7CAASP;AAAT,AAAA,AAAA;;;AAAA,CAAA,mDAAA,nDAASA;;AAAT,CAAA,sDAAA,tDAASA;;AAAT,CAAA,2DAAA,WAAAJ,mBAAAC,qBAAAC,9GAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;yCAAA,zCAASI,0FAASC,SAASC,WAAWC,KAAKC,KAAKC;AAAhD,AAAA,YAAAN,kCAAkBE,SAASC,WAAWC,KAAKC,KAAKC;;;AAAvCN,AAMT,AAAA;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,0EAAAU,1EAASC;;AAAT,CAAA,AAAA,uFAAA,vFAASA,kGAECQ;;AAFV,AAAA,YAAA,RAEUA;AAFV,AAEa,oBAAU,AAAQF;AAAlB;;AAAA,AAA0B,MAAO,KAAAG,qBAAA;;;;AAF9C,CAAA,AAAA,sFAAA,tFAAST,iGAGAJ,MAAKc;;AAHd,AAAA,gBAAA,ZAGSd;AAHT,AAGoB,oJAAA,mEAAA,/MAACe,kEAAAA,uFAAAA,vBAAQf,mEAAAA,pDAASc,mEAAAA;;;AAHtC,CAAA,AAAA,uFAAA,vFAASV,kGAICJ,MAAKgB;;AAJf,AAAA,gBAAA,ZAIUhB;AAJV,AAIqB,oJAAA,mEAAA,/MAACe,kEAAAA,uFAAAA,vBAAQf,mEAAAA,pDAAQgB,mEAAAA;;;AAJtC,CAAA,AAAA,sFAAA,tFAASZ,iGAKAJ,MAAKiB,IAAID;;AALlB,AAAA,gBAAA,ZAKShB;AALT,AAKwB,QAACe,kEAAAA,sFAAAA,tBAAQf,kEAAAA,xDAAKiB,kEAAAA,9DAAID,kEAAAA;;;AAL1C,CAAA,AAAA,wFAAA,xFAASZ,mGAMEJ;;AANX,AAAA,gBAAA,ZAMWA;AANX,AAMiB,QAACkB,iEAAAA,4EAAAA,bAAOlB,wDAAAA;;;AANzB,CAAA,4CAAA,5CAASI;AAAT,AAAA,AAAA;;;AAAA,CAAA,kDAAA,lDAASA;;AAAT,CAAA,qDAAA,rDAASA;;AAAT,CAAA,0DAAA,WAAAf,mBAAAC,qBAAAC,7GAASa;AAAT,AAAA,OAAAZ,iBAAAF,qBAAA;;;AAAA;;;wCAAA,xCAASe,wFAAQC,OAAOC,KAAKC,KAAKC,MAAMC,OAAOC;AAA/C,AAAA,YAAAP,iCAAiBE,OAAOC,KAAKC,KAAKC,MAAMC,OAAOC;;;AAAtCP,AAQT,AAAA;;;;;;;;;;;;;;;AAAA;AAAA,CAAA,4CAAA,5CAASe;AAAT,AAAA,AAAA;;;AAAA,CAAA,kDAAA,lDAASA;;AAAT,CAAA,qDAAA,rDAASA;;AAAT,CAAA,0DAAA,WAAA9B,mBAAAC,qBAAAC,7GAAS4B;AAAT,AAAA,OAAA3B,iBAAAF,qBAAA;;;AAAA;;;wCAAA,xCAAS8B,wFAAQC,OAAOd,KAAKC,KAAKc,UAAUC,SAAiBC,YAAqBC,KAAcC,KAAcC;AAA9G,AAAA,YAAAR,iCAAiBE,OAAOd,KAAKC,KAAKc,UAAUC,SAAiBC,YAAqBC,KAAcC,KAAcC;;;AAArGR,AACT,AAAA;;;;;;;;;;AAAA;AAAA,CAAA,+CAAA,/CAASS;AAAT,AAAA,AAAA;;;AAAA,CAAA,qDAAA,rDAASA;;AAAT,CAAA,wDAAA,xDAASA;;AAAT,CAAA,6DAAA,WAAAvC,mBAAAC,qBAAAC,hHAASqC;AAAT,AAAA,OAAApC,iBAAAF,qBAAA;;;AAAA;;;2CAAA,3CAASuC,8FAAWR,OAAOd,KAAKC,KAAKT;AAArC,AAAA,YAAA6B,oCAAoBP,OAAOd,KAAKC,KAAKT;;;AAA5B6B,AAET,gCAAA,hCAAME;AAAN,AAAA;;AAEA,iCAAA,jCAAMC,0EAAMC,GAAWC;AAAvB,AACE,CAAM,AAAaA,cAAGD;;AACtB,QAACE,gEAAAA,mEAAAA,LAAMD,+CAAAA;;AAET,sCAAA,tCAAME,oFAAmBC,EAAUC,EAAUJ;AAA7C,AACE,IAAA,AAAK,CAAM,AAAYA,aAAGH;;AACrB,CAAM,AAAUO,WAAGJ;;AACnB,aAAA,AAAAM,ZAAM,AAAWF,4BAAI,AAAYD;;AACjC,IAAAI,eAAC,AAAaJ;AAAd,AAAA,QAAAI,6CAAAA,+EAAAA,pCAAiBT,2DAAAA,5BAAKE,2DAAAA;gBAH3B,QAAAK,JAIqBG;AAJrB,AAKO,UAAA,TAAM,AAAQR;;AACd,CAAM,AAAWI,YAAGI;;AACpB,OAACV,+BAAK,AAAaK,YAAGH;;AAE/B,mCAAA,nCAAMS,8EAAgBN;AAAtB,AACE,IAAMC,IAAE,AAAUD;IACZO,IAAE,AAAQP;AADhB,mEAEO,4CAAA,KAAA,KAAA,YAAA,MAAA,xEAAChB,sCAASiB,EAAED,EAAEO,iBAAc,AAAQP,rEACvC,CAAM,AAAQA,XACd,CAAM,AAAQO,hDACd,OAACR,oCAAUC,EAAEC;;AAEnB,mCAAA,nCAAMO,8EAAgBR;AAAtB,AACE,CAAM,AAAeA,gBAAG,iBAAA,hBAAK,AAAeA;;AAC5C,IAAM9B,SAAO,AAAU8B;IACjB7B,OAAK,AAAWD;IAChBuC,OAAK,gDAAA,KAAA,KAAA,1DAAChB,yCAAYvB;IAClB+B,IAAE,2CAAA,KAAA,KAAA,KAAA,KAAA,/DAAChC,sCAASwC;IACZZ,IAAE,wCAAA,KAAA,KAAA,KAAA,KAAA,YAAA,MAAA,9EAACb,sCAASiB,2BAAsB,AAAQD;AAJhD,AAKE,CAAM,AAAW9B,iBAAQuC;;AACzB,GAAI,SAAA,RAAMtC;0BACHsC,bACH,CAAM,AAAQA,dACd,CAAM,AAAQA;;AAChB,IAAMrC,aAAK,AAAQD;AAAnB,gCACOsC,nBACH,CAAM,AAAQrC,dACd,CAAM,AAAQD;;AAChB,CAAM,AAAQsC,YAAMtC;;AACpB,CAAM,AAAQsC,YAAMrC;;;kCACnB6B,VACH,CAAM,AAAQA,XACd,CAAM,AAAQA,fACd,CAAM,AAASQ;;mEACZZ,VACH,CAAM,AAAQA,XACd,CAAM,AAAQA,hDACd,OAACE,oCAAUC,EAAEC;;AAEnB,iCAAA,jCAAMS,0EAAcT;AAApB,AACE,IAAOU,OAAK,AAAUV;;AAAtB,AACE,GAAI,iBAAWT,hBAAUmB;AACvB,eAAO,AAAU,AAAqBA;;;;AACtC,GAAI,iBAAW3C,hBAAO2C;AACpB,eAAO,AAAkBA;;;;AACzBA;;;;;;AAER,iCAAA,jCAAM9C,0EAAe+C;AAArB,AACE,IAAAC,qBAAc,AAASD;AAAvB,AAAA,GAAA,CAAAC,sBAAA;AAAA;;AAAA,QAAAA,JAAYZ;AAAZ,AACE,IAAAa,WAAM,AAAQb;AAAd,AAAA,oIAAAa,qDAAAA,jLAACC,+DAAAA,yEAAAA;;;AAEL,mCAAA,nCAAMC,8EAAgBnB;AAAtB,AACE,IAAMI,IAAE,AAAUJ;AAAlB,AACE,IAAOA,QAAEA;;AAAT,AACE,oBAAM,AAAQA;AAAd,AACE,cAAA,bAAM,AAAQA;;AACd,IAAAoB,qBAAC,AAAYpB;AAAb,AAAA,CAAAoB,mDAAAA,qDAAAA;;AACA,IAAAJ,qBAAc,AAAUZ;AAAxB,AAAA,GAAA,CAAAY,sBAAA;AAAA;;AAAA,QAAAA,JAAYK;AAAZ,AACE,IAAMrB,QAAE,iBAAOA,QAAEA;;AAAT,AACE,IAAMA,QAAE,AAAQA;AAAhB,AACE,GAAI,eAAA,dAAM,AAAQA;AAChB,eAAOA;;;;AAAGA;;;;;AAHxB,AAIE,GAAI,CAAYA,UAAE,AAAQqB;AACxB,IAAMT,OAAK,AAAWR;AAAtB,AACE,GAAI,iBAAWT,hBAAUiB;AACvB,IAAOU,KAAcV;;AAArB,AACE,IAAAW,iBAAM,AAAQ,AAASD;AAAvB,AAAA,6HAAAC,2DAAAA,vLAACL,+DAAAA,+EAAAA;;AACD,IAAAF,yBAAiB,AAAWZ;AAA5B,AAAA,GAAA,CAAAY,0BAAA;AAAA;;AAAA,eAAAA,XAAYJ;AAAZ,AACE,IAAMU,SAAG,iBAAOA,SAAGA;;AAAV,AACE,IAAMA,SAAG,AAAQA;AAAjB,AACE,GAAI,gBAAA,fAAM,AAAQA;AAChB,eAAOA;;;;AAAIA;;;;;AAH1B,AAIE,GAAU,CAAYA,WAAG,AAAmBV;AAA5C;;AAAA,AACE,eAAOU;;;;;;;;AACf,GAAM,iBAAWnD,hBAAOyC;AAAxB,AACE,IAAAY,WAAM,AAAgBZ;AAAtB,AAAA,oIAAAY,qDAAAA,jLAACN,+DAAAA,yEAAAA;;AADH;;;;AAEJ,eAAOlB;;;;;;AAtBf;;;;;AAwBN,iCAAA,jCAAMkB,0EAAcd;AAApB,AACE,IAAOA,QAAEA;;AAAT,AACE,AAACe,iCAAO,AAAQ,AAAUf;;AAC1B,IAAMU,OAAK,AAAUV;AAArB,AACE,IAAAY,qBAAc,EAAI,iBAAWrB,hBAAUmB,sDACvB,AAAoBA,WACpB,EAAI,iBAAW3C,hBAAO2C,mDACpB,AAAmBA,aACnB,AAAkBA;AAJpC,AAAA,GAAA,CAAAE,sBAAA;AAAA;;AAAA,QAAAA,JAAYK;AAAZ,AAKE,IAAMjB,QAAE,iBAAOA,QAAEA;;AAAT,AACE,IAAMA,QAAE,AAAQA;AAAhB,AACE,GAAI,eAAA,dAAM,AAAQA;AAChB,eAAOA;;;;AAAGA;;;;;AAHxB,AAIE,GAAU,CAAYA,UAAE,AAAQiB;AAAhC;;AAAA,AACE,eAAOjB;;;;;;;;AAEnB,iCAAA,jCAAMqB,0EAAcC,EAAUC;AAA9B,AACE,IAAMxB,UAAE,AAAUuB;AAAlB,AACE,IAAOtB,UAAEuB;;AAAT,AACE,IAAMvB,cAAE,AAAQA;AAAhB,AACE,CAAM,AAAUA,qBAAGD;;AACnB,GAAU,CAAYC,gBAAEuB;AAAxB;AAAA,AACE,eAAOvB;;;;;;;AACf,IAAMwB,KAAG,AAAQF;IACXG,KAAG,AAAQF;AADjB,AAEE,CAAM,AAAQD,SAAGG;;AACjB,CAAM,AAAQA,UAAIH;;AAClB,CAAM,AAAQC,SAAGC;;AACjB,QAAM,AAAQA,UAAID;;AAEtB,oCAAA,pCAAMG,gFAAiB1B;AAAvB,AACE,IAAM/B,SAAO,AAAU+B;IACjB9B,OAAK,AAAQ8B;IACb7B,OAAK,AAAQ6B;AAFnB,AAGE,UAAA,TAAM,AAAQA;;AACd,YAAA,XAAM,AAAUA;;AAChB,aAAA,ZAAM,AAAWA;;AACjB,GAAI,mBAAWjC,lBAAOE;AACpB,IAAM0D,KAAW1D;AAAjB,AACE,GAAI,CAAY+B,MAAE9B;AAChB,IAAM0B,IAAE,AAAU+B;AAAlB,AACE,aAAA,ZAAM,AAAW3B;;AACjB,oBAAM,AAAQJ;AAAd,AACE,oBAAM,AAAQA;AAAd,AACE,UAAA,TAAM,AAAQA;;AACd,UAAA,TAAM,AAAQA;;AACd,OAACS,iCAAOT;;AAHV;;;AADF;;;AAKF,AAAI,CAAM,AAAQ1B,YAAMC;;AACpB,CAAM,AAAQA,YAAMD;;AACpB,GAAM,CAAY8B,MAAE,AAAW2B;AAA/B,AACE,CAAM,AAAWA,aAAIzD;;AADvB;;AAFJ;;;AAIJ,GAAI,mBAAWqB,lBAAUtB;AACvB,IAAMiD,KAAcjD;AAApB,AACE,GAAI,CAAY+B,MAAE9B;AAChB,IAAM8B,QAAE,AAAUkB;IACZtB,IAAE,AAAUI;IACZD,IAAE,AAAQmB;IACVZ,IAAE,AAAQY;AAHhB,AAIE,YAAA,XAAM,AAASA;;AACf,WAAA,VAAM,AAAQA;;AACd,GAAI,CAAYA,OAAGnB;AACjB,iBAAA,hBAAM,AAAWC;;AACjB,AAAI,CAAM,AAAQD,SAAGO;;AACjB,CAAM,AAAQA,SAAGP;;AACjB,CAAM,AAAWC,gBAAGD;;;AAC1B,CAAM,AAAeH,gBAAG,iBAAA,hBAAK,AAAeA;;AAC5C,oBAAM,AAAQA;AAAd,AACE,oBAAM,AAAQA;AAAd,AACE,UAAA,TAAM,AAAQA;;AACd,UAAA,TAAM,AAAQA;;AACd,OAACW,iCAAOX;;AAHV;;;AADF;;;AAKF,AAAI,CAAM,AAAQ1B,YAAMC;;AACpB,CAAM,AAAQA,YAAMD;;AACpB,GAAM,CAAY8B,MAAE,AAASkB;AAA7B,AACE,CAAM,AAASA,WAAIhD;;AADrB;;AAFJ;;;AAIJ,IAAMyC,KAAY1C;AAAlB,AACE,GAAI,CAAY+B,MAAE9B;AAChB,AAAI,YAAA,XAAM,AAASyC;;AACf,OAAcA;;AAClB,AAAI,CAAM,AAAQzC,YAAMC;;AACpB,CAAM,AAAQA,YAAMD;;AACpB,GAAM,CAAY8B,MAAE,AAASW;AAA7B,AACE,CAAM,AAASA,WAAIzC;;AADrB;;AAFJ;;;;;AAKZ,gCAAA,hCAAM0D,wEAAahC;AAAnB,AACE,oBAAM,AAAQA;AAAd,AACE,oBAAM,AAAQA;AAAd,AACE,UAAA,TAAM,AAAQA;;AACd,UAAA,TAAM,AAAQA;;AACd,GAAI,iBAAA,hBAAM,AAAeA;AACvB,OAACS,iCAAOT;;AAAG,OAACW,iCAAOX;;;AAJvB;;;AADF;;;AAOF,iCAAA,jCAAMiC,0EAAc7B;AAApB,AACE,IAAMJ,IAAE,AAAUI;IACZD,IAAE,AAAQH;AADhB,AAEE,UAAA,TAAM,AAAQA;;AACd,WAAA,VAAM,AAASI;;AACf,GAAI,CAAYD,MAAEH;AAChB,OAAC8B,kCAAQ1B;;AACT,IAAMM,IAAE,AAAQV;AAAhB,AACE,CAAM,AAAQU,SAAGP;;AACjB,CAAM,AAAQA,SAAGO;;AACjB,CAAM,AAAUN,WAAGD;;AACnB,aAAA,ZAAM,AAAWC;;AACjB,OAAC4B,8BAAI7B;;;AAEb,gCAAA,hCAAM+B,wEAAaxB;AAAnB,AACE,IAAOA,QAAEA;SAAT,LAAWyB;;AAAX,AACE,GAAI,UAAA,TAAMzB;AACRyB;;AAAG,eAAO,AAASzB;eACd,AAACuB,+BAAKvB;;;;;;;;AAEjB,qCAAA,rCAAMzC,kFAAmB8C;AAAzB,AACE,IAAMX,IAAE,AAAQW;IACVqB,IAAE,AAAShC;IACXsB,IAAE,AAAWtB;AAFnB,AAGE,IAAAY,2BAAe,kBAAI,AAAQ,AAAUZ,eACpB;AAAI,eAAA,dAAM,AAAYW;;AAClB,AAAC/C,+BAAK+C;;AACN,IAAMoB,KAAG,AAACF,+BAAK7B;IACT+B,SAAG,EAAI,OAAA,NAAMA,aAAI,AAACD,8BAAIE,GAAGD;IACzBA,SAAG,EAAI,WAAA,VAAMA,iBAAI,AAACD,8BAAI,AAAQnB,SAAKoB;AAFzC,AAGE,WAAA,VAAM,AAAQpB;;AACd,WAAA,VAAM,AAAQA;;AAASoB;;CAC7B,iBAAMA,KAAG,AAACF,+BAAK7B;AAAf,AACE,GAAI,MAAA,LAAMgC;AACR,IAAAC,qBAAe,AAAQtB;AAAvB,AAAA,GAAA,CAAAsB,sBAAA;AASE,AAAI,WAAA,VAAM,AAAQtB;;AAASoB;;AAT7B,WAAAE,PAAU/D;AAAV,AACE,AAAI,WAAA,VAAM,AAAQyC;;AACd,CAAM,AAAQA,UACZ,iBAAOzC,WAAKA;WAAZ,PACOC;;AADP,AAEE,IAAM+D,OAAK,AAAShE;AAApB,AACE,CAAM,AAASA,iBAAMC;;AACrB,GAAI,SAAA,RAAM+D;AAAMhE;;AAAK,eAAOgE;eAAKhE;;;;;;;;;AACvC,OAAYyC;;;AAElB,AAAI,CAAM,AAAQA,UAAIqB;;AAAG,OAAYrB;;;AApB1D,AAAA,GAAA,CAAAC,4BAAA;AAAA;AAAA,eAAAA,XAAYmB;AAAZ,AAqBE,CAACA,yCAAAA,2CAAAA;;;AAAK,GAAI,gBAAA,fAAM,AAAYpB;AAAK,MAAOW;;AAAGA;;;AAEjD,kCAAA,lCAAMzB,4EAAeD;AAArB,AACE,oBAAM,CAAM,AAAQA,SAAG,AAACuC,cAAI,AAAQvC;AAApC,AACE;AAAA,AACE,IAAMI,IAAE,AAAUJ;IACZhB,MAAI,AAAegB;IACnBY,OAAK,AAAWR;AAFtB,AAGE,GAAI,QAAA,PAAMpB;AACR,IAAMV,OAAKkE;IACLd,IAAE,iBAAA,AAAK,CAAMc,8BAAMpC;;AACZ,IAAAsC,eAAC,AAAa1C;AAAd,AAAA,QAAA0C,6CAAAA,+CAAAA;gBADL,QAAAD,JAEqBjC;AAFrB,AAGO,UAAA,TAAM,AAAQR;;AAASQ;;AAJtC,AAKE,CAAMgC,8BAAMlE;;AACZ,GAAI,CAAYoD,MAAEtB;AAChB,oBAAM,CAAM,AAAQJ,SAAG,AAACuC,cAAI,AAAQvC;AAApC,AAAyC;;AAAzC;;;AACA,IAAMe,KAAG,AAACF,+BAAKT;AAAf,AACE,CAAM,AAAWA,YAAGsB;;AACpB,IAAAW,qBAAY,AAAYtB;AAAxB,AAAA,GAAA,CAAAsB,sBAAA;AAKE,OAACJ,+BAAK7B;;AALR,QAAAiC,JAAU3B;AAAV,AACE,GAAI,YAAA,XAAM,AAAQK;AAChB,AAAI,CAAM,AAAQA,UAAIX;;AAAGM;;AACzB,AAAI,CAAM,AAASN,UAAG,AAAQW;;AAC1B,CAAM,AAAQA,UAAIX;;AADtB;;;;;AAGV,oBAAI,AAAQJ;AACV,IAAMG,IAAE,AAAQH;AAAhB,AACE,UAAA,TAAM,AAAQA;;AACd,GAAI,CAAYA,MAAEG;AAChB,AAAI,GAAI,iBAAWhC,hBAAOyC;AACpB,AAACa,+BAAKrB,EAAEQ;;AACR,GAAM,iBAAWjB,hBAAUiB;AAA3B,AACE,IAAOU,WAAcV;;AAArB,AACE,IAAMU,eAAG,AAAQA;AAAjB,AACE,AAACG,+BAAKrB,EAAE,AAASkB;;AACjB,GAAU,CAAYA,iBAAG,AAAWlB;AAApC;AAAA,AACE,eAAOkB;;;;;;;AALf;;;AAMF,OAACQ,kCAAQ1B;;AACb,IAAMM,IAAE,AAAQV;AAAhB,AACE,CAAM,AAAQU,SAAGP;;AACjB,CAAM,AAAQA,SAAGO;;AACjB,GAAM,CAAYV,MAAE,AAAUI;AAA9B,AACE,CAAM,AAAUA,WAAGD;;AACnB,GAAI,SAAA,RAAMS;AACR,OAACoB,8BAAI7B;;AACL,GAAM,iBAAWR,hBAAUiB;AAA3B,AACE,IAAM+B,QAAM,AAASC;AAArB,AACE,CAAM,AAAWxC,YAAGuC;;AACpB,CAAM,AAAUA,eAAOvC;;AACvB,IAAOkB,WAAcV;;AAArB,AACE,IAAMU,eAAG,AAAQA;AAAjB,AACE,GAAU,CAAYA,iBAAGV;AAAzB;AAAA,AACE,AAACa,+BAAKkB,MAAM,AAASrB;;;;;AAC3B,CAAM,AAAQsB,oBAAIA;;AAClB,CAAM,AAAQA,oBAAIA;;AARpB;;AADF;;;;AAJJ;;;;AAcN,GAAI,OAAA,NAAM5D;AACR,AAAI,UAAA,TAAM,AAAQgB;;AAAU,OAACW,iCAAOX;;AACpC,GAAI,OAAA,NAAMhB;AACR,GAAI,CAAYgB,MAAE,AAAUI;AAC1B,GAAI,SAAA,RAAMQ;AACR,AAAI,UAAA,TAAM,AAAQZ;;AAAU,OAACS,iCAAOT;;AACpC,AAAI,UAAA,TAAM,AAAQA;;AAAS,AAACkB,+BAAK,AAAgBN;;AAAjD;;;AACF,AAAI,UAAA,TAAM,AAAQZ;;AAAS,AAACmB,iCAAO,AAAQnB;;AAA3C;;;AACF,AAAI,UAAA,TAAM,AAAQA;;AAAlB;;;;;;;;AA5Dd;;;AA8DF,oCAAA,pCAAMlB,gFAAiBsB,EAAEpB,IAAID;AAA7B,AACE,IAAMiB,IAAE,AAAUI;AAAlB,AACE,CAAM,AAAeJ,gBAAGhB;;AACxB,CAAM,AAAYgB,aAChB,iBAAA6C,WACE;;;AAAA,AAEG,IAAA7B,qBAAe,AAACf,gCAAMD;AAAtB,AAAA,GAAA,CAAAgB,sBAAA;AAAA;;AAAA,SAAAA,LAAYmB;AAAZ,AAA0B,QAACA,mCAAAA,qCAAAA;;;6BAC1BT;AAHJ,AAIG,CAAM,AAAW,AAAU1B,mBAAI0B;;AAC/B,IAAAV,qBAAe,AAACf,gCAAMD;AAAtB,AAAA,GAAA,CAAAgB,sBAAA;AAAA;;AAAA,SAAAA,LAAYmB;AAAZ,AAA0B,QAACA,mCAAAA,qCAAAA;;;oBAF1BT;;;;;6BAAAA;;;;;;;;;IAJNoB,WAOE;;;AAAA,AAEG,UAAA,TAAM,AAAQ9C;;AACd,IAAAgB,qBAAe,AAACf,gCAAMD;AAAtB,AAAA,GAAA,CAAAgB,sBAAA;AAAA;;AAAA,SAAAA,LAAYmB;AAAZ,AAA0B,QAACA,mCAAAA,qCAAAA;;;6BAC1BT;AAJJ,AAKG,UAAA,TAAM,AAAQ1B;;AACd,CAAM,AAAW,AAAUA,mBAAI0B;;AAC/B,IAAAV,qBAAe,AAACf,gCAAMD;AAAtB,AAAA,GAAA,CAAAgB,sBAAA;AAAA;;AAAA,SAAAA,LAAYmB;AAAZ,AAA0B,QAACA,mCAAAA,qCAAAA;;;oBAH1BT;;;;;6BAAAA;;;;;;;;;AAXN,AAAA,gFAAAmB,SAAAC,2BAAAD,SAAAC,rHAAC/D,qCAAAA,wDAAAA;;;AAeH,oBAAU,AAAQiB;AAAlB;AAAA,AACE,IAAA+C,qBAAC,AAAY/C;AAAb,AAAA,CAAA+C,mDAAAA,qDAAAA;;;AAAkB3C;;AAExB,mCAAA,nCAAMnB,8EAAgBmB;AAAtB,AACE,IAAMJ,IAAE,AAAUI;IACZsB,IAAE,AAAWtB;AADnB,AAEE,aAAA,ZAAM,AAAWA;;AACjB,oBAAM,AAAQJ;AAAd,AACE,UAAA,TAAM,AAAQA;;AACd,MAAO0B;;AAFT;;AAEaA;;AAEjB,gCAAA,hCAAMsB,wEAAKjD,GAAGW,EAAEW;AAAhB,AACE,IAAMN,KAAG,2CAAA,KAAA,KAAA,rDAACtD,uCAAUiD,EAAEW;IAChBjB,IAAE,yCAAA,KAAA,KAAA,KAAA,KAAA,7DAAChC,sCAAS2C;IACZf,IAAE,wCAAA,KAAA,KAAA,mCAAA,KAAA,KAAA,MAAA,rGAACb,sCAASiB,iBAAcP;AAFhC,gCAGOO,VACH,CAAM,AAAQA,XACd,CAAM,AAAQA,bACd,CAAM,AAASW;;gCACZf,VACH,CAAM,AAAQA,XACd,CAAM,AAAQA,bACd,CAAM,AAAUI;;AAClB,IAAAY,2BAAe,AAAClB,+BAAKC,GAAGC;AAAxB,AAAA,GAAA,CAAAgB,4BAAA;AAAA;AAAA,eAAAA,XAAYmB;AAAZ,AAA4B,CAACA,yCAAAA,2CAAAA;;;AAAKpB","names",["unused__14959__auto__","self__","G__29385","js/Error","args29383","cljs.core/aclone","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","missionary.impl.Ambiguous/Process","missionary.impl.Ambiguous/->Process","notifier","terminator","head","tail","child","this","missionary.impl.Ambiguous/kill","missionary.impl.Ambiguous/transfer","cljs.core/PROTOCOL_SENTINEL","missionary.impl.Ambiguous/Branch","missionary.impl.Ambiguous/->Branch","parent","prev","next","queue","choice","current","_","js/missionary.Cancelled","task","missionary.impl.Ambiguous/suspend","flow","par","missionary.impl.Ambiguous/resume","missionary.impl.Ambiguous/Choice","missionary.impl.Ambiguous/->Choice","branch","coroutine","iterator","parallelism","live","busy","done","missionary.impl.Ambiguous/Processor","missionary.impl.Ambiguous/->Processor","missionary.impl.Ambiguous/nop","missionary.impl.Ambiguous/boot","cr","c","missionary.impl.Ambiguous/ready","missionary.impl.Ambiguous/backtrack","p","b","e29497","cljs.core/deref","fexpr__29499","e","missionary.impl.Ambiguous/choose","n","missionary.impl.Ambiguous/branch","curr","missionary.impl.Ambiguous/root","node","ps","temp__5808__auto__","G__29526","missionary.impl.Ambiguous/walk","missionary.impl.Ambiguous/cancel","fexpr__29538","t","pr","G__29556","G__29567","missionary.impl.Ambiguous/move","x","y","xx","yy","missionary.impl.Ambiguous/discard","br","missionary.impl.Ambiguous/ack","missionary.impl.Ambiguous/done","missionary.impl.Ambiguous/all","cb","q","temp__5806__auto__","swap","cljs.core/not","missionary.impl.Fiber/fiber","e29711","fexpr__29717","pivot","cljs.core/pr","G__29735","G__29736","fexpr__29744","missionary.impl.Ambiguous/run"]],"~:used-vars",["^I",["~$missionary.impl.Ambiguous/boot","~$missionary.impl.Ambiguous/choose","~$missionary.impl.Ambiguous/kill","~$cljs.core/PROTOCOL_SENTINEL","~$missionary.impl.Ambiguous/move","~$missionary.impl.Ambiguous/backtrack","~$missionary.impl.Ambiguous/Choice","~$missionary.impl.Ambiguous/->Choice","~$missionary.impl.Fiber/fiber","~$missionary.impl.Ambiguous/all","~$cljs.core/-write","~$missionary.impl.Ambiguous/suspend","~$missionary.impl.Ambiguous/->Processor","~$cljs.core/deref","~$cljs.core/pr","~$cljs.core/aclone","~$missionary.impl.Ambiguous/nop","~$missionary.impl.Ambiguous/root","~$missionary.impl.Ambiguous/ack","~$missionary.impl.Ambiguous/discard","~$missionary.impl.Ambiguous/cancel","~$js/missionary.Cancelled","~$missionary.impl.Ambiguous/resume","~$missionary.impl.Ambiguous/branch","~$missionary.impl.Ambiguous/Process","~$missionary.impl.Ambiguous/Branch","~$missionary.impl.Ambiguous/->Process","~$missionary.impl.Ambiguous/->Branch","~$cljs.core/not","~$missionary.impl.Ambiguous/run","~$missionary.impl.Ambiguous/ready","~$missionary.impl.Ambiguous/done","~$missionary.impl.Ambiguous/walk","~$missionary.impl.Ambiguous/Processor","~$js/Error","~$missionary.impl.Ambiguous/transfer"]]],"~:cache-keys",["~#cmap",[["^18","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^T","~$goog.dom.HtmlElement"]]],["^18","missionary/Cancelled.js"],["b9821cff112a419498afb6330bfabf7bf58e36dd","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^18","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^18","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^18","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2F"]]],["^18","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2G"]]],["^18","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^18","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^18","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^18","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^18","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2G"]]],"~:SHADOW-TIMESTAMP",[1677656185000,1677656185000,1674331854000],["^18","missionary/impl/Ambiguous.cljs"],["b9821cff112a419498afb6330bfabf7bf58e36dd","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^F","^S","^Q"]]],["^18","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2G","~$goog.reflect"]]],["^18","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2G","~$goog.fs.blob","^2H","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2J","^2K","^2L","^2M"]]],["^18","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^18","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^18","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2L","~$goog.html.SafeUrl","^2M","^2G","^2F"]]],["^18","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2G","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2Q","~$goog.html.SafeStyle","^2S","^2I","~$goog.html.uncheckedconversions","^2L","^2F"]]],["^18","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2L","^2J","^2K","^2Q","^2W","~$goog.html.SafeStyleSheet","^2S","~$goog.dom.TagName","^2I","^2M","^2G","~$goog.labs.userAgent.browser","^2C","^2D","^2F","~$goog.dom.tags","^2R"]]],["^18","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2D"]]],["^18","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^18","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^18","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2C","^2G","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^18","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^18","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^18","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^18","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",[]]],["^18","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2C","^2D"]]],["^18","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","~$goog.dom.safe","^2X","^2L","^2F"]]],["^18","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^18","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","~$goog.labs.userAgent","^2F"]]],["^18","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^18","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^18","missionary/impl/Fiber.cljs"],["b9821cff112a419498afb6330bfabf7bf58e36dd","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^F"]]],["^18","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2G","^2V","^2Q","^2W","^2Y","^2S","^2I","^2L","^2F","^2J"]]],["^18","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T"]]],["^18","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","~$goog.math.Long","~$goog.math.Integer","^34","^2D","^2C","~$goog.Uri","~$goog.string.StringBuffer"]]],["^18","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2L","^2M","^2R","^2G"]]],["^18","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2L","^2W","^2M","^2D","^2G","^2F"]]],["^18","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2O"]]],["^18","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2G","^34"]]],["^18","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2>",["^ ","^2?",null,"^2@",["^I",[]],"^2A",["^T","^2G","^2M"]]]]],"~:clj-info",["^ ","jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1669480727000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1669480727000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1669480727000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1669480727000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1669480727000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1669480727000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1669480727000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1674331854000,"jar:file:/Users/bariscanates/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1674331854000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",1,"^8",14,"^9",1,"^:",39,"^;",true],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",[]],"^J","^K","^L",["^ "],"^O",["^ ","^P","^Q"],"^R",["^ ","^S","^S","^P","^Q","^F","^F","^T","^T"],"^U",["^I",["^V"]],"~:shadow/js-access-global",["^I",["Error"]],"^W",["^ ","^X","^S","^Y","^S"],"~:defs",["^ ","~$resume",["^ ","~:protocol-inline",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",338,"^8",7,"^9",338,"^:",13,"~:arglists",["^10",["~$quote",["^10",[["~$b"]]]]]],"^J","^1Z","^6","missionary/impl/Ambiguous.cljs","^:",13,"~:method-params",["^10",[["~$b"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^8",1,"~:variadic?",false,"^7",338,"~:ret-tag","~$any","^9",338,"~:max-fixed-arity",1,"~:fn-var",true,"^46",["^10",["^47",["^10",[["~$b"]]]]]],"~$branch",["^ ","^45",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",48,"^8",7,"^9",48,"^:",13,"^46",["^10",["^47",["^10",[["~$p"]]]]]],"^J","^1[","^6","missionary/impl/Ambiguous.cljs","^:",13,"^48",["^10",[["~$p"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^7",48,"^4<","^4=","^9",48,"^4>",1,"^4?",true,"^46",["^10",["^47",["^10",[["~$p"]]]]]],"~$Process",["^ ","~:num-fields",5,"~:protocols",["^I",["~$cljs.core/IFn","~$cljs.core/IDeref"]],"^J","^20","^6","missionary/impl/Ambiguous.cljs","^:",17,"~:type",true,"^8",10,"^7",7,"~:record",false,"^9",7,"~:tag","~$function","~:skip-protocol-flag",["^I",["^4D","^4E"]]],"~$->Process",["^ ","^45",null,"^5",["^ ","^4C",["^I",["^4D","^4E"]],"^6","missionary/impl/Ambiguous.cljs","^:",17,"^8",10,"~:factory","~:positional","^7",7,"^9",7,"^46",["^10",["^47",["^10",[["~$notifier","~$terminator","~$head","~$tail","~$child"]]]]],"^4J",["^I",["^4D","^4E"]],"~:doc","Positional factory function for missionary.impl.Ambiguous/Process."],"^4C",["^I",["^4D","^4E"]],"^J","^22","^6","missionary/impl/Ambiguous.cljs","^:",17,"^48",["^10",[["^4N","^4O","^4P","^4Q","^4R"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^4L","^4M","^7",7,"^4<","^20","^9",7,"^4>",5,"^4?",true,"^46",["^10",["^47",["^10",[["^4N","^4O","^4P","^4Q","^4R"]]]]],"^4J",["^I",["^4D","^4E"]],"^4S","Positional factory function for missionary.impl.Ambiguous/Process."],"~$Branch",["^ ","^4B",6,"^4C",["^I",["~$missionary.impl.Fiber/Fiber"]],"^J","^21","^6","missionary/impl/Ambiguous.cljs","^:",16,"^4F",true,"^8",10,"^7",13,"^4G",false,"^9",13,"^4H","^4I","^4J",null],"~$->Branch",["^ ","^45",null,"^5",["^ ","^4C",["^I",["^4U"]],"^6","missionary/impl/Ambiguous.cljs","^:",16,"^8",10,"^4L","^4M","^7",13,"^9",13,"^46",["^10",["^47",["^10",[["~$parent","~$prev","~$next","~$queue","~$choice","~$current"]]]]],"^4J",null,"^4S","Positional factory function for missionary.impl.Ambiguous/Branch."],"^4C",["^I",["^4U"]],"^J","^23","^6","missionary/impl/Ambiguous.cljs","^:",16,"^48",["^10",[["^4W","^4X","^4Y","^4Z","^4[","^50"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^4L","^4M","^7",13,"^4<","^21","^9",13,"^4>",6,"^4?",true,"^46",["^10",["^47",["^10",[["^4W","^4X","^4Y","^4Z","^4[","^50"]]]]],"^4J",null,"^4S","Positional factory function for missionary.impl.Ambiguous/Branch."],"~$ready",["^ ","^45",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",253,"^8",7,"^9",253,"^:",12,"^46",["^10",["^47",["^10",[["~$c"]]]]]],"^J","^26","^6","missionary/impl/Ambiguous.cljs","^:",12,"^48",["^10",[["~$c"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^7",253,"^4<",["^I",["^4=","~$clj-nil"]],"^9",253,"^4>",1,"^4?",true,"^46",["^10",["^47",["^10",[["~$c"]]]]]],"~$run",["^ ","^45",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",346,"^8",7,"^9",346,"^:",10,"^46",["^10",["^47",["^10",[["~$cr","~$n","~$t"]]]]]],"^J","^25","^6","missionary/impl/Ambiguous.cljs","^:",10,"^48",["^10",[["^54","~$n","~$t"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^7",346,"^4<","^20","^9",346,"^4>",3,"^4?",true,"^46",["^10",["^47",["^10",[["^54","~$n","~$t"]]]]]],"~$done",["^ ","^45",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",206,"^8",7,"^9",206,"^:",11,"^46",["^10",["^47",["^10",[["~$b"]]]]]],"^J","^27","^6","missionary/impl/Ambiguous.cljs","^:",11,"^48",["^10",[["~$b"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^7",206,"^4<",["^I",["^4=","^52"]],"^9",206,"^4>",1,"^4?",true,"^46",["^10",["^47",["^10",[["~$b"]]]]]],"~$Processor",["^ ","^4B",4,"^4C",["^I",[]],"^J","^29","^6","missionary/impl/Ambiguous.cljs","^:",19,"^4F",true,"^8",10,"^7",22,"^4G",false,"^9",22,"^4H","^4I","^4J",null],"~$walk",["^ ","^45",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",114,"^8",7,"^9",114,"^:",11,"^46",["^10",["^47",["^10",[["~$b"]]]]]],"^J","^28","^6","missionary/impl/Ambiguous.cljs","^:",11,"^48",["^10",[["~$b"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^7",114,"^4<","^52","^9",114,"^4>",1,"^4?",true,"^46",["^10",["^47",["^10",[["~$b"]]]]]],"~$transfer",["^ ","^45",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",226,"^8",7,"^9",226,"^:",15,"^46",["^10",["^47",["^10",[["~$ps"]]]]]],"^J","^2;","^6","missionary/impl/Ambiguous.cljs","^:",15,"^48",["^10",[["^59"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^7",226,"^4<","^4=","^9",226,"^4>",1,"^4?",true,"^46",["^10",["^47",["^10",[["^59"]]]]]],"~$kill",["^ ","^45",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",83,"^8",7,"^9",83,"^:",11,"^46",["^10",["^47",["^10",[["^59"]]]]]],"^J","^1F","^6","missionary/impl/Ambiguous.cljs","^:",11,"^48",["^10",[["^59"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^7",83,"^4<",["^I",["^4=","^52"]],"^9",83,"^4>",1,"^4?",true,"^46",["^10",["^47",["^10",[["^59"]]]]]],"~$choose",["^ ","^45",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",40,"^8",7,"^9",40,"^:",13,"^46",["^10",["^47",["^10",[["~$p"]]]]]],"^J","^1E","^6","missionary/impl/Ambiguous.cljs","^:",13,"^48",["^10",[["~$p"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^7",40,"^4<","^4=","^9",40,"^4>",1,"^4?",true,"^46",["^10",["^47",["^10",[["~$p"]]]]]],"~$boot",["^ ","^45",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",26,"^8",7,"^9",26,"^:",11,"^46",["^10",["^47",["^10",[["^54","~$c"]]]]]],"^J","^1D","^6","missionary/impl/Ambiguous.cljs","^:",11,"^48",["^10",[["^54","~$c"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^7",26,"^4<","^4=","^9",26,"^4>",2,"^4?",true,"^46",["^10",["^47",["^10",[["^54","~$c"]]]]]],"~$move",["^ ","^45",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",130,"^8",7,"^9",130,"^:",11,"^46",["^10",["^47",["^10",[["~$x","~$y"]]]]]],"^J","^1H","^6","missionary/impl/Ambiguous.cljs","^:",11,"^48",["^10",[["~$x","~$y"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^7",130,"^9",130,"^4>",2,"^4?",true,"^46",["^10",["^47",["^10",[["~$x","~$y"]]]]]],"~$backtrack",["^ ","^45",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",30,"^8",7,"^9",30,"^:",16,"^46",["^10",["^47",["^10",[["~$p","~$b","~$c"]]]]]],"^J","^1I","^6","missionary/impl/Ambiguous.cljs","^:",16,"^48",["^10",[["~$p","~$b","~$c"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^7",30,"^9",30,"^4>",3,"^4?",true,"^46",["^10",["^47",["^10",[["~$p","~$b","~$c"]]]]]],"~$Choice",["^ ","^4B",9,"^4C",["^I",[]],"^J","^1J","^6","missionary/impl/Ambiguous.cljs","^:",16,"^4F",true,"^8",10,"^7",21,"^4G",false,"^9",21,"^4H","^4I","^4J",null],"~$->Choice",["^ ","^45",null,"^5",["^ ","^4C",["^I",[]],"^6","missionary/impl/Ambiguous.cljs","^:",16,"^8",10,"^4L","^4M","^7",21,"^9",21,"^46",["^10",["^47",["^10",[["^4@","^4X","^4Y","~$coroutine","~$iterator","~$parallelism","~$live","~$busy","^55"]]]]],"^4J",null,"^4S","Positional factory function for missionary.impl.Ambiguous/Choice."],"^4C",["^I",[]],"^J","^1K","^6","missionary/impl/Ambiguous.cljs","^:",16,"^48",["^10",[["^4@","^4X","^4Y","^5A","^5B","^5C","^5D","^5E","^55"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^4L","^4M","^7",21,"^4<","^1J","^9",21,"^4>",9,"^4?",true,"^46",["^10",["^47",["^10",[["^4@","^4X","^4Y","^5A","^5B","^5C","^5D","^5E","^55"]]]]],"^4J",null,"^4S","Positional factory function for missionary.impl.Ambiguous/Choice."],"~$all",["^ ","^45",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",220,"^8",7,"^9",220,"^:",10,"^46",["^10",["^47",["^10",[["~$n"]]]]]],"^J","^1M","^6","missionary/impl/Ambiguous.cljs","^:",10,"^48",["^10",[["~$n"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^7",220,"^4<","^4=","^9",220,"^4>",1,"^4?",true,"^46",["^10",["^47",["^10",[["~$n"]]]]]],"~$->Processor",["^ ","^45",null,"^5",["^ ","^4C",["^I",[]],"^6","missionary/impl/Ambiguous.cljs","^:",19,"^8",10,"^4L","^4M","^7",22,"^9",22,"^46",["^10",["^47",["^10",[["^4@","^4X","^4Y","^4R"]]]]],"^4J",null,"^4S","Positional factory function for missionary.impl.Ambiguous/Processor."],"^4C",["^I",[]],"^J","^1P","^6","missionary/impl/Ambiguous.cljs","^:",19,"^48",["^10",[["^4@","^4X","^4Y","^4R"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^4L","^4M","^7",22,"^4<","^29","^9",22,"^4>",4,"^4?",true,"^46",["^10",["^47",["^10",[["^4@","^4X","^4Y","^4R"]]]]],"^4J",null,"^4S","Positional factory function for missionary.impl.Ambiguous/Processor."],"~$suspend",["^ ","^45",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",316,"^8",7,"^9",316,"^:",14,"^46",["^10",["^47",["^10",[["~$b","~$par","~$flow"]]]]]],"^J","^1O","^6","missionary/impl/Ambiguous.cljs","^:",14,"^48",["^10",[["~$b","^5I","^5J"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^7",316,"^4<","^4T","^9",316,"^4>",3,"^4?",true,"^46",["^10",["^47",["^10",[["~$b","^5I","^5J"]]]]]],"~$nop",["^ ","^45",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",24,"^8",7,"^9",24,"^:",10,"^46",["^10",["^47",["^10",[[]]]]]],"^J","^1T","^6","missionary/impl/Ambiguous.cljs","^:",10,"^48",["^10",[[]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^7",24,"^4<","^52","^9",24,"^4>",0,"^4?",true,"^46",["^10",["^47",["^10",[[]]]]]],"~$root",["^ ","^45",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",75,"^8",7,"^9",75,"^:",11,"^46",["^10",["^47",["^10",[["~$b"]]]]]],"^J","^1U","^6","missionary/impl/Ambiguous.cljs","^:",11,"^48",["^10",[["~$b"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^7",75,"^4<","^4=","^9",75,"^4>",1,"^4?",true,"^46",["^10",["^47",["^10",[["~$b"]]]]]],"~$ack",["^ ","^45",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",198,"^8",7,"^9",198,"^:",10,"^46",["^10",["^47",["^10",[["~$c"]]]]]],"^J","^1V","^6","missionary/impl/Ambiguous.cljs","^:",10,"^48",["^10",[["~$c"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^7",198,"^4<",["^I",["^4=","^52"]],"^9",198,"^4>",1,"^4?",true,"^46",["^10",["^47",["^10",[["~$c"]]]]]],"~$discard",["^ ","^45",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",144,"^8",7,"^9",144,"^:",14,"^46",["^10",["^47",["^10",[["~$b"]]]]]],"^J","^1W","^6","missionary/impl/Ambiguous.cljs","^:",14,"^48",["^10",[["~$b"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^7",144,"^4<",["^I",["^4=","^52"]],"^9",144,"^4>",1,"^4?",true,"^46",["^10",["^47",["^10",[["~$b"]]]]]],"~$cancel",["^ ","^45",null,"^5",["^ ","^6","missionary/impl/Ambiguous.cljs","^7",87,"^8",7,"^9",87,"^:",13,"^46",["^10",["^47",["^10",[["~$c"]]]]]],"^J","^1X","^6","missionary/impl/Ambiguous.cljs","^:",13,"^48",["^10",[["~$c"]]],"^49",null,"^4:",["^10",[null,null]],"^8",1,"^4;",false,"^7",87,"^4<",["^I",["^4=","^52"]],"^9",87,"^4>",1,"^4?",true,"^46",["^10",["^47",["^10",[["~$c"]]]]]]],"^Z",["^ ","^F","^F"],"~:cljs.analyzer/constants",["^ ","^U",["^I",["^5D","^4[","^4R","^4@","~$boolean","^5A","^5C","^55","^4W","~$number","^4Z","^5E","^5B","^4P","^4H","^4Y","^4Q","^4O","^4N","^50","^4X"]],"~:order",["^4N","^4O","^4P","^4Q","^4R","^4W","^4X","^4Y","^4Z","^4[","^50","^4@","^5A","^5B","^5C","^4H","^5R","^5D","^5Q","^5E","^55"]],"^14",["^ ","^V",["^I",[]]],"^15",["^ "],"^16",["^T","^F","^S","^Q"]],"^N","^K","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^2=",[["^5V","~:static-fns"],true,["^5V","~:shadow-tweaks"],null,["^5V","~:source-map-inline"],null,["^5V","~:elide-asserts"],false,["^5V","~:optimize-constants"],null,["^5V","^1;"],null,["^5V","~:external-config"],null,["^5V","~:tooling-config"],null,["^5V","~:emit-constants"],null,["^5V","~:load-tests"],null,["^5V","~:form-size-threshold"],null,["^5V","~:global-goog-object&array"],null,["^5V","~:data-readers"],null,["^5V","~:infer-externs"],"~:auto",["^5V","^1="],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5V","~:fn-invoke-direct"],null,["^5V","~:source-map"],"/dev/null"]]]