{"version":3,"sources":["hyperfiddle/electric/impl/io.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","com.cognitect.transit.types/UUID","hyperfiddle.electric.impl.io/default-write-handler","cognitect.transit.write_handler","x","hyperfiddle.electric.impl.io/-last-unserializable-for-repl","js/console.log","cljs.core.pr_str","cljs.core/type","_","hyperfiddle.electric.impl.io/->cache","size","G__30244","arr30247","cljs.core/identity","cljs.core.object_array","hyperfiddle.electric.impl.io/cache-add","cache","k","v","i","cljs.core/count","cljs.core._EQ_","hyperfiddle.electric.impl.array-fields/get","arr30260","widx","p1__30251#","hyperfiddle.electric.impl.array-fields/getswap","cljs.core/mod","arr30266","hyperfiddle.electric.impl.io/cache-get","hyperfiddle.electric.impl.io/cache->map","ac","cljs.core/transient","cljs.core.assoc_BANG_","cljs.core/persistent!","hyperfiddle.electric.impl.io/!ex-cache","hyperfiddle.electric.impl.io/save-original-ex!","fi","id","hyperfiddle.electric.debug/ex-id","temp__5808__auto__","cause","cljs.core/ex-cause","js/hyperfiddle.electric.FailureInfo","hyperfiddle.electric.impl.io/get-original-ex","hyperfiddle.electric.impl.io/*write-handlers*","hyperfiddle.electric.impl.io/failure-writer","err","js/missionary.Cancelled","js/hyperfiddle.electric.Pending","js/hyperfiddle.electric.Remote","hyperfiddle.electric.debug/serializable","cljs.core/ex-data","cljs.core/ex-message","hyperfiddle.electric.impl.io/write-opts","cljs.core.merge","js/hyperfiddle.electric.Failure","hyperfiddle.electric.impl.io/*read-handlers*","hyperfiddle.electric.impl.io/failure-reader","cognitect.transit/read-handler","p__30308","vec__30309","seq__30310","cljs.core/seq","first__30311","cljs.core/first","cljs.core/next","tag","args","G__30312","cljs.core/Keyword","js/Error","vec__30315","cljs.core.nth","message","data","hyperfiddle.electric.debug.ex_info_STAR_","vec__30318","or__5045__auto__","hyperfiddle.electric.impl.io/read-opts","hyperfiddle.electric.impl.io/set-ints","cljs.core.partial","cljs.core/reduce-kv","r","n","offset","G__30334","hyperfiddle.electric.impl.io/encode-numbers","xs","required","G__30338","js/ArrayBuffer","js/DataView","hyperfiddle.electric.impl.io/decode-numbers","b","cljs.core/vec","js/hyperfiddle","js/hyperfiddle.electric","js/hyperfiddle.electric.impl","js/hyperfiddle.electric.impl.io","js/hyperfiddle.electric.impl.io.t_hyperfiddle$electric$impl$io30342","hyperfiddle.electric.impl.io/t_hyperfiddle$electric$impl$io30342","_30344","meta30343","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","hyperfiddle.electric.impl.io/->t_hyperfiddle$electric$impl$io30342","rf","l","G__30358","G__30359","!cache","cljs.core.atom","hyperfiddle.electric.impl.io/transit-writer","cljs.core.swap_BANG_","p__30379","map__30381","cljs.core/--destructure-map","cljs.core.get","write-handlers","writer","cljs.core.assoc","cognitect.transit.writer","hyperfiddle.electric.impl.io/encode","cognitect.transit/write","hyperfiddle.electric.impl.io/transit-reader","p__30389","map__30390","read-handlers","reader","cognitect.transit.reader","hyperfiddle.electric.impl.io/decode","s","cognitect.transit/read","hyperfiddle.electric.impl.io/decode-str","e30395","G__30397","js/console.debug","t","cljs.core.ex_info","hyperfiddle.electric.impl.io/chunk-size","hyperfiddle.electric.impl.io/message-reader","?read","cr30399-state","cr30399-place-4","cr30399-place-2","cr30399-place-37","cr30399-place-38","cr30399-place-39","cr30399-place-40","cr30399-place-41","cr30399-place-42","cr30399-block-1","cr30399-exception","e30490","cr30399-place-11","cr30399-place-14","cr30399-place-15","cr30399-place-16","cr30399-place-17","cr30399-place-18","cr30399-place-19","cr30399-place-20","cr30399-place-21","cr30399-place-22","cr30399-place-23","cr30399-place-24","cr30399-place-25","cr30399-place-26","cr30399-place-27","cr30399-place-28","cr30399-block-7","cr30399-block-5","e30503","cr30399-place-8","cr30399-place-9","cr30399-place-10","cr30399-place-35","cr30399-place-36","cr30399-block-10","e30516","cr30399-place-32","cr30399-place-33","cr30399-place-34","cr30399-block-8","e30527","cr30399-place-12","cr30399-place-13","cljs.core/IVector","cr30399-block-4","e30532","cr30399-place-3","cr30399-block-2","missionary.core/park","e30541","cr30399-place-29","cr30399-block-6","e30543","cr30399-place-7","e30546","missionary.core/unpark","cr30399-place-5","cr30399-place-6","cr30399-block-9","cr30399-block-3","e30550","cr30399-place-0","cr30399-place-1","e30555","cr30399-place-30","cr30399-place-31","e30563","cloroutine.impl/coroutine","G__30569","cr30399-block-0","missionary.core/sp-run","G__30561","fexpr__30560","G__30498","G__30499","fexpr__30497","cljs.core/conj!","G__30495","fexpr__30494","G__30526","fexpr__30525","G__30522","G__30523","fexpr__30521","G__30539","fexpr__30538","G__30507","fexpr__30506","G__30510","G__30511","G__30512","fexpr__30509","cljs.core/reduce","G__30514","fexpr__30513","G__30530","fexpr__30529","p1__30574#","hyperfiddle.electric.impl.io/message-writer","write","cr30577-state","cr30577-place-5","cr30577-place-10","cr30577-place-11","cr30577-place-12","cr30577-place-13","cr30577-place-14","cr30577-place-15","cr30577-place-16","cr30577-place-17","cr30577-place-18","cr30577-place-19","cr30577-place-20","cr30577-place-21","cr30577-place-22","cr30577-place-23","cr30577-place-24","cr30577-place-25","cr30577-place-26","cr30577-place-27","cr30577-block-3","cr30577-exception","e30705","cr30577-place-44","cr30577-place-45","cr30577-block-1","e30721","cr30577-place-28","cr30577-place-29","cr30577-place-30","cr30577-block-5","e30722","cr30577-block-4","cr30577-place-40","cr30577-place-41","cr30577-place-42","cr30577-place-43","cr30577-block-6","e30727","cr30577-place-46","cr30577-place-47","cr30577-place-48","cr30577-block-8","e30731","cr30577-place-72","cr30577-place-73","cr30577-place-74","cr30577-place-75","cr30577-place-76","e30734","cr30577-place-55","cr30577-place-56","cr30577-place-57","cr30577-place-58","cr30577-place-59","cr30577-place-60","cr30577-block-10","e30738","cr30577-place-54","cr30577-block-14","e30752","cr30577-place-62","cr30577-place-63","cr30577-place-64","cr30577-place-65","cr30577-place-66","cr30577-place-67","cr30577-place-68","cr30577-place-69","cr30577-place-70","cr30577-place-71","cr30577-block-12","e30754","cr30577-place-4","cr30577-place-6","cr30577-place-7","cr30577-place-8","cr30577-place-9","cr30577-block-7","cr30577-block-2","e30766","cr30577-place-31","cr30577-place-32","cr30577-place-33","cr30577-place-34","cr30577-place-35","cr30577-place-36","cljs.core/IMap","cr30577-place-37","cr30577-place-38","cr30577-place-39","e30774","cr30577-place-61","cr30577-block-13","e30779","cr30577-place-0","cr30577-place-1","cr30577-place-2","cr30577-place-3","e30782","e30788","cr30577-place-49","cr30577-place-50","cr30577-place-51","cr30577-place-52","cr30577-place-53","cr30577-block-11","cr30577-block-9","e30789","G__30794","cr30577-block-0","G__30787","fexpr__30786","G__30784","fexpr__30783","cljs.core/pop","G__30708","fexpr__30707","G__30710","fexpr__30709","G__30712","fexpr__30711","G__30714","G__30715","fexpr__30713","G__30730","fexpr__30729","G__30724","fexpr__30723","G__30776","G__30777","G__30778","fexpr__30775","cljs.core/ex-info","G__30733","fexpr__30732","cljs.core/peek","G__30793","fexpr__30792","G__30763","fexpr__30762","G__30761","fexpr__30760","G__30756","G__30757","G__30758","fexpr__30755","cljs.core/subvec","G__30736","G__30737","fexpr__30735","G__30751","fexpr__30750","G__30748","fexpr__30747","hyperfiddle.electric.impl.io/decoder","G__30796","cljs.core.conj","cljs.core.into","hyperfiddle.electric.impl.io/encoder","cljs.core.reduce","cljs.core.eduction","cljs.core.map","cljs.core.partition_all","G__30798","G__30799","G__30800","var_args","G__30802","hyperfiddle.electric.impl.io/foreach"],"sourcesContent":[";; Facilities for encoding/decoding of Electric protocol messages.\n;; * Data frames can be arbitrary clojure data or Electric failures. Serialization is done via transit json, the failure\n;; error is preserved if it's an instance of `hyperfiddle.electric.Pending` or `hyperfiddle.electric.Cancelled`, otherwise\n;; the error is logged and turned into an instance of `hyperfiddle.electric.Remote`.\n;; * Control frames are vectors of signed integers. Serialization is the concatenation of the binary representation of\n;; these numbers as fixed-length 32-bit, big endian.\n\n(ns ^:no-doc hyperfiddle.electric.impl.io\n  (:require [missionary.core :as m]\n            [cognitect.transit :as t]\n            #?(:clj [clojure.tools.logging :as log])\n            [hyperfiddle.electric.debug :as dbg]\n            [hyperfiddle.rcf :as rcf :refer [tests with tap %]]\n            #?(:cljs [com.cognitect.transit.types])\n            [hyperfiddle.electric.impl.array-fields :as a])\n  (:import (missionary Cancelled)\n           (hyperfiddle.electric Failure Pending Remote FailureInfo)\n           #?(:clj (java.nio ByteBuffer))\n           #?(:clj (java.io ByteArrayInputStream ByteArrayOutputStream))\n           #?(:clj (clojure.lang IReduceInit))))\n\n#?(:cljs (extend-type com.cognitect.transit.types/UUID IUUID)) ; https://github.com/hyperfiddle/hyperfiddle/issues/728\n\n(def default-write-handler ; Intercepts unserializable values, logs and return nil\n  (t/write-handler ; Adapted from `com.cognitect.transit.impl.WriteHandlers.NullWriteHandler`\n    (fn [x]\n      (def -last-unserializable-for-repl x)\n      (#?(:clj log/info, :cljs js/console.log) \"Unserializable reference transfer:\" (pr-str (type x)) (str x))\n      \"_\")\n    (fn [x] nil)\n    (fn [_] \"\")))\n\n(defn ->cache \"Builds a minimal, cljc map/bounded-queue cache.\n  One slot per key (map).\n  Reaching `size` pops oldest value (bounded-queue).\" [size]\n  (doto (object-array (inc (* size 2))) (a/set (* size 2) 0)))\n(defn cache-add [cache k v]\n  (when-not (loop [i 0]\n              (when (< i (dec (count cache)))\n                (if (= k (a/get cache i))\n                  (do (a/set cache (inc i) v) true)\n                  (recur (+ i 2)))))\n    (let [widx (a/getswap cache (dec (count cache)) #(mod (+ % 2) (dec (count cache))))]\n      (a/set cache widx k, (inc widx) v))))\n(defn cache-get [cache k]\n  (loop [i 0]\n    (when (< i (dec (count cache)))\n      (if (= k (a/get cache i))\n        (a/get cache (inc i))\n        (recur (+ i 2))))))\n(defn cache->map [cache]\n  (loop [i 0, ac (transient {})]\n    (if (< i (dec (count cache)))\n      (recur (+ i 2) (assoc! ac (a/get cache i) (a/get cache (inc i))))\n      (persistent! ac))))\n\n(tests \"keyed cache\"\n  (def !c (->cache 1))\n  (cache-add !c 1 2) (cache-get !c 1) := 2\n  (cache-add !c 1 3) (cache-get !c 1) := 3\n  (cache-add !c 2 4) (cache-get !c 2) := 4\n  (cache->map !c) := {2 4}\n\n  \"size 2\"\n  (def !c (->cache 2))\n  (cache-add !c 1 1)\n  (cache-add !c 2 2)\n  (cache-add !c 2 2)\n  (cache->map !c) := {1 1, 2 2})\n\n(def !ex-cache (->cache 16))\n(defn save-original-ex! [fi]\n  (let [id (dbg/ex-id fi)]\n    (when-some [cause (ex-cause fi)]\n      (when-not (instance? FailureInfo cause)\n        (cache-add !ex-cache id cause)))\n    id))\n(defn get-original-ex [id] (cache-get !ex-cache id))\n\n(def ^:dynamic *write-handlers* nil)\n\n(def failure-writer (t/write-handler\n                      (fn [_] \"failure\")\n                      (fn [x]\n                        (let [err (.-error ^Failure x)]\n                          (cond (instance? Cancelled err) [:cancelled]\n                                (instance? Pending err)   [:pending]\n                                (instance? Remote err)    [:remote (dbg/serializable (ex-data err))]\n                                :else                     [:exception (ex-message err) (dbg/serializable (ex-data err))\n                                                           (save-original-ex! err)])))))\n\n(defn write-opts []\n  {:handlers (merge *write-handlers*\n               {Failure failure-writer\n                :default default-write-handler}) ; cljs\n   :default-handler default-write-handler}) ; clj\n\n(def ^:dynamic *read-handlers* nil)\n\n(def failure-reader (t/read-handler\n                      (fn [[tag & args]]\n                        (case tag\n                          :exception (let [[message data id] args]\n                                       (Failure. (dbg/ex-info* message data id nil)))\n                          :remote    (let [[data] args]\n                                       (Failure. (dbg/ex-info* \"Remote error\" (or data {}))))\n                          :pending   (Failure. (Pending.))\n                          :cancelled (Failure. (Cancelled.))))))\n\n(defn read-opts [] {:handlers (merge *read-handlers* {\"failure\" failure-reader})})\n\n(def set-ints\n  (partial reduce-kv\n    (fn [r i n]\n      (let [offset (bit-shift-left i 2)]\n        #?(:clj  (.putInt ^ByteBuffer r offset n)\n           :cljs (doto r (.setInt32 offset n)))))))\n\n(defn encode-numbers\n  \"Encode a control frame to a binary segment.\"\n  [xs]\n  (let [required (bit-shift-left (count xs) 2)] ; size of bytebuffer is 4 \u00d7 (count xs), so shift by 2\n    #?(:clj (set-ints (ByteBuffer/allocate required) xs)\n       :cljs (doto (js/ArrayBuffer. required)\n               (-> (js/DataView.) (set-ints xs))))))\n\n(defn decode-numbers\n  \"Decode a control frame from a binary segment.\"\n  [b]\n  (vec\n    (reify\n      #?(:clj IReduceInit :cljs IReduce)\n      #?(:clj (reduce [_ rf r]\n                (let [l (.limit ^ByteBuffer b)]\n                  (loop [r r, i (int 0)]\n                    (if (< i l)\n                      (recur (rf r (.getInt ^ByteBuffer b i))\n                        (unchecked-add-int i 4)) r))))\n         :cljs (-reduce [_ rf r]\n                 (let [l (.-byteLength b)\n                       v (js/DataView. b)]\n                   (loop [r r, i 0]\n                     (if (< i l)\n                       (recur (rf r (.getInt32 v i))\n                         (+ i 4)) r))))))))\n\n\n;; #?(:cljs (def transit-writer (t/writer :json (write-opts))))\n#?(:cljs (let [!cache (atom {:write-handlers *write-handlers*, :writer nil})]\n           (defn transit-writer []\n             (:writer (swap! !cache (fn [{:keys [write-handlers writer] :as cache}]\n                                      (if (= write-handlers *write-handlers*)\n                                        (if writer\n                                          cache\n                                          (assoc cache :writer (t/writer :json (write-opts))))\n                                        {:write-handlers *write-handlers*\n                                         :writer         (t/writer :json (write-opts))})))))))\n\n(defn encode\n  \"Encode a data frame to transit json\"\n  [x]\n  #?(:clj (let [out (ByteArrayOutputStream.)]\n            (t/write (t/writer out :json (write-opts)) x)\n            (.toString out))\n     :cljs (t/write (transit-writer) x)))\n\n;; #?(:cljs (def transit-reader (t/reader :json (read-opts))))\n#?(:cljs (let [!cache (atom {:read-handlers *read-handlers*, :reader nil})]\n           (defn transit-reader []\n             (:reader (swap! !cache (fn [{:keys [read-handlers reader] :as cache}]\n                                      (if (= read-handlers *read-handlers*)\n                                        (if reader\n                                          cache\n                                          (assoc cache :reader (t/reader :json (read-opts))))\n                                        {:read-handlers *read-handlers*\n                                         :reader        (t/reader :json (read-opts))})))))))\n\n\n(defn decode\n  \"Decode a data frame from transit json\"\n  [^String s]\n  #?(:clj (t/read (t/reader (ByteArrayInputStream. (.getBytes s \"UTF-8\")) :json (read-opts)))\n     :cljs (t/read (transit-reader) s)))\n\n(defn decode-str [x]\n  (try (doto (decode x) (->> (#?(:clj log/trace, :cljs js/console.debug) \"\ud83d\udd3d\")))\n    (catch #?(:clj Throwable :cljs :default) t\n      (throw (ex-info \"Failed to decode\" {:value x} t)))))\n\n(tests \"FailureInfo\"\n  (def cause (ex-info \"boom\" {}))\n  (def ex (dbg/ex-info* \"x\" {} cause))\n  (def sent (-> ex Failure. encode decode .-error))\n  \"keeps the ID across the wire\"\n  (dbg/ex-id ex) := (dbg/ex-id sent)\n  \"can restore cause\"\n  (get-original-ex (dbg/ex-id sent)) := cause\n  nil)\n\n; Jetty rejects websocket payloads larger than 65536 bytes by default\n; We\u2019ll chop messages if needed\n(def chunk-size (bit-shift-right 65536 2))\n\n(defn ^:deprecated message-reader [?read]\n  \"Returns a discrete flow of read Electric messages from provided task, emitting individual frames.\"\n  (m/sp\n    (loop [data (transient [])]\n      (let [x (m/? ?read)]\n        (if (string? x)\n          (recur (conj! data (decode-str x)))\n          (persistent!\n            (conj! data\n              (loop [x       x\n                     control (transient [])]\n                (let [xs      (decode-numbers x)\n                      control (reduce conj! control xs)]\n                  (if (< (count xs) chunk-size) ; final frame\n                    (persistent! control)\n                    (recur (m/? ?read) control)))))))))))\n\n\n(defn ^:deprecated message-writer\n  \"Returns a function taking an Electric message and returning a task writing it as individual frames using provided\n   function. Might cut a message into chunks if its size would exceed the server payload limit.\n   An empty message (0b) is written to notify the end of frame.\"\n  [write]\n  #(m/sp\n     (loop [xs (seq (pop %))]\n       (if-some [[x & xs] xs]\n         (do (#?(:clj log/trace, :cljs js/console.debug) \"\ud83d\udd3c\" x)\n           (m/? (write\n                  (try (encode x)\n                    (catch #?(:clj Throwable :cljs :default) t\n                      (throw (ex-info \"Failed to encode\" {:value x} t))))))\n           (recur xs))\n         (loop [xs (peek %)]\n           (if (>= (count xs) chunk-size)\n             (do (m/? (write (encode-numbers (subvec xs 0 chunk-size))))\n               (recur (subvec xs chunk-size)))\n             (m/? (write (encode-numbers xs)))))))))\n\n(defn ^:deprecated decoder\n  \"A transducer partitioning a sequence of network messages into Electric events.\"\n  [rf]\n  (let [data (doto (object-array 2)\n               (aset 0 []) (aset 1 []))]\n    (fn\n      ([] (rf))\n      ([r]\n       (assert (= [] (aget data 0) (aget data 1)))\n       (rf r))\n      ([r x]\n       (if (string? x)\n         (do (assert (= [] (aget data 1)))\n             (aset data 0 (conj (aget data 0) (decode-str x))) r)\n         (let [xs (decode-numbers x)]\n           (aset data 1 (into (aget data 1) xs))\n           (if (< (count xs) chunk-size)                  ; final frame\n             (let [x (conj (aget data 0) (aget data 1))]\n               (aset data 0 [])\n               (aset data 1 [])\n               (rf r x)) r)))))))\n\n(defn ^:deprecated encoder\n  \"A transducer expanding Electric events to a sequence of network messages.\"\n  [rf]\n  (fn\n    ([] (rf))\n    ([r] (rf r))\n    ([r x]\n     (let [r (reduce rf r (eduction (map encode) (pop x)))\n           r (reduce rf r (eduction (partition-all chunk-size) (map encode-numbers) (peek x)))]\n       (case (mod (count (peek x)) chunk-size)\n         0 (rf r (encode-numbers [])) r)))))\n\n(defn foreach\n  ([r] r)\n  ([r x] (r x) r))\n"]}